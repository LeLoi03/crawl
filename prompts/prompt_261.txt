input:
1. SISY_0 conference:
SISY 2023   
 IEEE 21 st  International Symposium on Intelligent Systems and Informatics   
  Pula, Croatia  
  September 21-23, 2023   
 Home 
  Committees 
  General Info 
  Paper Submission 
  Accommodation 
  Registration 
  Final Program 
  Contact 
 Welcome to SISY 2023!  
 Authors are welcome to submit original and unpublished papers which are not currently under review by another conference or journal and addressing state-of-the-art research to share their work in all areas of Intelligent Systems and Informatics and its applications and attend the IEEE 21 st  International Symposium on Intelligent Systems and Informatics (SISY 2023)  to be held on September 21-23, 2023  in Pula, Croatia  .  
  Call for Papers   
 IEEE Publication  
  The conference appears on the IEEE Conference Search  .  
  Conference proceedings that meet IEEE quality review standards may be eligible for inclusion in the IEEE Xplore Digital Library. IEEE reserves the right to exclude a paper from distribution after the conference (e.g., removal from IEEE Xplore), if the paper is not presented at the conference. 'Pay to publish' is not allowed by IEEE. So at least one author of a paper must show up and present the paper at the conference.  
  The conference proceedings is now available via IEEE Xplore  .  
 Scope  
 The aim of SISY 2023 symposium is to offer researchers an opportunity to extend the existing scientific relationships all over the world in the field of Intelligent Systems. Our hope is that researchers and lecturers working at various institutions will find common research areas at the conference so that they can cooperate on bilateral or international projects.  
 Topics  
 Computational Intelligence  (track chair: Amir Mosavi): Machine Learning, Genetic Algorithms, Neural Nets, Fuzzy Systems, Fuzzy and Neuro-Fuzzy Control, Knowledge Based Systems, Expert Systems  
 Authors' Schedule  
 Full paper submission  : June 19, 2023   
  Notification  : July 14, 2023  
  Final paper submission  : August 15, 2023  
 Organizers  
 Óbuda University, Budapest, Hungary  
  IEEE Croatia Section  
 Next Events  
 CANDO EPE 2023   
  CINTI 2023   
  SAMI 2024   
  ICCC 2024   
  UPoN 2024   
  INES 2024   
  SISY 2024   
 Last updated on February 8, 2024 by Annie
2. SISY_2 conference:
Menu    Menu 
 IEEE 21st International Symposium on Intelligent Systems and Informatics (SISY 2023)  
   « All Events   
 IEEE 21st International Symposium on Intelligent Systems and Informatics (SISY 2023)  
 September 21, 2023  - September 23, 2023   
 The IEEE 21st International Symposium on Intelligent Systems and Informatics (SISY 2023) to be held on September 21-23, 2023 in Pula, Croatia. Conference proceedings that meet IEEE quality review standards may be eligible for inclusion in the IEEE Xplore Digital Library.  
  Goal   
  The aim of SISY 2023 symposium is to offer researchers an opportunity to extend the existing scientific relationships all over the world in the field of Intelligent Systems.  
 Organizer   
  IEEE (Institute of Electrical and Electronics Engineers)  
   Applied Mathematics  
 Date   
  September 21-23, 2023  
 Costs   
 Details  
 Start:  September 21, 2023   End:  September 23, 2023      
 + Google Calendar  + iCal Export    
 Details  
 Start:  September 21, 2023   End:  September 23, 2023      
 Event Navigation  
 «  18th Conference on Computer Science and Intelligence Systems FedCSIS 2023 
  Gartner Security & Risk Management Summit » 
  18th Conference on Computer Science and Intelligence Systems FedCSIS 2023          Gartner Security & Risk Management Summit       
 Scroll to top
3. SISY_3 conference:
SISY 2023   
 IEEE 21 st  International Symposium on Intelligent Systems and Informatics   
  Pula, Croatia  
  September 21-23, 2023   
 Home 
  Committees 
  General Info 
  Paper Submission 
  Accommodation 
  Registration 
  Final Program 
  Contact 
 SISY 2023 Final Program  
 Technical Program  
 Conference program  can be downloaded as a pdf file.  
  It is not possible to shift the presentations, authors must present the paper at the session indicated in the program.  
 Venue  
 Authors' Schedule  
 Full paper submission  : June 19, 2023   
  Notification  : July 14, 2023  
  Final paper submission  : August 15, 2023  
 Organizers  
 Óbuda University, Budapest, Hungary  
  IEEE Croatia Section  
 Next Events  
 CANDO EPE 2023   
  CINTI 2023   
  SAMI 2024   
  ICCC 2024   
  UPoN 2024   
  INES 2024   
  SISY 2024   
 SISY 2023 Final Program
4. SLE_0 conference:
SPLASH 2023   Sun 22 - Fri 27 October 2023 Cascais, Portugal    
 Toggle navigation        
  Program | SPLASH Program 
  Your Program 
   Sun 22 Oct 
  Mon 23 Oct 
  Tue 24 Oct 
  Wed 25 Oct 
  Thu 26 Oct 
  Fri 27 Oct 
  Tracks | SPLASH 2023 
  Awards 
  OOPSLA 
  SAS 
  SAS  Artifacts 
  SLE 
  Workshops 
  CONFLANG  23 
  ST30 
  VMIL 
  Organization | SPLASH 2023 Committees 
  Organizing Committee 
  Steering Committee 
  SAS | Invited Speakers 
  Organizing Committee 
  SAS 2023 
  SAS 2023 Artifacts 
  SLE | Organizing Committee 
  Program Committee 
  Workshops 
  SPLASH 2024 
  SPLASH 2023 
  SPLASH 2022 
  Sign up 
  SPLASH 2023  ( series  ) /  SLE 2023 ( series  ) /  SLE (Software Language Engineering) 2023  
 About 
  Accepted Papers 
  Call for Papers 
  The ACM SIGPLAN International Conference on Software Language Engineering (SLE) is devoted to the principles of software languages: their design, their implementation, and their evolution.  
 With the ubiquity of computers, software has become the dominating intellectual asset of our time. In turn, this software depends on software languages, namely the languages it is written in, the languages used to describe its environment, and the languages driving its development process. Given that everything depends on software and that software depends on software languages, it seems fair to say that for many years to come, everything will depend on software languages.  
 Software language engineering  (SLE) is the discipline of engineering languages and their tools required for the creation of software. It abstracts from the differences between programming languages, modelling languages, and other software languages, and emphasizes the engineering facet of the creation of such languages, that is, the establishment of the scientific methods and practices that enable the best results. While SLE is certainly driven by its metacircular character (software languages are engineered using software languages), SLE is not self-satisfying: its scope extends to the engineering of languages for all and everything.  
 Like its predecessors, the 16th edition of the SLE conference, SLE 2023, will bring together researchers from different areas united by their common interest in the creation, capture, and tooling of software languages. It overlaps with traditional conferences on the design and implementation of programming languages, model-driven engineering, and compiler construction, and emphasizes the fusion of their communities. To foster the latter, SLE traditionally fills a two-day program with a single track, with the only temporal overlap occurring between co-located events.  
 SLE 2023 will be co-located with SPLASH 2023  and take place in Cascais, Lisbon, Portugal.  
   The GMT offsets shown reflect the offsets at the moment of the conference  .     
 Time Band   
 ×    You're viewing the program in a time zone which is different from your device's time zone change time zone     
 Mon 23 Oct   
 Displayed time zone: Lisbon  change      
 30m    
 Talk | Exceptions all Over the Shop: Modular, Customizable, Language-independent Exception Handling Layer Research Paper      SLE   
 Walter Cazzola  Università degli Studi di Milano  , Luca Favalli  Università degli Studi di Milano    
  DOI 
 30m    
 Talk | An Executable Semantics for Faster Development of Optimizing Python Compilers Research Paper      SLE   
 Olivier Melancon  Université de Montréal  , Marc Feeley  Université de Montréal  , Manuel Serrano  Inria; University of Côte d'Azur    
  DOI 
 30m    
 Talk | Adaptive Structural Operational Semantics Research Paper      SLE   
 Gwendal Jouneaux  University of Rennes; Inria; IRISA  , Damian Frölich  University of Amsterdam  , Olivier Barais  University of Rennes; Inria; CNRS; IRISA  , Benoit Combemale  University of Rennes, Inria, CNRS, IRISA  , Gurvan LE GUERNIC  DGA MI & Université de Rennes 1  , Gunter Mussbacher  McGill University  , L. Thomas van Binsbergen  University of Amsterdam    
  DOI   Pre-print 
  Chair(s): Coen De Roover  Vrije Universiteit Brussel   12:10pm The GPCE, SLE and COLA awards will be announced in the last part of this session in Room XV. 
 Keynote | Coccinelle: Impact and Internals   SLE   
 Julia Lawall  Inria 
 20m    
 Awards | GPCE/SLE Awards   SLE   
 Amir Shaikhha  University of Edinburgh  , Coen De Roover  Vrije Universiteit Brussel  , Sebastian Erdweg  JGU Mainz  , João Saraiva  HASLab/INESC TEC, University of Minho  , Thomas Degueule  CNRS, LaBRI  , Elizabeth Scott  Royal Holloway University of London  , Friedrich Steimann  Fernuniversität in Hagen  , Walter Cazzola  Università degli Studi di Milano 
 30m    
 Talk | A reference GLL implementation Research Paper      SLE   
 Adrian Johnstone  Royal Holloway University of London, UK    
  DOI 
 30m    
 Talk | Sharing Trees and Contextual Information: Re-imagining Forwarding in Attribute Grammars Research Paper      SLE   
 Lucas Kramer  University of Minnesota  , Eric Van Wyk  Department of Computer Science and Engineering, University of Minnesota, USA    
  DOI   Pre-print 
 30m    
 Talk | Nanopass Attribute Grammars Research Paper      SLE   
 Nathan Ringo  University of Minnesota  , Lucas Kramer  University of Minnesota  , Eric Van Wyk  Department of Computer Science and Engineering, University of Minnesota, USA    
  DOI   Pre-print 
 30m    
 Talk | Automated extraction of grammar optimization rule configurations in a metamodel-grammar co-evolution scenario Research Paper      SLE   
 Weixing Zhang  Chalmers | University of Gothenburg  , Regina Hebig  Chalmers University of Technology & University of Gothenburg  , Daniel Strüber  Chalmers | University of Gothenburg / Radboud University  , Jan-Philipp Steghöfer  XITASO GmbH IT & Software Solutions    
  DOI   Pre-print 
 30m    
 Talk | Reuse and Automated Integration of Recommenders for Modelling Languages Research Paper      SLE   
 Lissette Almonte  Universidad Autónoma de Madrid  , Antonio Garmendia  Universidad Autónoma de Madrid  , Esther Guerra  Universidad Autónoma de Madrid  , Juan de Lara  Autonomous University of Madrid    
  DOI   Pre-print 
 30m    
 Talk | GPT-3-Powered Type Error Debugging: Investigating the Use of Large Language Models for Code Repair Research Paper      SLE   
 Francisco Ribeiro  HASLab/INESC TEC & Universidade do Minho  , José Nuno Macedo  University of Minho  , Kanae Tsushima  National Institute of Informatics, Japan  , Rui Abreu  Faculty of Engineering, University of Porto  , João Saraiva  HASLab/INESC TEC, University of Minho    
  DOI 
 Tue 24 Oct   
 Displayed time zone: Lisbon  change      
 30m    
 Talk | Temporal Breakpoints for Multiverse Debugging Research Paper      SLE   
  DOI 
 30m    
 Talk | Cross-Level Debugging for Static Analysers Research Paper      SLE   
 Mats Van Molle  Vrije Universiteit Brussel  , Bram Vandenbogaerde  Vrije Universiteit Brussel  , Coen De Roover  Vrije Universiteit Brussel    
  DOI   Pre-print 
 30m    
 Talk | Cascade: a Meta-Language for Change, Cause and Effect Research Paper      SLE   
 Riemer van Rozen  CWI    
  DOI 
 Keynote | Artificial Languages are Dead. Long Live Artificial Languages! Keynote      SLE   
 Crista Lopes  University of California, Irvine 
 20m    
 Talk | Seamless Code Generator Synchronization in the Composition of Heterogeneous Modeling Languages New ideas / Vision paper      SLE   
 Nico Jansen  Software Engineering, RWTH Aachen University  , Bernhard Rumpe  RWTH Aachen University    
  DOI 
 30m    
 Talk | Enabling Blended Modelling of Timing and Variability in EAST-ADL Research Paper      SLE   
 Muhammad Waseem Anwar  Department of Innovation, Design and Engineering Malardalen University  , Federico Ciccozzi  Mälardalen University  , Alessio Bucaioni  Mälardalen University    
  DOI 
 30m    
 Talk | Towards Efficient Model Comparison Using Automated Program Rewriting Research Paper      SLE   
 Qurat Ul Ain Ali  University of York  , Dimitris Kolovos  University of York  , Konstantinos Barmpis  University of York    
  DOI 
 30m    
 Talk | Deriving Integrated Multi-Viewpoint Modeling Languages from Heterogeneous Modeling Languages: An Experience Report Research Paper      SLE   
 Malte Heithoff  RWTH Aachen University  , Nico Jansen  Software Engineering, RWTH Aachen University  , Jörg Christian Kirchhof  RWTH Aachen University  , Judith Michael  RWTH Aachen University  , Florian Rademacher  RWTH Aachen University  , Bernhard Rumpe  RWTH Aachen University    
  DOI   Pre-print 
 20m    
 Demonstration | A Low-Code Platform for Systematic Component-Oriented Language Composition Tool Paper      SLE   
 Jérôme Pfeiffer  University of Stuttgart, Germany  , Andreas Wortmann  University of Stuttgart    
  DOI 
 20m    
 Demonstration | A Tool for the Definition and Deployment of Platform-Independent Bots on Open Source Projects Tool Paper      SLE   
 Adem Ait  IN3 - UOC  , Javier Luis Cánovas Izquierdo  IN3 - UOC  , Jordi Cabot  Luxembourg Institute of Science and Technology    
  DOI   Pre-print 
 20m    
 Demonstration | Online Name-Based Navigation for Software Meta-languages Tool Paper      SLE   
 Peter D. Mosses  Swansea University and Delft University of Technology    
  Link to publication   DOI 
 20m    
 Demonstration | Practical Runtime Instrumentation of Software Languages: the Case of SciHook Tool Paper      SLE   
 Dorian Leroy  CEA/DAM/DIF, France  , Benoît Lelandais  CEA/DAM/DIF, France  , Marie-Pierre Oudot  CEA/DAM/DIF, France  , Benoit Combemale  University of Rennes, Inria, CNRS, IRISA    
  DOI   Pre-print 
 10m    
 Day closing | SLE Closing   SLE 
 Accepted Papers  
 Title 
 Adaptive Structural Operational Semantics Research Paper     SLE   
 Gwendal Jouneaux  , Damian Frölich  , Olivier Barais  , Benoit Combemale  , Gurvan LE GUERNIC  , Gunter Mussbacher  , L. Thomas van Binsbergen    
  DOI   Pre-print 
 A Low-Code Platform for Systematic Component-Oriented Language Composition Tool Paper     SLE   
 Jérôme Pfeiffer  , Andreas Wortmann    
  DOI 
 An Executable Semantics for Faster Development of Optimizing Python Compilers Research Paper     SLE   
 Olivier Melancon  , Marc Feeley  , Manuel Serrano    
  DOI 
 A reference GLL implementation Research Paper     SLE   
 Adrian Johnstone    
  DOI 
 A Tool for the Definition and Deployment of Platform-Independent Bots on Open Source Projects Tool Paper     SLE   
 Adem Ait  , Javier Luis Cánovas Izquierdo  , Jordi Cabot    
  DOI   Pre-print 
 Automated extraction of grammar optimization rule configurations in a metamodel-grammar co-evolution scenario Research Paper     SLE   
 Weixing Zhang  , Regina Hebig  , Daniel Strüber  , Jan-Philipp Steghöfer    
  DOI   Pre-print 
 Cascade: a Meta-Language for Change, Cause and Effect Research Paper     SLE   
 Riemer van Rozen    
  DOI 
 Cross-Level Debugging for Static Analysers Research Paper     SLE   
 Mats Van Molle  , Bram Vandenbogaerde  , Coen De Roover    
  DOI   Pre-print 
 Deriving Integrated Multi-Viewpoint Modeling Languages from Heterogeneous Modeling Languages: An Experience Report Research Paper     SLE   
 Malte Heithoff  , Nico Jansen  , Jörg Christian Kirchhof  , Judith Michael  , Florian Rademacher  , Bernhard Rumpe    
  DOI   Pre-print 
 Enabling Blended Modelling of Timing and Variability in EAST-ADL Research Paper     SLE   
 Muhammad Waseem Anwar  , Federico Ciccozzi  , Alessio Bucaioni    
  DOI 
 Exceptions all Over the Shop: Modular, Customizable, Language-independent Exception Handling Layer Research Paper     SLE   
 Walter Cazzola  , Luca Favalli    
  DOI 
 GPT-3-Powered Type Error Debugging: Investigating the Use of Large Language Models for Code Repair Research Paper     SLE   
 Francisco Ribeiro  , José Nuno Macedo  , Kanae Tsushima  , Rui Abreu  , João Saraiva    
  DOI 
 Nanopass Attribute Grammars Research Paper     SLE   
 Nathan Ringo  , Lucas Kramer  , Eric Van Wyk    
  DOI   Pre-print 
 Online Name-Based Navigation for Software Meta-languages Tool Paper     SLE   
 Peter D. Mosses    
  Link to publication   DOI 
 Practical Runtime Instrumentation of Software Languages: the Case of SciHook Tool Paper     SLE   
 Dorian Leroy  , Benoît Lelandais  , Marie-Pierre Oudot  , Benoit Combemale    
  DOI   Pre-print 
 Reuse and Automated Integration of Recommenders for Modelling Languages Research Paper     SLE   
 Lissette Almonte  , Antonio Garmendia  , Esther Guerra  , Juan de Lara    
  DOI   Pre-print 
 Seamless Code Generator Synchronization in the Composition of Heterogeneous Modeling Languages New ideas / Vision paper     SLE   
 Nico Jansen  , Bernhard Rumpe    
  DOI 
 Sharing Trees and Contextual Information: Re-imagining Forwarding in Attribute Grammars Research Paper     SLE   
 Lucas Kramer  , Eric Van Wyk    
  DOI   Pre-print 
 Temporal Breakpoints for Multiverse Debugging Research Paper     SLE   
 Matthias Pasquier  , Ciprian Teodorov  , Frédéric Jouault  , Matthias Brun  , Luka Le Roux  , Loïc Lagadec    
  DOI 
 Towards Efficient Model Comparison Using Automated Program Rewriting Research Paper     SLE   
 Qurat Ul Ain Ali  , Dimitris Kolovos  , Konstantinos Barmpis    
  DOI 
 Topics of Interest   
 SLE covers software language engineering rather than engineering a specific software language. Topics of interest include, but are not limited to:  
 Software Language Design and Implementation | Approaches to and methods for language design 
  Static semantics (e.g., design rules, well-formedness constraints) 
  Language evolution 
  Language families and variability, language and software product lines 
  Domain-specific approaches for any aspects of SLE (design, implementation, validation, maintenance) 
  Empirical evaluation and experience reports of language engineering tools | User studies evaluating usability 
  Performance benchmarks 
  Etc. 
  Types of Submissions   
 SLE accepts the following types of papers:  
 Research papers  : These are “traditional” papers detailing research contributions to SLE. Papers may range from 6 to 12 pages in length and may optionally include 2 further pages of bibliography/appendices. Papers will be reviewed with an understanding that some results do not need 12 full pages and may be fully described in fewer pages. 
  New ideas/vision papers  : These papers may describe new, unconventional software language engineering research positions or approaches that depart from standard practice. They can describe well-defined research ideas that are at an early stage of investigation. They could also provide new evidence to challenge common wisdom, present new unifying theories about existing SLE research that provides novel insight or that can lead to the development of new technologies or approaches, or apply SLE technology to radically new application areas. New ideas/vision papers must not exceed 5 pages and may optionally include 1 further page of bibliography/appendices. 
  SLE Body of Knowledge  : The SLE Body of Knowledge (SLEBoK) is a community-wide effort to provide a unique and comprehensive description of the concepts, best practices, tools, and methods developed by the SLE community. In this respect, the SLE conference will accept surveys, essays, open challenges, empirical observations, and case study papers on the SLE topics. These can focus on, but are not limited to, methods, techniques, best practices, and teaching approaches. Papers in this category can have up to 20 pages, including bibliography/appendices. 
  Tool papers  : These papers focus on the tooling aspects often forgotten or neglected in research papers. A good tool paper focuses on practical insights that will likely be useful to other implementers or users in the future. Any of the SLE topics of interest are appropriate areas for tool demonstrations. Submissions must not exceed 5 pages and may optionally include 1 further page of bibliography/appendices. They may optionally include an appendix with a demo outline/screenshots and/or a short video/screencast illustrating the tool. 
  Workshops  : Workshops will be organized by SPLASH. Please inform us and contact the SPLASH organizers if you would like to organize a workshop of interest to the SLE audience. Information on how to submit workshops can be found on the SPLASH 2023 Website.  
 Submission   
 Two submission rounds   
 For the second time, SLE will follow a two-phase submission and review process. This gives authors submitting to the first round an extra opportunity to improve their work (if needed) based on the comments and feedback from the reviewers. Furthermore, this will increase the quality of accepted papers.  
 Manuscripts can be submitted to any of the two submission rounds.  
 Decisions on the papers submitted to the first round  will be: accept, reject, or re-submit revised version. While rejected papers must not, revised versions may be submitted to the second round, with an accompanying response letter to the reviewers stating the changes made and how the authors addressed the reviewers’ criticisms. The same reviewers will review the re-submissions.  
 Decisions on fresh papers submitted to the second round  will be: accept or reject. The authors of borderline papers will have the chance to respond to the reviewers before the final decision is made.  
 Format   
 Submissions have to use the ACM SIGPLAN Conference Format “acmart”  ; please make sure that you always use the latest ACM SIGPLAN acmart LaTeX template  , and that the document class definition is \documentclass[sigplan,anonymous,review]{acmart}  . Do not make any changes to this format!  
 Ensure that your submission is legible when printed on a black and white printer. In particular, please check that colors remain distinct and font sizes in figures and tables are legible.  
 To increase fairness in reviewing, a double-blind review process has become standard across SIGPLAN conferences. In this line, SLE will follow the double-blind process. Author names and institutions should be omitted from submitted papers, and references to the authors’ own related work should be in the third person. No other changes are necessary, and authors will not be penalized if reviewers are able to infer their identities in implicit ways.  
 Concurrent Submissions   
 Authors conducting research involving human participants and subjects must ensure that their research comply with their local governing laws and regulations and the ACM’s general principles as stated in the ACM’s Publications Policy on Research Involving Human Participants and Subjects  . Submissions that violate this policy will be rejected.  
 Reviewing Process   
 All submitted papers will be reviewed by at least three members of the program committee. Research papers and tool papers will be evaluated concerning novelty, correctness, significance, readability, and alignment with the conference call. New ideas/vision papers will be evaluated primarily concerning novelty, significance, readability, and alignment with the conference call. SLEBoK papers will be reviewed on their significance, readability, topicality and capacity of presenting/evaluating/demonstrating a piece of BoK about SLE.  
 For fairness reasons, all submitted papers must conform to the above instructions. Submissions that violate these instructions may be rejected without review at the discretion of the PC chairs.  
 Awards   
 Distinguished paper | : Award for the most notable paper, as determined by the PC chairs based on the recommendations of the program committee. 
  Publication   
 All accepted papers will be published in the ACM Digital Library.  
 AUTHORS TAKE NOTE  : The official publication date is the date the proceedings are made available in the ACM Digital Library. This date may be up to two weeks prior to the first day of the conference. The official publication date affects the deadline for any patent filings related to published work.  
 SLE and Doctoral Students   
 SLE encourages students to submit to the SPLASH doctoral symposium. Authors of accepted papers will also have the chance to present their work to the SLE audience.  
 Contact   
 For additional information, clarification, or answers, please get in touch with the program co-chairs (E.Scott at  rhul.ac.uk and thomas.degueule at  labri.fr).  
 Questions? Use the SLE contact form  .    
 Publication links   
 Important Dates   AoE (UTC-12h)     
 Fri 1 Sep 2023  
  Authors Notification (Round 2) 
 Thu 24 Aug - Mon 28 Aug 2023  
  Authors Response Period (Round 2) 
 Fri 7 Jul 2023   
  Paper Submission (Round 2) 
 Mon 3 Jul 2023  
  Abstract Submission (Round 2) 
 Fri 5 May 2023  
  Authors Notification (Round 1) 
 Fri 7 Apr 2023   
  Paper Submission (Round 1) 
 Fri 31 Mar 2023  
  Abstract Submission (Round 1) 
 Submission Link   
  SPLASH 2023   
   Support page    
  Sponsored Talks    
 Co-hosted Conferences  
 DLS 2023   
  GPCE 2023   
  LOPSTR 2023   
  MPLR 2023   
  PPDP 2023   
  SAS 2023   
  SLE 2023   
  Workshops  
 CONFLANG 2023   
  FTSCS 2023   
  HATRA 2023   
  IWACO 2023   
  LIVE 2023   
  PAINT 2023   
  PLF 2023   
  REBLS 2023   
  ST30   
  VMIL 2023    
 Attending
5. SLE_1 conference:
SLE 2024 
  SLE 2023 
  SLE 2022 
  Sign up 
 SLE  
 All Editions   
 The ACM SIGPLAN International Conference on Software Language Engineering (SLE) is devoted to the principles of software languages: their design, their implementation, and their evolution. With the ubiquity of computers, software has become the dominating intellectual asset of our time. In turn, this software depends on software languages, namely the languages it is written in, the languages used to describe its ... 
 Sun 20 - Fri 25 October 2024 Pasadena, California, United States  SLE 2024  with SPLASH 2024    
 The ACM SIGPLAN International Conference on Software Language Engineering (SLE) is devoted to the principles of software languages: their design, their implementation, and their evolution. With the ubiquity of computers, software has become the dominating intellectual asset of our time. In turn, this software depends on software languages, namely the languages it is written in, the languages used to describe its ... 
 Sun 22 - Fri 27 October 2023 Cascais, Portugal  SLE 2023  with SPLASH 2023    
 The ACM SIGPLAN International Conference on Software Language Engineering (SLE) is devoted to the principles of software languages: their design, their implementation, and their evolution. With the ubiquity of computers, software has become the dominating intellectual asset of our time. In turn, this software depends on software languages, namely the languages it is written in, the languages used to describe its ... 
 Mon 5 - Sat 10 December 2022 Auckland, New Zealand  SLE 2022  with SPLASH 2022    
 No description available 
 The ACM SIGPLAN International Conference on Software Language Engineering (SLE) is devoted to the principles of software languages: their design, their implementation, and their evolution. With the ubiquity of computers, software has become the dominating intellectual asset of our time. In turn, this software depends on software languages, namely the languages it is written in, the languages used to describe its ... 
 The ACM SIGPLAN International Conference on Software Language Engineering (SLE) is devoted to the principles of software languages: their design, their implementation, and their evolution. With the ubiquity of computers, software has become the dominating intellectual asset of our time. In turn, this software depends on software languages, namely the languages it is written in, the languages used to describe its ... 
 The ACM SIGPLAN International Conference on Software Language Engineering (SLE) is devoted to the principles of software languages: their design, their implementation, and their evolution. With the ubiquity of computers, software has become the dominating intellectual asset of our time. In turn, this software depends on software languages, namely the languages it is written in, the languages used to describe its ... 
 The ACM SIGPLAN International Conference on Software Language Engineering (SLE) is devoted to the principles of software languages: their design, their implementation, and their evolution. With the ubiquity of computers, software has become the dominating intellectual asset of our time. In turn, this software depends on software languages, namely the languages it is written in, the languages used to describe its ... 
 Software Language Engineering (SLE) is the application of systematic, disciplined, and measurable approaches to the development, use, deployment, and maintenance of software languages. The term “software language” is used broadly, and includes: general-purpose programming languages; domain-specific languages (e.g. BPMN, Simulink, Modelica); modeling and metamodeling languages (e.g. SysML and UML); data models and ... 
 Software Language Engineering (SLE) is the application of systematic, disciplined, and measurable approaches to the development, use, deployment, and maintenance of software languages. The term “software language” is used broadly, and includes: general-purpose programming languages; domain-specific languages (e.g. BPMN, Simulink, Modelica); modeling and metamodeling languages (e.g. SysML and UML); data models and ... 
 Software Language Engineering (SLE) is the application of systematic, disciplined, and measurable approaches to the development, use, deployment, and maintenance of software languages. The term “software language” is used broadly, and includes: general-purpose programming languages; domain-specific languages (e.g. BPMN, Simulink, Modelica); modeling and metamodeling languages (e.g. SysML and UML); data models and ... 
 The 6th International Conference on Software Language Engineering (SLE) is devoted to topics related to artificial languages in software engineering. SLE’s mission is to encourage and organize communication among communities that have traditionally looked at software languages from different and yet complementary perspectives. Of particular relevance to SLE are technologies, methods, experiments, and case studies ...
6. SLE_2 conference:
SLE 2023: Proceedings of the 16th ACM SIGPLAN International Conference on Software Language Engineering  
  Full Citation in the ACM Digital Library    
 SESSION: Papers  
 Walter Cazzola 
  Luca Favalli 
  The introduction of better abstractions is at the forefront of research and practice. Among many approaches, domain-specific languages are subject to an increase in popularity due to the need for easier, faster and more reliable application development that involves programmers and domain experts alike. To smooth the adoption of such a language-driven development process, researchers must create new engineering techniques for the development of programming languages and their ecosystems. Traditionally, programming languages are implemented from scratch and in a monolithic way. Conversely, modular and reusable language development solutions would improve maintainability, reusability and extensibility. Many programming languages share similarities that can be leveraged to reuse the same language feature implementations across several programming languages; recent language workbenches strive to achieve this goal by solving the language composition and language extension problems. Yet, some features are inherently complex and affect the behavior of several language features. Most notably, the exception handling mechanism involves varied aspects, such as the memory layout, variables, their scope, up to the execution of each statement that may cause an exceptional event— e.g.  , a division by zero. In this paper, we propose an approach to untangle the exception handling mechanism dubbed the exception handling layer  : its components are modular and fully independent from one another, as well as from other language features. The exception handling layer is language-independent, customizable with regards to the memory layout and supports unconventional exception handling language features. To avoid any assumptions with regards to the host language, the exception handling layer is a stand-alone framework, decoupled from the exception handling mechanism offered by the back-end. Then, we present a full-fledged, generic Java implementation of the exception handling layer. The applicability of this approach is presented through a language evolution scenario based on a Neverlang implementation of JavaScript and LogLang, that we extend with conventional and unconventional exception handling language features using the exception handling layer, with limited impact on their original implementation.  
 An Executable Semantics for Faster Development of Optimizing Python Compilers   
  Gunter Mussbacher 
  L. Thomas van Binsbergen 
  Software systems evolve more and more in complex and changing environments, often requiring runtime adaptation to best deliver their services. When self-adaptation is the main concern of the system, a manual implementation of the underlying feedback loop and trade-off analysis may be desirable. However, the required expertise and substantial development effort make such implementations prohibitively difficult when it is only a secondary concern for the given domain. In this paper, we present ASOS, a metalanguage abstracting the runtime adaptation concern of a given domain in the behavioral semantics of a domain-specific language (DSL), freeing the language user from implementing it from scratch for each system in the domain. We demonstrate our approach on RobLANG, a procedural DSL for robotics, where we abstract a recurrent energy-saving behavior depending on the context. We provide formal semantics for ASOS and pave the way for checking properties such as determinism, completeness, and termination of the resulting self-adaptable language. We provide first results on the performance of our approach compared to a manual implementation of this self-adaptable behavior. We demonstrate, for RobLANG, that our approach provides suitable abstractions for specifying sound adaptive operational semantics while being more efficient.  
 A Reference GLL Implementation   
 Adrian Johnstone 
 This paper presents a reference GLL implementation shorn of all optimisations as a common baseline for the real-world comparison of performance across GLL variants. This baseline version has particular value for non-specialists, since its simple form may be straightforwardly encoded in the implementer's preferred programming language.  
 We also describe our approach to low level memory management of GLL internal data structures. Our evaluation on large inputs shows a factor 3--4 speedup over a naïve implementation using the standard Java APIs and a factor 4--5 reduction in heap requirements. We conclude with notes on some algorithm-level optimisations that may be applied independently of the internal data representation.  
 Sharing Trees and Contextual Information: Re-imagining Forwarding in Attribute Grammars   
  Bram Vandenbogaerde 
  Coen De Roover 
  Static analyses provide the foundation for several tools that help developers find problems before executing the program under analysis. Common applications include warning about unused code, deprecated API calls, or about potential security vulnerabilities within an IDE. A static analysis distinguishes itself from a dynamic analysis in that it is supposed to terminate even if the program under analysis does not. In many cases it is also desired for the analysis to be sound  , meaning that its answers account for all possible program behavior. Unfortunately, analysis developers may make mistakes that violate these properties resulting in hard-to-find bugs in the analysis code itself. Finding these bugs can be a difficult task, especially since analysis developers have to reason about two separate code-bases: the analyzed code and the analysis implementation. The former is usually where the bug manifests itself, while the latter contains the faulty implementation. A recent survey has found that analysis developers prefer to reason about the analyzed program, indicating that debugging would be easier if debugging features such as (conditional) breakpoints and stepping were also available in the analyzed program. In this paper, we therefore propose cross-level  debugging for static analysis. This novel technique moves debugging features such as stepping and breakpoints to the base-layer (i.e., analyzed program), while still making interactions with the meta-layer (i.e., analysis implementation) possible. To this end, we introduce novel conditional breakpoints that express conditions, which we call meta-predicates  , about the current analysis’ state. We integrated this debugging technique in a framework for implementing modular abstract interpretation-based static analyses called MAF. Through a detailed case study on 4 real-world bugs taken from the repository of MAF, we demonstrate how cross-level debugging helps analysis developers in locating and solving bugs.  
 Cascade: A Meta-language for Change, Cause and Effect   
 Nico Jansen 
  Bernhard Rumpe 
  In Software Language Engineering, the composition of heterogeneous languages has become an increasingly relevant research area in recent years. Despite considerable advances in different composition techniques, they mainly focus on composing concrete and abstract syntax, while a thorough yet general concept for synchronizing code generators and their produced artifacts is still missing. Current solutions are either highly generic, typically increasing the complexity beyond their actual value, or strictly limited to specific applications. In this paper, we present a concept for lightweight generator composition, using the symbol tables of heterogeneous modeling languages to exchange generator-specific accessor and mutator information. The information is attached to the symbols of model elements via templates allowing code generators to communicate access routines at the code level without a further contract. Providing suitable synchronization techniques for code generation is essential to enable language composition in all aspects.  
 Enabling Blended Modelling of Timing and Variability in EAST-ADL   
  Dimitris Kolovos 
  Konstantinos Barmpis 
  Model comparison is a prerequisite task for several other model management tasks such as model merging, model differencing etc. We present a novel approach to efficiently compare models using programs written in a rule-based model comparison language. As the comparison is done at the model element level, and each element needs to be traversed and compared with its corresponding elements, the execution of these comparison algorithms can be computationally expensive for larger models. In this paper, we present an efficient comparison approach which provides an automated rewriting facility to compare (both homogeneous and heterogeneous) models, based on static program analysis. Using this analysis, we reduce the search space by pre-filtering/indexing model elements, before actually comparing them. Moreover, we reorder the comparison match rules according to the dependencies between these rules to reduce the cost of jumping between rules. Our experiments demonstrate that the proposed model comparison approach delivers significant performance benefits in terms of execution time compared to the default ECL execution engine.  
 Deriving Integrated Multi-Viewpoint Modeling Languages from Heterogeneous Modeling Languages: An Experience Report   
  Florian Rademacher 
  Bernhard Rumpe 
  In modern systems engineering, domain experts increasingly utilize models to define domain-specific viewpoints in a highly interdisciplinary context. Despite considerable advances in developing model composition techniques, their integration in a largely heterogeneous language landscape still poses a challenge. Until now, composition in practice mainly focuses on developing foundational language components or applying language composition in smaller scenarios, while the application to extensive, heterogeneous languages is still missing. In this paper, we report on our experiences of composing sophisticated modeling languages using different techniques simultaneously in the context of heterogeneous application areas such as assistive systems and cyber-physical systems in the Internet of Things. We apply state-of-the-art practices, show their realization, and discuss which techniques are suitable for particular modeling scenarios. Pushing model composition to the next level by integrating complex, heterogeneous languages is essential for establishing modeling languages for highly interdisciplinary development teams.  
 A Low-Code Platform for Systematic Component-Oriented Language Composition   
 Jérôme Pfeiffer 
  Andreas Wortmann 
  Low-code platforms have gained popularity for accelerating complex software engineering tasks through visual interfaces and pre-built components. Software language engineering, specifically language composition, is such a complex task requiring expertise in composition mechanisms and language workbenches multi-dimensional language constituents (syntax and semantics). This paper presents an extensible low-code platform with a graphical web-based interface for language composition. It enables composition using language components, facilitating systematic composition within language families promoting reuse and streamlining the management, composition, and derivation of domain-specific languages.  
 A Tool for the Definition and Deployment of Platform-Independent Bots on Open Source Projects   
  Javier Luis Cánovas Izquierdo 
  Jordi Cabot 
  The development of Open Source Software (OSS) projects is a collaborative process that heavily relies on active contributions by passionate developers. Creating, retaining and nurturing an active community of developers is a challenging task; and finding the appropriate expertise to drive the development process is not always easy. To alleviate this situation, many OSS projects try to use bots to automate some development tasks, thus helping community developers to cope with the daily workload of their projects. However, the techniques and support for developing bots is specific to the code hosting platform where the project is being developed (e.g., GitHub or GitLab). Furthermore, there is no support for orchestrating bots deployed in different platforms nor for building bots that go beyond pure development activities. In this paper, we propose a tool to define and deploy bots for OSS projects, which besides automation tasks they offer a more social facet, improving community interactions. The tool includes a Domain-Specific Language (DSL) which allows defining bots that can be deployed on top of several platforms and that can be triggered by different events (e.g., creation of a new issue or a pull request). We describe the design and the implementation of the tool, and illustrate its use with examples.  
 Online Name-Based Navigation for Software Meta-languages   
 Peter D. Mosses 
  Software language design and implementation often involve specifications written in various esoteric meta-languages. Language workbenches generally include support for precise name-based navigation when browsing language specifications locally  , but such support is lacking when browsing the same specifications online  in code repositories.  
 This paper presents a technique to support precise name-based navigation of language specifications in online repositories using ordinary web browsers. The idea is to generate hyperlinked twins  : websites where verbatim copies  of specification text are enhanced with hyperlinks between name references and declarations. By generating hyperlinks directly from the name binding analysis used internally in a language workbench, online navigation in hyperlinked twins is automatically consistent with local navigation.  
 The presented technique has been implemented for the Spoofax language workbench, and used to generate hyperlinked twin websites from various language specifications in Spoofax meta-languages. However, the applicability of the technique is not limited to Spoofax, and developers of other language workbenches could presumably implement similar tooling, to make their language specifications more accessible to those who do not have the workbench installed.  
  Benoît Lelandais 
  Marie-Pierre Oudot 
  Software languages have pros and cons, and are usually chosen accordingly. In this context, it is common to involve different languages in the development of complex systems, each one specifically tailored for a given concern. However, these languages create de facto silos, and offer little support for interoperability with other languages, be it statically or at runtime. In this paper, we report on our experiment on extracting a relevant behavioral interface from an existing language, and using it to enable interoperability at runtime. In particular, we present a systematic approach to define the behavioral interface and we discuss the expertise required to define it. We illustrate our work on the case study of SciHook, a C++ library enabling the runtime instrumentation of scientific software in Python. We present how the proposed approach, combined with SciHook, enables interoperability between Python and a domain-specific language dedicated to numerical analysis, namely NabLab, and discuss overhead at runtime.
7. SLE_3 conference:
Membership 
 International Conference on Software Language Engineering (SLE)  
  SLE  ’s mission is to fuse several communities that have traditionally looked at software languages from different and yet complementary perspectives: programming languages, model driven engineering, domain specific languages, semantic web, and from different technological spaces: context-free grammars, object-oriented modeling frameworks rich data, structured data, object-oriented programming, functional programming, logic programming, term-rewriting, attribute grammars algebraic specification, etc.  
 Web Pages of Previous Conferences
8. SMC_1 conference:
Main Navigation  
 IEEE SMC 2023  
 International Conference on Systems, Man, and Cybernetics  
 October 1-4  
 Oahu, Hawaii  
 The 2023 IEEE International Conference on Systems, Man, and Cybernetics (SMC 2023) is the flagship conference of the IEEE Systems,  
  Man, and Cybernetics Society. It provides an international forum for researchers, educators, and practitioners to learn, share knowledge, report  
  most recent innovations and developments, and exchange ideas and advances in all aspects of systems science and engineering, human-  
  machine systems, and cybernetics. The theme of the SMC 2023 conference is “Improving the Quality of Life”.  
 General Chairs
9. SMC_2 conference:
This event has passed. 
 IEEE SMC 2023  
 October 1, 2023  - October 4, 2023   
 «  IEEE CASE 2023 
  Smart City Expo World Congress » 
 The IEEE International Conference on Systems, Man, and Cybernetics (SMC) is the flagship conference of the IEEE SMC Society.   
 Taking place from 1 to 4 October at the Hyatt Regency Maui Resort and Spa in Maui, Hawaii, this year’s theme is  Improving the Quality of Life   . The conference aims to provide a dynamic platform for researchers, educators, and practitioners to exchange knowledge, present innovations, and discuss advancements in systems science and engineering, human-machine systems, and cybernetics.   
 Apart from technical sessions, SMC 2023 will feature keynote addresses, tutorials, workshops, panel discussions, forums, exhibits, and receptions to foster valuable interactions among attendees.   
 Find out more details about the programme and speakers at the following link   
 «  IEEE CASE 2023 
  Smart City Expo World Congress »
10. SMC_3 conference:
Search   Search    
           Join SMC    
 Main Navigation  
  Brand Materials 
  Membership 
  Conferences | Obtaining SMC Conference Sponsorship 
  Calendar 
  Publications | eNewsletter 
  IEEE Access: IEEE Systems, Man, and Cybernetics Society Section 
  IEEE Systems, Man, and Cybernetics Letters (SMC-L) 
  SMC Magazine 
  Transactions on SMC: Systems 
  Transactions on Human-Machine Systems 
  Transactions on Cybernetics 
  Student Activities 
  Young Professionals 
  SMC Women in Engineering 
  Equity, Diversity, and Inclusion 
  Information for Authors 
 Conferences  
 Each year, the SMC Society sponsors its flagship event, the IEEE International Conference on Systems, Man, and Cybernetics  .  
 The Society is also a financial co-sponsor  or a technical co-sponsor  for a number of conferences each year.  
 Instructions on obtaining SMC Society sponsorship of your conference  are also available.  
 Steps for conference organizers to apply SMCS Technical Co-Sponsorship.   
 IEEE SMC 2024 Malaysia   
 Past Conferences   
  Book Announcement: Learning and Robust Control in Quantum Technology  October 23, 2023 
 See More from IEEE Spectrum    
 The SMC Society Mission  
   The mission of the Systems, Man, and Cybernetics Society is to serve the interests of its members and the community at large by promoting the theory, practice, and interdisciplinary aspects of systems science and engineering  , human-machine systems  , and cybernetics  . It is accomplished through conferences, publications, and other activities that contribute to the professional needs of its members.

output:1. SISY_0 information:
2. SISY_2 information:
3. SISY_3 information:
4. SLE_0 information:
5. SLE_1 information:
6. SLE_2 information:
7. SLE_3 information:
8. SMC_1 information:
9. SMC_2 information:
10. SMC_3 information:
