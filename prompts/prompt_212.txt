input:
1. MPC_3 conference:
Request account    
 MPC - Mathematics of Program Construction  
 From ConfIDent   
 Jump to: navigation  , search    
 Event Series    
 Acronym   
 MPC   
 Title   
 Related Identifiers   
 DBLP Series ID   
 mpc     
 Wikidata Series ID
2. MPLR_0 conference:
SPLASH 2023   Sun 22 - Fri 27 October 2023 Cascais, Portugal    
 Toggle navigation        
  Program | SPLASH Program 
  Your Program 
   Sun 22 Oct 
  Mon 23 Oct 
  Tue 24 Oct 
  Wed 25 Oct 
  Thu 26 Oct 
  Fri 27 Oct 
  Tracks | SPLASH 2023 
  Awards 
  OOPSLA 
  GPCE 
  LOPSTR 
  MPLR 
  PPDP 
  SAS | SAS 
  ST30 
  VMIL 
  Organization | SPLASH 2023 Committees 
  Organizing Committee 
  Steering Committee 
  Program Committee 
  LOPSTR | N/A - check homepage 
  MPLR | Organizing Committee 
  Program Committee 
  PPDP | N/A - check homepage 
  SAS | Invited Speakers 
  Organizing Committee 
  SAS 2023 
  SAS 2023 Artifacts 
  SLE | Organizing Committee 
  Program Committee 
  SPLASH 2024 
  SPLASH 2023 
  SPLASH 2022 
  Sign up 
  SPLASH 2023  ( series  ) /  MPLR 2023 ( series  ) /  MPLR 2023  
 About 
  Accepted Papers 
  Call for Papers 
  The 20th International Conference on Managed Programming Languages & Runtimes (MPLR’23, formerly ManLang, originally PPPJ) is a premier forum for presenting and discussing novel results in all aspects of managed programming languages and runtime systems, which serve as building blocks for some of the most important computing systems around, ranging from small-scale (embedded and real-time systems) to large-scale (cloud-computing and big-data platforms) and anything in between (mobile, IoT, and wearable applications).  
 Papers accepted by MPLR’23 describe original research results and have not been published anywhere else. Each submitted paper has received a minimum of three reviews by members of the program committee. Papers have been selected based on their originality, relevance, technical clarity, and quality of presentation. At least one author of each accepted paper must register for the MPLR’23 symposium and present the paper.  
 Dates    
   The GMT offsets shown reflect the offsets at the moment of the conference  .     
 Time Band   
 ×    You're viewing the program in a time zone which is different from your device's time zone change time zone     
 Sun 22 Oct   
 Displayed time zone: Lisbon  change      
 5m    
 Day opening | Welcome from the Chairs   MPLR   
 Rodrigo Bruno  INESC-ID - IST-ULisboa  , Eliot Moss  University of Massachusetts at Amherst 
 Keynote | Is Wasm Becoming Garbage? (Keynote)   MPLR   
 K:  Andreas Rossberg  Independent    
  DOI 
 15m    
 Talk | On the Applicability of Annotation-Based Source Code Modification in Kotlin (Work in Progress)   MPLR   
 Daniel Pfeffer  JKU Linz  , Markus Weninger  JKU Linz    
  DOI 
 15m    
 Talk | CloudJIT: A Just-in-Time FaaS Optimizer (Work in Progress)   MPLR   
 Serhii Ivanenko  INESC-ID; IST-ULisboa  , Rodrigo Bruno  INESC-ID - IST-ULisboa  , Jovan Stevanovic  Oracle Labs  , Luís Veiga  INESC-ID; IST-ULisboa  , Vojin Jovanovic  Oracle Labs    
  DOI 
 22m    
 Talk | Evaluating YJIT’s Performance in a Production Context: A Pragmatic Approach   MPLR   
 Maxime Chevalier-Boisvert  Shopify  , Takashi Kokubun  Shopify  , Noah Gibbs  Shopify  , Si Xing "Alan" Wu  Shopify  , Aaron Patterson  Shopify  , Jemma Issroff  Shopify    
  DOI 
 22m    
 Talk | CacheIR: The Benefits of a Structured Representation for Inline Caches   MPLR   
 Jan de Mooij  Mozilla  , Matthew Gaudet  Mozilla  , Iain Ireland  Mozilla  , Nathan Henderson  University of Alberta  , Jose Nelson Amaral  University of Alberta    
  DOI   File Attached 
 22m    
 Talk | Diagnosing Compiler Performance by Comparing Optimization Decisions   MPLR   
 Andrej Pečimúth  Oracle Labs; Charles University  , David Leopoldseder  Oracle Labs  , Petr Tuma  Charles University    
  DOI 
 22m    
 Talk | Morello MicroPython: A Python Interpreter for CHERI   MPLR   
 Duncan Lowther  University of Glasgow  , Dejice Jacob  University of Glasgow  , Jeremy Singer  University of Glasgow    
  DOI   Pre-print 
 22m    
 Talk | A Multifaceted Memory Analysis of Java Benchmarks   MPLR   
 Orion Papadakis  University of Manchester  , Andreas Andronikakis  University of Manchester  , Nikos Foutris  University of Manchester  , Michail Papadimitriou  University of Manchester  , Athanasios Stratikopoulos  University of Manchester  , Foivos S. Zakkak  Red Hat  , Polychronis Xekalakis  Nvidia  , Christos Kotselidis  University of Manchester    
  DOI 
 22m    
 Talk | Improving Garbage Collection Observability with Performance Tracing   MPLR   
 Claire Huang  Australian National University  , Stephen M. Blackburn  Google; Australian National University  , Zixian Cai  Australian National University    
  DOI   Pre-print   Media Attached 
 22m    
 Talk | Don’t Trust Your Profiler: An Empirical Study on the Precision and Accuracy of Java Profilers   MPLR   
 Humphrey Burchell  University of Kent  , Octave Larose  University of Kent  , Sophie Kaleba  University of Kent  , Stefan Marr  University of Kent    
  DOI   Pre-print 
 22m    
 Talk | Heap Size Adjustment with CPU Control   MPLR   
 Sanaz Tavakolisomeh  University of Oslo  , Marina Shimchenko  Uppsala University  , Erik Österlund  Oracle  , Rodrigo Bruno  INESC-ID - IST-ULisboa  , Paulo Ferreira  University of Oslo  , Tobias Wrigstad  Uppsala University    
  DOI 
 22m    
 Talk | Comparing Rapid Type Analysis with Points-To Analysis in GraalVM Native Image   MPLR   
 David Kozak  Brno University of Technology  , Vojin Jovanovic  Oracle Labs  , Codrut Stancu  Oracle Labs  , Tomáš Vojnar  Brno University of Technology  , Christian Wimmer  Oracle Labs    
  DOI 
 23m    
 Talk | Unified Shared Memory: Friend or Foe? Understanding the Implications of Unified Memory on Managed Heaps   MPLR   
 Juan Fumero  University of Manchester  , Florin Blanaru  Axelera AI  , Athanasios Stratikopoulos  University of Manchester  , Steve Dohrmann  Intel  , Sandhya Viswanathan  Intel  , Christos Kotselidis  University of Manchester    
  DOI   Pre-print 
 15m    
 Talk | Beyond RSS: Towards Intelligent Dynamic Memory Management (Work in Progress)   MPLR   
 Christos Lamprakos  National Technical University of Athens; KU Leuven  , Sotirios Xydis  National Technical University of Athens  , Peter Kourzanov  IMEC  , Manu Perumkunnil  IMEC  , Francky Catthoor  IMEC; KU Leuven  , Dimitrios Soudris  National Technical University of Athens    
  DOI 
 15m    
 Talk | Towards Safe HPC: Productivity and Performance via Rust Interfaces for a Distributed C++ Actors Library (Work in Progress)   MPLR   
 John Parrish  Georgia Institute of Technology  , Nicole Wren  Block; Georgia Institute of Technology  , Tsz Hang Kiang  Georgia Institute of Technology  , Akihiro Hayashi  Georgia Institute of Technology  , Jeffrey Young  Georgia Institute of Technology  , Vivek Sarkar  Georgia Institute of Technology    
  DOI 
 15m    
 Talk | Generating Java Interfaces for Accessing Foreign Objects in GraalVM (Work in Progress)   MPLR   
 Julian Garn  JKU Linz  , Florian Angerer  Oracle Labs  , Hanspeter Mössenböck  JKU Linz    
  DOI 
  MPLR posters will be presented during the SPLASH poster sessions, Sunday 22 October 5:30PM - 7:30PM and Tuesday 24 October 5:30PM - 7:30PM. 
 Talk | CloudJIT: A Just-in-Time FaaS Optimizer (Poster Abstract)   MPLR   
 Serhii Ivanenko  INESC-ID; IST-ULisboa  , Rodrigo Bruno  INESC-ID - IST-ULisboa  , Jovan Stevanovic  Oracle Labs  , Luís Veiga  INESC-ID; IST-ULisboa  , Vojin Jovanovic  Oracle Labs    
  DOI 
 Talk | Don’t Trust Your Profiler: An Empirical Study on the Precision and Accuracy of Java Profilers (Poster Abstract)   MPLR   
 Humphrey Burchell  University of Kent  , Octave Larose  University of Kent  , Sophie Kaleba  University of Kent  , Stefan Marr  University of Kent    
  DOI 
 Talk | Diagnosing Compiler Performance by Comparing Optimization Decisions (Poster Abstract)   MPLR   
 Andrej Pečimúth  Oracle Labs; Charles University  , David Leopoldseder  Oracle Labs  , Petr Tuma  Charles University    
  DOI 
 Unscheduled Events  
 Not scheduled | Title Page   MPLR   
 Team at Conference Publishing Consulting 
 Accepted Papers  
 Title 
 A Multifaceted Memory Analysis of Java Benchmarks  MPLR   
 Orion Papadakis  , Andreas Andronikakis  , Nikos Foutris  , Michail Papadimitriou  , Athanasios Stratikopoulos  , Foivos S. Zakkak  , Polychronis Xekalakis  , Christos Kotselidis    
  DOI 
 Beyond RSS: Towards Intelligent Dynamic Memory Management (Work in Progress)  MPLR   
 Christos Lamprakos  , Sotirios Xydis  , Peter Kourzanov  , Manu Perumkunnil  , Francky Catthoor  , Dimitrios Soudris    
  DOI 
 CacheIR: The Benefits of a Structured Representation for Inline Caches  MPLR   
 Jan de Mooij  , Matthew Gaudet  , Iain Ireland  , Nathan Henderson  , Jose Nelson Amaral    
  DOI   File Attached 
 CloudJIT: A Just-in-Time FaaS Optimizer (Poster Abstract)  MPLR   
 Serhii Ivanenko  , Rodrigo Bruno  , Jovan Stevanovic  , Luís Veiga  , Vojin Jovanovic    
  DOI 
 CloudJIT: A Just-in-Time FaaS Optimizer (Work in Progress)  MPLR   
 Serhii Ivanenko  , Rodrigo Bruno  , Jovan Stevanovic  , Luís Veiga  , Vojin Jovanovic    
  DOI 
 Comparing Rapid Type Analysis with Points-To Analysis in GraalVM Native Image  MPLR   
 David Kozak  , Vojin Jovanovic  , Codrut Stancu  , Tomáš Vojnar  , Christian Wimmer    
  DOI 
 Diagnosing Compiler Performance by Comparing Optimization Decisions  MPLR   
 Andrej Pečimúth  , David Leopoldseder  , Petr Tuma    
  DOI 
 Diagnosing Compiler Performance by Comparing Optimization Decisions (Poster Abstract)  MPLR   
 Andrej Pečimúth  , David Leopoldseder  , Petr Tuma    
  DOI 
 Don’t Trust Your Profiler: An Empirical Study on the Precision and Accuracy of Java Profilers  MPLR   
 Humphrey Burchell  , Octave Larose  , Sophie Kaleba  , Stefan Marr    
  DOI   Pre-print 
 Don’t Trust Your Profiler: An Empirical Study on the Precision and Accuracy of Java Profilers (Poster Abstract)  MPLR   
 Humphrey Burchell  , Octave Larose  , Sophie Kaleba  , Stefan Marr    
  DOI 
 Evaluating YJIT’s Performance in a Production Context: A Pragmatic Approach  MPLR   
 Maxime Chevalier-Boisvert  , Takashi Kokubun  , Noah Gibbs  , Si Xing "Alan" Wu  , Aaron Patterson  , Jemma Issroff    
  DOI 
 Generating Java Interfaces for Accessing Foreign Objects in GraalVM (Work in Progress)  MPLR   
 Julian Garn  , Florian Angerer  , Hanspeter Mössenböck    
  DOI 
 Heap Size Adjustment with CPU Control  MPLR   
 Sanaz Tavakolisomeh  , Marina Shimchenko  , Erik Österlund  , Rodrigo Bruno  , Paulo Ferreira  , Tobias Wrigstad    
  DOI 
 Improving Garbage Collection Observability with Performance Tracing  MPLR   
 Claire Huang  , Stephen M. Blackburn  , Zixian Cai    
  DOI   Pre-print   Media Attached 
 Morello MicroPython: A Python Interpreter for CHERI  MPLR   
 Duncan Lowther  , Dejice Jacob  , Jeremy Singer    
  DOI   Pre-print 
 On the Applicability of Annotation-Based Source Code Modification in Kotlin (Work in Progress)  MPLR   
 Daniel Pfeffer  , Markus Weninger    
  DOI 
 Towards Safe HPC: Productivity and Performance via Rust Interfaces for a Distributed C++ Actors Library (Work in Progress)  MPLR   
 John Parrish  , Nicole Wren  , Tsz Hang Kiang  , Akihiro Hayashi  , Jeffrey Young  , Vivek Sarkar    
  DOI 
 Unified Shared Memory: Friend or Foe? Understanding the Implications of Unified Memory on Managed Heaps  MPLR   
 Juan Fumero  , Florin Blanaru  , Athanasios Stratikopoulos  , Steve Dohrmann  , Sandhya Viswanathan  , Christos Kotselidis    
  DOI   Pre-print 
 Call for Papers  
 The 20th International Conference on Managed Programming Languages & Runtimes (MPLR, formerly ManLang, originally PPPJ) is a premier forum for presenting and discussing novel results in all aspects of managed programming languages and runtime systems, which serve as building blocks for some of the most important computing systems in use, ranging from small-scale (embedded and real-time systems) to large-scale (cloud-computing and big-data platforms) and anything in between (desktop, mobile, IoT, and wearable applications).  
 Topics   
 The areas of interest include but are not limited to:  
  Performance analysis and monitoring 
  Compiler and program verification and model checking 
  If you are unsure whether a particular topic falls within the scope of MPLR’22 or if you have any other questions, please do not hesitate to contact the Program Chair (moss at cs dot umass dot edu).  
 Submission Categories   
 MPLR accepts four types of submissions:  
 Regular research papers | , describing novel contributions involving managed language platforms. Research papers will be evaluated based on their relevance, novelty, technical rigor, and contribution to the state-of-the-art. (Format: up to 12 pages, excluding bibliography and appendix); 
  Work-in-progress research papers | , describing hot topics or promising new ideas, with perhaps less maturity than full papers. Work-in-progress papers will be evaluated with an emphasis on novelty and the potential of the new ideas instead of technical rigor and experimental results. (Format: up to 6 pages, excluding bibliography and appendix); 
  Accepted submissions will be published in the ACM Digital Library, except if the authors prefer not to be included.  
 Author Instructions   
 Submissions need to use the ACM SIGPLAN format with the sigplan  style.  
 All submissions need to be in PDF format. MPLR now uses double-blind reviewing  . Authors should not show their names on a submission and should refer to their own work in third person.  We further recommend that they avoid publicizing the work, at least under the same or similar title, while it is under review.  
 Please also ensure that your submission is legible when printed on a black and white printer. In particular, please check that colors remain distinct and font sizes are legible.  
 Important Dates   
 Paper Submission Deadline: 26 June 2023 | Extended to 29 June 2023 anywhere on Earth 
  Author response period: 25-27 July 2023 
  Paper Author Notification: 31 July 2023 
  Camera Ready for Papers: 1 September 2023 
  Posters and Demos Submission Deadline: 5 September 2023 
  Posters and Demos Notification: 12 September 2023 
  Conference Dates: 22 October 2023 
 AUTHORS TAKE NOTE: The official publication date is the date the proceedings are made available in the ACM Digital Library. This date may be up to two weeks prior to the first day of your conference. The official publication date affects the deadline for any patent filings related to published work.  
 Questions? Use the MPLR contact form  .    
 Important Dates   AoE (UTC-12h)     
 Sun 22 Oct 2023   
  Conference date 
 Tue 12 Sep 2023   
  Poster and Demo notification 
 Tue 5 Sep 2023   
  Poster and Demo submission deadline 
 Fri 1 Sep 2023  
  Camera ready copy 
 Mon 31 Jul 2023   
  Author notification 
 Thu 29 Jun 2023   
  Paper submission deadline 
 Submission Link   
  SPLASH 2023   
   Support page    
  Sponsored Talks    
 Co-hosted Conferences  
 DLS 2023   
  GPCE 2023   
  LOPSTR 2023   
  MPLR 2023   
  PPDP 2023   
  SAS 2023   
  SLE 2023   
  Workshops  
 CONFLANG 2023   
  FTSCS 2023   
  HATRA 2023   
  IWACO 2023   
  LIVE 2023   
  PAINT 2023   
  PLF 2023   
  REBLS 2023   
  ST30   
  VMIL 2023    
 Attending
3. MPLR_1 conference:
MPLR 2023: Proceedings of the 20th ACM SIGPLAN International Conference on Managed Programming Languages and Runtimes  
  Full Citation in the ACM Digital Library    
 SESSION: Session 1  
 Daniel Pfeffer 
  Markus Weninger 
  Annotations add metadata to source code entities such as classes or functions, which later can be processed by so-called annotation processors  to, for example, modify the annotated program’s source code. While annotation processing has been well-explored in Java, the Kotlin community still lacks a comprehensive summary. Thus, in this paper, we summarize the main approaches available in Kotlin: (1) ‍Compile-time annotation processing using (a) ‍Kotlin Annotation Processing Tool (KAPT), (b) ‍Kotlin Symbolic Processing (KSP), or (c) ‍writing a custom Kotlin Compiler plugin; as well as (2) ‍load-time code modification using an agent or a custom class loader. We provide proof-of-concept implementations, discuss advantages and disadvantages, and specifically focus on how well each approach supports modifying the annotated source code. This should help developers and researchers to better decide when to use which approach.  
 CloudJIT: A Just-in-Time FaaS Optimizer (Work in Progress)   
  Ruby is a dynamically-typed programming language with a large breadth of features which has grown in popularity with the rise of the modern web, and remains at the core of the implementation of widely-used online platforms such as Shopify, GitHub, Discourse, and Mastodon.  
 There have been many attempts to integrate JIT compilation into Ruby implementations, but until recently, despite impressive performance on benchmarks, none had seen widespread adoption. This has changed with the arrival of YJIT, a new JIT compiler based on a Lazy Basic Block Versioning (LBBV) architecture which has recently been upstreamed into CRuby, and has since seen multiple large-scale production deployments.  
 This paper extends on previous work on YJIT and takes a pragmatic approach towards evaluating YJIT's performance in a production context. We evaluate and compare its performance on benchmarks as well as a large-scale real-world production deployment, and we look not only at peak performance, but also at memory usage and warm-up time.  
 On all of our benchmarks, YJIT is able to consistently outperform the CRuby interpreter by a wide margin. It offers consistent speedups, full compatibility with existing Ruby code, much less memory overhead and faster warm-up compared to JRuby and TruffleRuby. We also show that YJIT is able to deliver significant speedups on a real-world deployment on Shopify's worldwide StoreFront Renderer infrastructure, an application for which it is currently the only viable JIT compiler.  
  Modern compilers apply a set of optimization passes aiming to speed up the generated code. The combined effect of individual optimizations is difficult to predict. Thus, changes to a compiler's code may hinder the performance of generated code as an unintended consequence.  
 Performance regressions in compiled code are often related to misapplied optimizations. The regressions are hard to investigate, considering the vast number of compilation units and applied optimizations. A compilation unit consists of a root method and inlined methods. Thus, a method may be part of several compilation units and may be optimized differently in each. Moreover, inlining decisions are not invariant across runs of the virtual machine (VM).  
 We propose to solve the problem of diagnosing performance regressions by capturing the compiler's optimization decisions. We do so by representing the applied optimization phases, optimization decisions, and inlining decisions in the form of trees. This paper introduces an approach utilizing tree edit distance (TED) to detect optimization differences in a semi-automated way. We present an approach to compare optimization decisions in differently inlined methods. We employ these techniques to pinpoint the causes of performance problems in various benchmarks of the Graal compiler.  
 Morello MicroPython: A Python Interpreter for CHERI   
  Dejice Jacob 
  Jeremy Singer 
  Arm Morello is a prototype system that supports CHERI hardware capabilities for improving runtime security. As Morello becomes more widely available, there is a growing effort to port open source code projects to this novel platform. Although high-level applications generally need minimal code refactoring for CHERI compatibility, low-level systems code bases require significant modification to comply with the stringent memory safety constraints that are dynamically enforced by Morello. In this paper, we describe our work on porting the MicroPython interpreter to Morello with the CheriBSD OS. Our key contribution is to present a set of generic lessons for adapting managed runtime execution environments to CHERI, including (1) a characterization of necessary source code changes, (2) an evaluation of runtime performance of the interpreter on Morello, and (3) a demonstration of pragmatic memory safety bug detection. Although MicroPython is a lightweight interpreter, mostly written in C, we believe that the changes we have implemented and the lessons we have learned are more widely applicable. To the best of our knowledge, this is the first published description of meaningful experience for scripting language runtime engineering with CHERI and Morello.  
 SESSION: Session 3  
  Christos Kotselidis 
  Java benchmarking suites like Dacapo and Renaissance are employed by the research community to evaluate the performance of novel features in managed runtime systems. These suites encompass various applications with diverse behaviors in order to stress test different subsystems of a managed runtime. Therefore, understanding and characterizing the behavior of these benchmarks is important when trying to interpret experimental results.  
 This paper presents an in-depth study of the memory behavior of 30 Dacapo and Renaissance applications. To realize the study, a characterization methodology based on a two-faceted profiling process of the Java applications is employed. The two-faceted profiling offers comprehensive insights into the memory behavior of Java applications, as it is composed of high-level and low-level metrics obtained through a Java object profiler (NUMAProfiler) and a microarchitectural event profiler (PerfUtil) of MaxineVM, respectively. By using this profiling methodology we classify the Dacapo and Renaissance applications regarding their intensity in object allocations, object accesses, LLC, and main memory pressure. In addition, several other aspects such as the JVM impact on the memory behavior of the application are discussed.  
 Improving Garbage Collection Observability with Performance Tracing   
  To identify optimisation opportunities, Java developers often use sampling profilers that attribute a percentage of run time to the methods of a program. Even so these profilers use sampling, are probabilistic in nature, and may suffer for instance from safepoint bias, they are normally considered to be relatively reliable. However, unreliable or inaccurate profiles may misdirect developers in their quest to resolve performance issues by not correctly identifying the program parts that would benefit most from optimisations.  
 With the wider adoption of profilers such as async-profiler and Honest Profiler, which are designed to avoid the safepoint bias, we wanted to investigate how precise and accurate Java sampling profilers are today. We investigate the precision, reliability, accuracy, and overhead of async-profiler, Honest Profiler, Java Flight Recorder, JProfiler, perf, and YourKit, which are all actively maintained. We assess them on the fully deterministic Are We Fast Yet benchmarks to have a stable foundation for the probabilistic profilers.  
 We find that profilers are relatively reliable over 30 runs and normally report the same hottest method. Unfortunately, this is not true for all benchmarks, which suggests their reliability may be application-specific. Different profilers also report different methods as hottest and cannot reliably agree on the set of top 5 hottest methods. On the positive side, the average run time overhead is in the range of 1% to 5.4% for the different profilers.  
 Future work should investigate how results can become more reliable, perhaps by reducing the observer effect of profilers by using optimisation decisions of unprofiled runs or by developing a principled approach of combining multiple profiles that explore different dynamic optimisations.  
  Paulo Ferreira 
  Tobias Wrigstad 
  This paper explores automatic heap sizing where developers let the frequency of GC expressed as a target overhead of the application's CPU utilisation, control the size of the heap, as opposed to the other way around. Given enough headroom and spare CPU, a concurrent garbage collector should be able to keep up with the application's allocation rate, and neither the frequency nor duration of GC should impact throughput and latency. Because of the inverse relationship between time spent performing garbage collection and the minimal size of the heap, this enables trading memory for computation and conversely, neutral to an application's performance.  
 We describe our proposal for automatically adjusting the size of a program's heap based on the CPU overhead of GC. We show how our idea can be relatively easily integrated into ZGC, a concurrent collector in OpenJDK, and study the impact of our approach on memory requirements, throughput, latency, and energy.  
  Sandhya Viswanathan 
  Christos Kotselidis 
  Adopting heterogeneous execution on GPUs and FPGAs in managed runtime systems, such as Java, is a challenging task due to the complexities of the underlying virtual machine. The majority of the current work has been focusing on compiler toolchains to solve the challenge of transparent just-in-time compilation of different code segments onto the accelerators. However, apart from providing automatic code generation, another paramount challenge is the seamless interoperability between the host memory manager and the Garbage Collector (GC). Currently, heterogeneous programming models that run on top of managed runtime systems, such as Aparapi and TornadoVM, need to block the GC when running native code (e.g, JNI code) in order to prevent the GC from moving data while the native code is still running on the hardware accelerator.  
 To tackle the inefficacy of locking the GC while the GPU operates, this paper proposes a novel Unified Memory (UM) memory allocator for heterogeneous programming frameworks for managed runtime systems. In this paper, we show how, by providing small changes to a Java runtime system, automatic memory management can be enhanced to perform object reclamation not only on the host, but also on the device. This is done by allocating the Java Virtual Machine's object heap in unified memory which is visible to all hardware accelerators. In this manner -although explicit data synchronization between the host and the device is still required to ensure data consistency- we enable transparent page migration of Java heap-allocated objects between the host and the accelerator, since our UM system is aware of pointers and object migration due to GC collections. This technique has been implemented in the context of MaxineVM, an open source research VM for Java written in Java. We evaluated our approach on a discrete and an integrated GPU, showcasing under which conditions UM can benefit execution across different benchmarks and configurations.We concluded that when hardware acceleration is not employed, UM does not pose significant overheads unless memory intensive workloads are encountered which can exhibit up to 12% (worst case) and 2% (average) slowdowns. In addition, if hardware acceleration is used, UM can achieve up to 9.3x speedup compared to the non-UM baseline implementation for integrated GPUs.  
 Beyond RSS: Towards Intelligent Dynamic Memory Management (Work in Progress)   
  Dimitrios Soudris 
  The main goal of dynamic memory allocators is to minimize memory fragmentation. Fragmentation stems from the interaction between workload behavior and allocator policy. There are, however, no works systematically capturing said interaction. We view this gap as responsible for the absence of a standardized, quantitative fragmentation metric, the lack of workload dynamic memory behavior characterization techniques, and the absence of a standardized benchmark suite targeting dynamic memory allocation. Such shortcomings are profoundly asymmetric to the operation’s ubiquity.  
 This paper presents a trace-based simulation methodology for constructing representations of workload-allocator interaction. We use two-dimensional rectangular bin packing (2DBP) as our foundation. 2DBP algorithms minimize their products’ makespan, but virtual memory systems employing demand paging deem such a criterion inappropriate. We see an allocator’s placement decisions as a solution to a 2DBP instance, optimizing some unknown criterion particular to that allocator’s policy. Our end product is a data structure by design concerned with events residing entirely in virtual memory; no information on memory accesses, indexing costs or any other factor is kept.  
  Jeffrey Young 
  Vivek Sarkar 
  In this work-in-progress research paper, we make the case for using Rust to develop applications in the High Performance Computing (HPC) domain which is critically dependent on native C/C++ libraries. This work explores one example of Safe HPC via the design of a Rust interface to an existing distributed C++ Actors library. This existing library has been shown to deliver high performance to C++ developers of irregular Partitioned Global Address Space (PGAS) applications.  
 Our key contribution is a proof-of-concept framework to express parallel programs safe-ly in Rust (and potentially other languages/systems), along with a corresponding study of the problems solved by our runtime, the implementation challenges faced, and user productivity. We also conducted an early evaluation of our approach by converting C++ actor implementations of four applications taken from the Bale kernels to Rust Actors using our framework. Our results show that the productivity benefits of our approach are significant since our Rust-based approach helped catch bugs statically during application development, without degrading performance relative to the original C++ actor versions.  
  Hanspeter Mössenböck 
  Language interoperability (e.g., calling Python methods from Java programs) is a critical challenge in software development, often leading to code inconsistencies, human errors, and reduced readability.  
 This paper presents a work-in-progress project aimed at addressing this issue by providing a tool that automates the generation of Java interfaces for accessing data and methods written in other languages.  
 Using existing code analysis techniques the tool aims to produce easy to use abstractions for interop, intended to reduce human error and to improve code clarity. Although the tool is not yet finished, it has already shown promising results. Initial evaluations demonstrate its ability to identify language-specific features and automatically generate equivalent Java interfaces. This allows developers to efficiently integrate code written in foreign languages into Java projects while maintaining code readability and minimizing errors.  
  David Leopoldseder 
  Petr Tůma 
  This is an abstract accompanying a poster and a full paper. We introduce an approach to diagnose performance issues in dynamic compilers by logging and comparing optimization decisions.  
 CloudJIT: A Just-in-Time FaaS Optimizer (Poster Abstract)   
  Sophie Kaleba 
  Stefan Marr 
  To identify optimisation opportunities, Java developers often use sampling profilers that attribute a percentage of run time to the methods of a program. Even so these profilers use sampling, are probabilistic in nature, and may suffer for instance from safepoint bias, they are normally considered to be relatively reliable. However, unreliable or inaccurate profiles may misdirect developers in their quest to resolve performance issues by not correctly identifying the program parts that would benefit most from optimisations. With the wider adoption of profilers such as async-profiler and Honest Profiler, which are designed to avoid the safepoint bias, we wanted to investigate how precise and accurate Java sampling profilers are today. In this Poster, we investigate the precision, reliability, accuracy, and overhead of async-profiler, Honest Profiler, Java Flight Recorder, JProfiler, perf, and YourKit, which are all actively maintained. We assess them on the fully deterministic Are We Fast Yet benchmarks to have a stable foundation for the probabilistic profilers. We find that profilers are relatively reliable over 30 runs and normally report the same hottest method. Unfortunately, this is not true for all benchmarks, which suggests their reliability may be application-specific. Different profilers also report different methods as hottest and cannot reliably agree on the set of top 5 hottest methods. On the positive side, the average run time overhead is in the range of 1% to 5.4% for the different profilers. Future work should investigate how results can become more reliable, perhaps by reducing the observer effect of profilers by using optimisation decisions of unprofiled runs or by developing a principled approach of combining multiple profiles that explore different dynamic optimisations.  
 Capable VMs Project Overview (Poster Abstract)
4. MPLR_2 conference:
Announcements   
 Call for Papers, 20th International Conference on Managed Programming Languages and Runtimes  
 Deadline:  6/26/2023
5. MPLR_3 conference:
Matteo Oldani, William Blair, Lukas Stadler, Zbynek Slajchrt, Matthias Neugschwandtner Binsweep: Reliably Restricting Untrusted Instruction Streams with Static Binary Analysis and Control-Flow Integrity   In Proceedings of the ACM Cloud Computing Security Workshop (CCSW’24) 
  Florian Huemer, David Leopoldseder, Aleksandar Prokopec, Raphael Mosaner, Hanspeter Moessenboeck Taking a Closer Look: An Outlier-Driven Approach to Compilation-Time Optimization   In Proceedings of the ECOOP 2024 Doctoral Symposium 
  Andrej Pecimuth, David Leopoldseder, Petr Tuma Accurate Compilation Replay via Remote JIT Compilation   Poster presented at the 21st International Conference on Managed Programming Languages and Runtimes (MPLR 2024) 
  Christoph Blumschein, Fabio Niephaus, Codrut Stancu, Christian Wimmer, Jens Lincke, Robert Hirschfeld Finding Cuts in Static Analysis Graphs to Debloat Software   In Proceedings of the ACM SIGSOFT International Symposium on Software Testing and Analysis 
  Ivan Ristovic, Milan Cugurovic, Strahinja Stanojevic, Marko Spasic, Vesna Marinkovic, Milena Vujosevic Janicic Efficient control-flow graph traversal   In Proceedings of YU INFO 2024s 
  Christian Wimmer, Codrut Stancu, David Kozak, Thomas Wuerthinger Scaling Type-Based Points-to Analysis with Saturation   In Proceedings of PLDI 2024 
  Milan Cugurovic, Milena Vujosevic Janicic, Vojin Jovanovic, Thomas Wuerthinger GraalSP: Polyglot, Efficient, and Robust Machine Learning-Based Static Profiler   Journal of Systems and Software 
  2023  
 Maja Vukasovic, Aleksandar Prokopec Exploiting Partially Context-sensitive Profiles to Improve Performance of Hot Code   In Proceedings of the ACM Transactions on Programming Languages and Systems 
  Matt D’Souza, James You, Ondrej Lhoták, Aleksandar Prokopec TASTyTruffle: Just-in-Time Specialization of Parametric Polymorphism   In Proceedings of the ACM on Programming Languages 
  Matteo Basso, Aleksandar Prokopec, Andrea Rosà, Walter Binder Optimization-Aware Compiler-Level Event Profiling   In Proceedings of the ACM Transactions on Programming Languages and Systems 
  Andrej Pecimuth Remote Just-in-Time Compilation for Dynamic Languages   In Proceedings of the SPLASH 2023 Doctoral Symposium 
  Andrej Pecimuth, David Leopoldseder, Petr Tuma Diagnosing Compiler Performance by Comparing Optimization Decisions   In Proceedings of the 20st International Conference on Managed Programming Languages and Runtimes (MPLR 2023) 
  Julian Garn, Florian Angerer, Hanspeter Moessenboeck Generating Java Interfaces for Accessing Foreign Objects   In Proceedings of the 20st International Conference on Managed Programming Languages and Runtimes (MPLR 2023) 
  David Kozak, Vojin Jovanovic, Codrut Stancu, Tomas Vojnar, Christian Wimmer Comparing Rapid Type Analysis with Points-To Analysis in GraalVM Native Image   In Proceedings of the 20st International Conference on Managed Programming Languages and Runtimes (MPLR 2023) 
  2022  
 Jacob Kreindl, Daniele Bonetta, Lukas Stadler, David Leopoldseder, Hanspeter Moessenboeck TruffleTaint: Polyglot Dynamic Taint Analysis on GraalVM   In Proceedings of the 19th International Conference on Managed Programming Languages and Runtimes (MPLR’22) 
  Raphael Mosaner, David Leopoldseder, Wolfgang Kisling, Lukas Stadler, Hanspeter Moessenboeck ML-SOCO: Machine Learning-Based Self-Optimizing Compiler Optimizations   In Proceedings of the 19th International Conference on Managed Programming Languages & Runtimes (MPLR’22) 
  Lukas Makor, Sebastian Kloibhofer, David Leopoldseder, Daniele Bonetta, Lukas Stadler, Hanspeter Moessenboeck Automatic Array Transformation to Columnar Storage at Run Time   In Proceedings of the 19th International Conference on Managed Programming Languages & Runtimes (MPLR’22) 
  Felix Berlakovich, Gergo Barany, Matthias Neugschwandtner Constant Blinding on GraalVM   In Proceedings of the 15th EUROPEAN WORKSHOP ON SYSTEMS SECURITY 
  Stefan Reschke, Toni Mattis, Fabio Niephaus, Robert Hirschfeld Toward Just-in-time and Language-agnostic Mutation Testing   In Proceedings of the MoreVMs’22 workshop at ‹Programming› 2022 
  Christian Humer, Tim Felgentreff, Robert Hirschfeld, Fabio Niephaus, Daniel Stolpe Language-independent Development Environment Support For Dynamic Runtimes   In Proceedings of the 15th ACM SIGPLAN International Symposium on Dynamic Languages 
  Jacob Kreindl, Hanspeter Moessenboeck, Daniele Bonetta Towards Efficient, Multi-Language Dynamic Taint Analysis   In Proceedings of the 16th ACM SIGPLAN International Conference on Managed Programming Languages and Runtimes 
  Raphael Mosaner, Hanspeter Moessenboeck, Manuel Rigger, Roland Schatz, David Leopoldseder Supporting On-Stack Replacement in Unstructured Languages by Loop Reconstruction and Extraction   In Proceedings of the 16th ACM SIGPLAN International Conference on Managed Programming Languages and Runtimes 
  Robert Hirschfeld, Christian Humer, Fabio Niephaus, Daniel Stolpe, Tim Felgentreff Language-independent Development Environment Support For Dynamic Runtimes   In Proceedings of the 15th ACM SIGPLAN International Symposium on Dynamic Languages 
 Kevin Menard, Chris Seaton, Benoit Daloze Specializing Ropes for Ruby   In Proceedings of the 15th International Conference on Managed Languages & Runtimes (ManLang’18) 
  David Leopoldseder, Roland Schatz, Lukas Stadler, Manuel Rigger, Thomas Wuerthinger, Hanspeter Moessenboeck Fast-Path Loop Unrolling of Non-Counted Loops to Enable Subsequent Compiler Optimizations   In Proceedings of the 15th International Conference on Managed Languages & Runtimes, Article No. 2 (ManLang’18) 
  Juan Fumero, Michel Steuwer, Lukas Stadler, Christophe Dubach. OpenCL JIT Compilation for Dynamic Programming Languages   MoreVMs Workshop on Modern Language Runtimes, Ecosystems, and VMs (MoreVMs’17)  Video recording 
 Benoit Daloze, Stefan Marr, Daniele Bonetta, Hanspeter Moessenboeck Efficient and Thread-Safe Objects for Dynamically-Typed Languages   In Proceedings of the Conference on Object-Oriented Programming, Systems, Languages, and Applications (OOPSLA)  . 
  Manuel Rigger, Matthias Grimmer, Christian Wimmer, Thomas Würthinger, Hanspeter Moessenboeck Bringing Low-Level Languages to the JVM: Efficient Execution of LLVM IR on Truffle   In Proceedings of the Workshop on Virtual Machines and Intermediate Languages (VMIL)  . 
  Manuel Rigger, Matthias Grimmer, Hanspeter Moessenboeck Sulong – Execution of LLVM-Based Languages on the JVM   In Proceedings of International Workshop on Implementation, Compilation, Optimization of Object-Oriented Languages, Programs and Systems (ICOOOLPS)  . 
 Benoit Daloze, Chris Seaton, Daniele Bonetta, Hanspeter Moessenboeck Techniques and Applications for Guest-Language Safepoints   In Proceedings of the International Workshop on Implementation, Compilation, Optimization of Object-Oriented Languages, Programs and Systems (ICOOOLPS)  . 
  Matthias Grimmer, Chris Seaton, Roland Schatz, Würthinger, Hanspeter Moessenboeck High-Performance Cross-Language Interoperability in a Multi-Language Runtime   In Proceedings of the 11th Dynamic Language Symposium (DLS)  . 
  Matthias Grimmer, Chris Seaton, Thomas Würthinger, Hanspeter Moessenboeck Dynamically Composing Languages in a Modular Way: Supporting C Extensions for Dynamic Languages.   In Proceedings of the 14th International Conference on Modularity  . 
  Gülfem Savrun-Yeniçeri, Michael Van De Vanter, Per Larsen, Stefan Brunthaler, and Michael Franz An Efficient and Generic Event-based Profiler Framework for Dynamic Languages   In Proceedings of the International Conference on Principles and Practices of Programming on The Java Platform: virtual machines, languages, and tools (PPPJ)  . 
  Michael Van De Vanter Building Debuggers and Other Tools: We Can “Have it All” (Position Paper)   In Proceedings of the 10th Implementation, Compilation, Optimization of Object-Oriented Languages, Programs and Systems Workshop (ICOOOLPS)  . 
  Matthias Grimmer, Manuel Rigger, Roland Schatz, Lukas Stadler, Hanspeter Moessenboeck Truffle C: Dynamic Execution of C on the Java Virtual Machine   In Proceedings of the International Conference on Principles and Practice of Programming in Java (PPPJ)  . 
  Christian Humer, Christian Wimmer, Christian Wirth, Andreas Wöß, Thomas Würthinger A Domain-Specific Language for Building Self-Optimizing AST Interpreters   In Proceedings of the International Conference on Generative Programming: Concepts and Experiences (GPCE)  . 
  Andreas Wöß, Christian Wirth, Daniele Bonetta, Chris Seaton, Christian Humer, Hanspeter Moessenboeck An Object Storage Model for the Truffle Language Implementation Framework   In Proceedings of International Conference on Principles and Practice of Programming in Java (PPPJ)  . 
  Matthias Grimmer, Thomas Würthinger, Andreas Wöß, Hanspeter Moessenboeck An Efficient Approach to Access Native Binary Data from JavaScript   In Proceedings of the 9th Workshop on Implementation, Compilation, Optimization of Object-Oriented Languages, Programs and Systems (ICOOOLPS)  . 
  Chris Seaton, Michael Van De Vanter, and Michael Haupt Debugging at full speed   In Proceedings of the 8th Workshop on Dynamic Languages and Applications (DYLA)  . 
 Thomas Würthinger, Christian Wimmer, Andreas Wöß, Lukas Stadler, Gilles Duboscq, Christian Humer, Gregor Richards, Doug Simon, Mario Wolczko One VM to Rule Them All   In Proceedings of Onward!  . Describes the vision of the Truffle approach, and the full system stack including the interpreter and dynamic compiler. 
  Matthias Grimmer, Manuel Rigger, Lukas Stadler, Roland Schatz, Hanspeter Moessenboeck An efficient native function interface for Java   In Proceedings of the International Conference on Principles and Practices of Programming on the Java Platform: Virtual Machines, Languages, and Tools. (PPPJ)  . 
 Thomas Würthinger, Andreas Wöß, Lukas Stadler, Gilles Duboscq, Doug Simon, Christian Wimmer | Self-Optimizing AST Interpreters | In | Proceedings of the Dynamic Languages Symposium (DLS) | . Describes the design of self-optimizing and self-specializing interpreter, and the application to JavaScript. 
  GraalVM Compiler Papers  
 2023  
 David Leopoldseder, Daniele Bonetta, Lukas Stadler, Hanspeter Moessenboeck, Sebastian Kloibhofer, Lukas Makor | Control Flow Duplication for Columnar Arrays in a Dynamic Compiler | In _Proceedings of the | 2023 Journal and Conference_ 
  2022  
 Felix Berlakovich, Matthias Neugschwandtner, Gergö Barany Look Ma, no constants: practical constant blinding in GraalVM   In Proceedings of the 15th European Workshop on Systems Security (EuroSec ‘22) 
  Gergo Barany, David Leopoldseder, Hanspeter Moessenboeck, Raphael Mosaner Improving Vectorization Heuristics in a Dynamic Compiler with Learned Models   In Proceedings of the Virtual Machines and Language Implementations Workshop Co-located with SPLASH 2022 
  Stefan Marr, Humphrey Burchell, Fabio Niephaus Execution vs. Parse-Based Language Servers: Tradeoffs and Opportunities for Language-Agnostic Tooling for Dynamic Languages   In Proceedings of the 18th Dynamic Languages Symposium (DLS) at SPLASH 2022 
  David Leopoldseder, Daniele Bonetta, Lukas Stadler, Hanspeter Moessenboeck, Lukas Makor, Sebastian Kloibhofer Automatic Array Transformation to Columnar Storage at Run Time   In Proceedings of the 19th International Conference on Managed Programming Languages and Runtimes (MPLR’22) 
  David Leopoldseder, Lukas Stadler, Hanspeter Moessenboeck, Raphael Mosaner, Wolfgang Kisling Machine-Learning-Based Self-Optimizing Compiler Heuristics   In Proceedings of the 19th International Conference on Managed Programming Languages and Runtimes (MPLR’22) 
  Stefan Reschke, Toni Mattis, Fabio Niephaus, Robert Hirschfeld Toward Just-in-time and Language-agnostic Mutation Testing   In Proceedings of the MoreVMs’22 workshop at ‹Programming› 2022 
 James Clarkson, Juan Fumero, Michalis Papadimitriou, Foivos S. Zakkak, Maria Xekalaki, Christos Kotselidis, Mikel Luján Exploiting High-Performance Heterogeneous Hardware for Java Programs using Graal   In Proceedings of the 15th International Conference on Managed Languages & Runtimes (ManLang’18) 
  Juan Fumero, Christos Kotselidis. Using Compiler Snippets to Exploit Parallelism on Heterogeneous Hardware: A Java Reduction Case Study   In Proceedings of the 10th ACM SIGPLAN International Workshop on Virtual Machines and Intermediate Languages (VMIL’18) 
 Josef Eisl, Matthias Grimmer, Doug Simon, Thomas Würthinger, Hanspeter Moessenboeck Trace-based Register Allocation in a JIT Compiler   In Proceedings of the 13th International Conference on Principles and Practices of Programming on the Java Platform: Virtual Machines, Languages, and Tools (PPPJ ‘16) 
  Gülfem Savrun-Yeniçeri, Michael L. Van de Vanter, Per Larsen, Stefan Brunthaler, Michael Franz An Efficient and Generic Event-based Profiler Framework for Dynamic Languages   In Proceedings of the Principles and Practices of Programming on The Java Platform (PPPJ ‘15) 
  Michael L. Van De Vanter Building debuggers and other tools: we can “have it all”   In Proceedings of the 10th Workshop on Implementation, Compilation, Optimization of Object-Oriented Languages, Programs and Systems (ICOOOLPS ‘15) 
  Benoit Daloze, Chris Seaton, Daniele Bonetta, Hanspeter Moessenboeck Techniques and applications for guest-language safepoints   In Proceedings of the 10th Workshop on Implementation, Compilation, Optimization of Object-Oriented Languages, Programs and Systems (ICOOOLPS ‘15) 
  Thomas Würthinger Graal and truffle: modularity and separation of concerns as cornerstones for building a multipurpose runtime   In Proceedings of the companion publication of the 13th international conference on Modularity (MODULARITY ‘14) 
  Lukas Stadler, Thomas Würthinger, Hanspeter Moessenboeck Partial Escape Analysis and Scalar Replacement for Java   In Proceedings of Annual IEEE/ACM International Symposium on Code Generation and Optimization (CGO ‘14) 
  Christian Häubl, Christian Wimmer, Hanspeter Moessenboeck Trace transitioning and exception handling in a trace-based JIT compiler for java   ACM Transactions on Architecture and Code Optimization (TACO) 
  Thomas Würthinger, Andreas Wöß, Lukas Stadler, Gilles Duboscq, Doug Simon, Christian Wimmer Self-optimizing AST interpreters   In Proceedings of the 8th symposium on Dynamic languages (DLS ‘12) 
  Christian Wimmer, Thomas Würthinger Truffle: a self-optimizing runtime system   In Proceedings of the 3rd annual conference on Systems, programming, and applications: software for humanity (SPLASH ‘12) 
  Christian Häubl, Christian Wimmer, Hanspeter Moessenboeck Evaluation of trace inlining heuristics for Java   In Proceedings of the 27th Annual ACM Symposium on Applied Computing (SAC ‘12)
6. MSR_0 conference:
MSR 2023   Dates to be announced Melbourne, Australia    
 co-located with ICSE 2023    
 Toggle navigation        
 Attending | Venue: Melbourne Convention Exhibition Centre | MCEC 
  Participation Support 
  ICSE 2023 
  Keynotes 
  Melbourne 
  Code of Conduct 
  Diversity and Inclusion Plan 
  Main Conference In-Person Presenter Instructions 
  Main Conference Virtual Presenter Instructions 
  Workshop and Co-Located Event Instructions 
  Visa Letter of Invitation 
  Social Events 
  Recruitment Opportunities at ICSE 2023 
  IEEE Computer Society Open Conference Statement 
  Travel Support 
  Childcare Support 
  Program | MSR Program 
  Your Program 
  MSR 2023 Sponsorship Opportunities 
  Awards 
   Sun 31 Dec 
  Tracks | MSR 2023 
  Data and Tool Showcase Track 
  FOSS Award 
  Keynotes 
  MIP Award 
  MSR Awards 
  Mining Challenge 
  Registered Reports 
  Tutorials 
  Vision and Reflection 
  Organization | MSR 2023 Committees 
  Organizing Committee 
  Track Committees 
  Junior PC 
  MIP Award 
  MSR Awards 
  Mining Challenge 
  Registered Reports 
  Series | Series 
  MSR 2024 
  MSR 2023 
  MSR 2022 
  Sign up 
 Mining Software Repositories 2023  
 Welcome to the website of the Mining Software Repositories 2023 conference!  
 The Mining Software Repositories (MSR) conference is the premier conference for data science, machine learning, and artificial intelligence in software engineering. The goal of the conference is to improve software engineering practices by uncovering interesting and actionable information about software systems and projects using the vast amounts of software data such as source control systems, defect tracking systems, code review repositories, archived communications between project personnel, question-and-answer sites, CI build servers, and run-time telemetry. Mining this information can help to understand software development and evolution, software users, and runtime behavior; support the maintenance of software systems; improve software design/reuse; empirically validate novel ideas and techniques; support predictions about software development; and exploit this knowledge in planning future development.  
  MSR Dinner at Cargo Hall, South Wharf   
 Join us for the MSR Dinner, where you can connect with other professionals while enjoying some delicious food and drinks.  
  Location | : | Cargo Hall, South Wharf | . 
  MSR 2023 Tracks   
 Data and Tool Showcase Track  | FOSS Award  | Industry Track  | Junior PC Program  | Keynotes  | MIP Award  | MSR Awards  | Mining Challenge  | Registered Reports  | Technical Papers  | Tutorials  | Vision and Reflection    
 Supporters   
  MSR 2023   
   Support page    
  Keynotes   
  MIP Award   
  MSR Awards   
  Mining Challenge   
  Registered Reports   
  Code of Conduct   
  Diversity and Inclusion Plan   
  Main Conference In-Person Presenter Instructions   
  Main Conference Virtual Presenter Instructions   
  Workshop and Co-Located Event Instructions   
  Visa Letter of Invitation   
  Social Events   
  Recruitment Opportunities at ICSE 2023   
  IEEE Computer Society Open Conference Statement   
  Travel Support
7. MSR_3 conference:
MSR 2024 
  MSR 2023 
  MSR 2022 
 Mon 15 - Tue 16 April 2024 Lisbon, Portugal  MSR 2024  with ICSE 2024    
 Welcome to the website of the Mining Software Repositories 2024 conference! The Mining Software Repositories (MSR) conference is the premier conference for data science, machine learning, and artificial intelligence in software engineering. The goal of the conference is to improve software engineering practices by uncovering interesting and actionable information about software systems and projects using the vas ... 
 Dates to be announced Melbourne, Australia  MSR 2023  with ICSE 2023    
 Welcome to the website of the Mining Software Repositories 2023 conference! The Mining Software Repositories (MSR) conference is the premier conference for data science, machine learning, and artificial intelligence in software engineering. The goal of the conference is to improve software engineering practices by uncovering interesting and actionable information about software systems and projects using the vas ... 
 Mon 23 - Tue 24 May 2022  MSR 2022  with ICSE 2022    
 Welcome to the website of the Mining Software Repositories 2022 conference! The Mining Software Repositories (MSR) conference is the premier conference for data science, machine learning, and artificial intelligence in software engineering. The goal of the conference is to improve software engineering practices by uncovering interesting and actionable information about software systems and projects using the vas ... 
 Queen's University   
 Canada 
  Joyce El Haddad MSR Mining Challenge Co-Chair    
 Université Paris Dauphine - PSL   
 France 
 Ubisoft   
 Canada 
  Damien Jaime MSR Mining Challenge Co-Chair    
 Université Paris Nanterre & LIP6   
 France 
 University of Groningen   
 Netherlands 
  Audris Mockus MSR Awards Co-chair    
 The University of Tennessee 
  Mei Nagappan Registered Reports Track Co-Chair    
 Universität Klagenfurt   
 Austria 
  Pascal Poizat MSR Mining Challenge Co-Chair    
 Université Paris Nanterre & LIP6   
 France 
 Monash University   
 Australia 
  Patanamon Thongtanunam MSR Awards Co-chair    
 The University of Melbourne   
 Australia
8. MSST_0 conference:
on Massive Storage Systems  
  and Technology (MSST 2023)  
  May 22 th  — 24 th  , 2023   
  Sponsored by Santa Clara University,  
  MSST 2023 Tutorials—Birds of a Feather, Monday, May 22   
 Large Scale File/Storage System Indexing with the Grand Unified File Index ( Presentation  )   
 Jason Lee, Dominic Manno, Gary Grider, LANL   
 As filesystems become larger and larger, management of the data stored in these filesystems becomes more and more complex and time consuming. Querying filesystem metadata with standard tools can take hours or even days due to the sheer amount of metadata to be processed and how standard tools go about processing the metadata. Some filesystems provide custom tools that assist in querying their metadata, but there is no unified set of tools to do so. Additionally, such tools are usually reserved for administrators, not users. The Grand Unified File Index (GUFI) solves all these issues and more. GUFI provides a set of highly performant, parallel tools that allow for complex queries to be applied to the metadata of arbitrary filesystems. The GUFI toolset can be used by both administrators as well as users without violating permission semantics. Indices from disconnected filesystems can be combined, allowing for queries across multiple filesystems at once. This session will provide a high-level overview of GUFI as well as a tutorial on using GUFI.   
  The latest in standards-based technologies available for data orchestration and storage at mass scale. 
   MSST 2023 Invited Track, Tuesday, May 23   
 David Flynn, Hammerspace   
   MSST 2023 Invited Track, Wednesday, May 24   
 MSST 2023 Organizers 
 Conference Chair | Prof. Ahmed Amer, SCU 
 Program Committee | Gary Grider, John Bent, Alex Parga 
 Registration Chair | Prof. Shiva Jahangiri, SCU 
 Page Updated January 12, 2024
9. MSST_2 conference:
MSST History  
  Storage Systems and Technology (MSST 2023) 
 Page Updated January 13, 2024
10. MSST_3 conference:
SFF 
  Open Projects 
  Feedback Submission | SNIA Contribution Agreement 
  Draft Technical Work for Public Review | CDMI Extensions and Profiles 
  I/0 Traces, Tools & Analysis Repository 
  Webinars 
  SNIA Developer Conference 
  Compute, Memory, and Storage Summit | C+M+S, PM and NVM Summit Archives | C+M+S Summit 2023 | C+M+S Summit 2023 Presentation Abstracts 
  C+M+S Summit 2023 Speakers 
  PM+CS Summit 2022 | PM+CS Summit 2022 Presentation Abstracts 
  PM+CS Summit 2022 Speakers 
  2023 SNIA Preview 
  SNIA Storage Security Summit | Storage Security Summit 2022 Agenda 
  Storage Security Summit 2022 Presentation Abstracts 
  Geek Out On Storage! 
  Weekend Watch 
  Membership | SNIA Membership | Announcing More Benefits Starting December 1st 
  Alphabetical List of SNIA Members 
  Voting Member Directory 
 You are here  
 Home  » Education  » Educational Library  » International Conference on Massive Storage Systems and Technology (MSST)   
  International Conference on Massive Storage Systems and Technology (MSST)  
   Back to list   
 Library Release Date:   
 Friday, April 14, 2023    
 Abstract:

output:1. MPC_3 information:
2. MPLR_0 information:
3. MPLR_1 information:
4. MPLR_2 information:
5. MPLR_3 information:
6. MSR_0 information:
7. MSR_3 information:
8. MSST_0 information:
9. MSST_2 information:
10. MSST_3 information:
