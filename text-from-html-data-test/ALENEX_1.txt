Skip to main content    

 Search    Search   
 This Book 
  Anywhere 
  Books 
  Journals 
  Proceedings 
  Quick Search in Books  Enter Search Terms     Search      
      
 Quick Search anywhere  Enter Search Terms   Search      
     
 Quick Search anywhere  Enter Search Terms       Search      
     
 Quick Search anywhere  Enter Search Terms     Search      
     
 Quick Search anywhere  Enter Search Terms     Search      

 Advanced Search    

  0    

 Register / Sign In 
  Access via your Institution 

 Skip main navigation  Close Drawer Menu   Open Drawer Menu    Menu  Journals | SIAM Review 
  Multiscale Modeling & Simulation 
  SIAM Journal on Applied Algebra and Geometry 
  SIAM Journal on Applied Dynamical Systems 
  SIAM Journal on Applied Mathematics 
  SIAM Journal on Computing 
  SIAM Journal on Control and Optimization 
  SIAM Journal on Discrete Mathematics 
  SIAM Journal on Financial Mathematics 
  SIAM Journal on Imaging Sciences 
  SIAM Journal on Mathematical Analysis 
  SIAM Journal on Mathematics of Data Science 
  SIAM Journal on Matrix Analysis and Applications 
  SIAM Journal on Numerical Analysis 
  SIAM Journal on Optimization 
  SIAM Journal on Scientific Computing 
  SIAM/ASA Journal on Uncertainty Quantification 
  Theory of Probability & Its Applications 
  Locus 
  E-books 
  Bookstore 
  Proceedings 
  For Authors | Journal Authors 
  Book Authors 
  For Librarians 
  Collections | Epidemiology Collection 
  High Impact Article Collection 
  JOIN SIAM 
  HELP/CONTACT US 

 Proceedings  

 Proceedings Series | Algorithm Engineering & Experiments (ALENEX) 
  Algorithmic Principles of Computer Systems-APOCS 
  Analytic Algorithmics and Combinatorics (ANALCO) 
  Applied and Computational Discrete Algorithms (ACDA) 
  Combinatorial Scientific Computing (CSC) 
  Control and its Applications 
  Data Mining 
  Discrete Algorithms (SODA) 
  Mathematics for Industry 
  Parallel Processing for Scientific Computing (PP) 
  Simplicity in Algorithms-SOSA 

    Share     
 Share on  Facebook 
  Twitter 
  LinkedIn 
  Email 

 Home  Proceedings  2023 Proceedings of the Symposium on Algorithm Engineering and Experiments (ALENEX)   
   
 Description | The aim of ALENEX is to provide a forum for the presentation of original research in the design, implementation, and experimental evaluation of algorithms and data structures. Typical results include an extensive experimental analysis of nontrivial algorithmic results, ideally bridging the gap between theory and practice. ALENEX papers also address methodological issues and standards in the experimental evaluation of algorithms and data structures. Relevant areas of applied algorithmic research include but are not limited to databases; geometry; graphs and networks, including web applications; operations research; combinatorial aspects of scientific computing; and computational problems in the natural sciences or engineering. ALENEX also regularly welcomes papers that address algorithms and data structures for advanced models of computing, including memory hierarchies and parallel computing, ranging from instruction parallelism over multicore computing to high-performance and cloud computing. 

 CHAPTERS  
 CHAPTERS  
  Select All   For selected items:     Please Select  Export Citations  Add to Favorites  Recommend      
   
  Full Access    

 Front Matter   
 pp.  i–iii   
 Abstract 
  PDF 
  Abstract   Frontmatter includes preface and acknowledgments and table of contents  

  Full Access    

 A Closer Cut: Computing Near-Optimal Lawn Mowing Tours   
 Sándor P. Fekete | , 
  Dominik Krupke | , 
  Michael Perk | , 
  Christian Rieck | , 
  Christian Scheffer 
    
 pp.  1–14   
 Abstract 
  PDF 
  Abstract   For a given polygonal region P  , the Lawn Mowing Problem (LMP) asks for a shortest tour T  that gets within Euclidean distance 1 of every point in P  ; this is equivalent to computing a shortest tour for a unit-disk cutter C  that covers all of P  . As a geometric optimization problem of natural practical and theoretical importance, the LMP generalizes and combines several notoriously difficult problems, including minimum covering by disks, the Traveling Salesman Problem with neighborhoods (TSPN), and the ∃ℝ-complete Art Gallery Problem (AGP). So far, there have only been theoretical approximation algorithms with worst-case bounds of  
     
 , where α TSP  is the approximation factor for the geometric TSP. Here, α TSP  = 1+ ε is theoretically possible by using one of the famous geometric approximation schemes; however, these methods are not practically applicable for concrete instances. Moreover, there have not been any exact methods for the LMP that compute provably near-optimal solutions for instances of interesting size, owing to the combination of geometric difficulties, such as a succinct characterization of optimal solutions, as well as the lack of useful lower bounds that provide practically small performance gaps.  
 In this paper, we conduct the first study of the Lawn Mowing Problem with a focus on practical computation of near-optimal solutions. To this end, we provide new theoretical insights: Optimal solutions are polygonal paths with a bounded number of vertices, i.e., they do not have any curved pieces, allowing a restriction to straight-line solutions; on the other hand, there can be relatively simple instances for which optimal solutions require a large class of irrational coordinates. On the practical side, we present a primal-dual approach with provable convergence properties based on solving a special case of the TSPN restricted to witness sets. In each iteration, this establishes both a valid solution and a valid lower bound, and thereby a bound on the remaining optimality gap. As we demonstrate in an extensive computational study, this allows us to achieve provably optimal and near-optimal solutions for a large spectrum of benchmark instances with up to 2000 vertices.  
 *  The full version of the paper can be accessed at https://arxiv.org/abs/2211.05891. This work was supported by DFG project Computational Geometry: Solving Hard Optimization Problems (CG:SHOP), FE407/21-1.  

  Full Access    

 A Uniform Sampling Procedure for Abstract Triangulations of Surfaces   
 Rajan Shankar | , 
  Jonathan Spreer 
    
 pp.  15–26   
 Abstract 
  PDF 
  Abstract   We present a procedure to sample uniformly from the set of combinatorial isomorphism types of balanced triangulations of surfaces — also known as graph-encoded surfaces. For a given number n  , the sample is a weighted set of graph-encoded surfaces with 2 n  triangles.  
 The sampling procedure relies on connections between graph-encoded surfaces and permutations, and basic properties of the symmetric group.  
 We implement our method and present a number of experimental findings based on the analysis of 138 million runs of our sampling procedure, producing graph-encoded surfaces with up to 280 triangles.  
 Namely, we determine that, for n  fixed, the empirical mean genus  
     
 of our sample is very close to     
 . Moreover, we present experimental evidence that the associated genus distribution more and more concentrates on a vanishing portion of all possible genera as n tends to infinity. Finally, we observe from our data that the mean number of non-trivial symmetries of a uniformly chosen graph encoding of a surface decays to zero at a rate super-exponential in n  .  

  Full Access    

 Filtration-Domination in Bifiltered Graphs   
 Ángel Javier Alonso | , 
  Michael Kerber | , 
  Siddharth Pritam 
    
 pp.  27–38   
 Abstract 
  PDF 
  Abstract   Bifiltered graphs are a versatile tool for modelling relations between data points across multiple grades of a two- dimensional scale. They are especially popular in topological data analysis, where the homological properties of the induced clique complexes are studied. To reduce the large size of these clique complexes, we identify filtration-dominated  edges of the graph, whose removal preserves the relevant topological properties. We give two algorithms to detect filtration-dominated edges in a bifiltered graph and analyze their complexity. These two algorithms work directly on the bifiltered graph, without first extracting the clique complexes, which are generally much bigger. We present extensive experimental evaluation which shows that in most cases, more than 90% of the edges can be removed. In turn, we demonstrate that this often leads to a substantial speedup, and reduction in the memory usage, of the computational pipeline of multiparameter topological data analysis.  

  Full Access    

 A Dynamic MaxSAT-based Approach to Directed Feedback Vertex Sets   
 Rafael Kiesel | , 
  André Schidler 
    
 pp.  39–52   
 Abstract 
  PDF 
  Abstract   We propose a new approach to the Directed Feedback Vertex Set Problem (DFVSP)  , where the input is a directed graph and the solution is a minimum set of vertices whose removal makes the graph acyclic.  
 Our approach, implemented in the solver DAG ER  , is based on two novel contributions: Firstly, we add a wide range of data reductions that are partially inspired by reductions for the similar vertex cover problem. For this, we give a theoretical basis for lifting reductions from vertex cover to DFVSP but also incorporate novel ideas into strictly more general and new DFVSP reductions.  
 Secondly, we propose dynamically encoding DFVSP in propositional logic using cycle propagation  for improved performance. Cycle propagation builds on the idea that already a limited number of the constraints in a propositional encoding is usually sufficient for finding an optimal solution. Our algorithm, therefore, starts with a small number of constraints and cycle propagation adds additional constraints when necessary. We propose an efficient integration of cycle propagation into the workflow of MaxSAT solvers, further improving the performance of our algorithm.  
 Our extensive experimental evaluation shows that DAG ER  significantly outperforms the state-of-the-art solvers and that our data reductions alone directly solve many of the instances.  
 *  The full version of the paper can be accessed at http://arxiv.org/abs/2211.06109  

  Full Access    

 Lossy Reduction Rules for the Directed Feedback Vertex Set Problem   
 Timon Behr | , 
  Sabine Storandt 
    
 pp.  53–64   
 Abstract 
  PDF 
  Abstract   Given a directed graph G  ( V  , A  ), the DIRECTED FEEDBACK VERTEX SET (DFVS) problem asks for the smallest sized subset of V  whose removal makes G  acyclic. The problem is NP-complete and efficient constant-factor approximation algorithms are ruled out under UGC. Attempting to get an exact DFVS in practice usually involves the application of reduction rules that decrease the instance size without compromising the optimal solution. If the reduced graph gets sufficiently small, the respective instance can then be solved to optimality e.g. by a branching algorithm. However, one might need to resort to heuristics in the end in case the reduced instance is still huge. In this paper, we propose novel reduction rules for DFVS with a special focus on lossy rules. Here, the idea is that an optimal solution on the reduced graph combined with the information gained in the reduction process provides an α-approximation for the original instance. We present several rules that ensure small α, and discuss how to combine and engineer them. We also propose a taxonomy to study general types of lossy rules. In an extensive experimental analysis, we evaluate the impact of exact and lossy rules on the running time, the size of the reduced instance, and the solution quality. It turns out that the lossy rules are indeed very effective and that it is often possible to solve instances by using reduction rules only.  

  Full Access    

 Parallel and I/O-Efficient Algorithms for Non-Linear Preferential Attachment   
 Daniel Allendorf | , 
  Ulrich Meyer | , 
  Manuel Penschuck | , 
  Hung Tran 
    
 pp.  65–76   
 Abstract 
  PDF 
  Abstract   Preferential attachment lies at the heart of many network models aiming to replicate features of real world networks. To simulate the attachment process, conduct statistical tests, or obtain input data for benchmarks, efficient algorithms are required that are capable of generating large graphs according to these models.  
 Existing graph generators are optimized for the most simple model, where new nodes that arrive in the network are connected to earlier nodes with a probability P  ( h  ) ∝ d  that depends linearly on the degree d  of the earlier node h  . Yet, some networks are better explained by a more general attachment probability P  ( h  ) ∝ f  ( d  ) for some function f  : ℕ → ℝ. Here, the polynomial case f  ( d  ) = d  α  where α ∈ ℝ >0  is of particular interest.  
 In this paper, we present efficient algorithms that generate graphs according to the more general models. We first design a simple yet optimal sequential algorithm for the polynomial model. We then parallelize the algorithm by identifying batches of independent samples and obtain a near-optimal speedup when adding many nodes. In addition, we present an I/O-efficient algorithm that can even be used for the fully general model. To showcase the efficiency and scalability of our algorithms, we conduct an experimental study and compare their performance to existing solutions.  
 Funding This work was supported by the Deutsche Forschungsgemeinschaft (DFG) under grant ME 2088/5-1 (FOR 2975 — Algorithms, Dynamics, and Information Flow in Networks).  
 Supplemental material The internal memory algorithms are maintained at https://github.com/massive-graphs/nonlinear-preferential-attachment. The implementation of the dynamic weighted sampling data structure of [28] is independently maintained as the Rust crate https://crates.io/crates/dynamic-weighted-index. The external memory algorithms are available at https://github.com/massive-graphs/extmem-nlpa. An archive containing the frozen source code of all experiments and most of the raw data collected can be found on https://zenodo.org/record/7318118.  
 *  Link to full version: https://arxiv.org/abs/2211.06884  

  Full Access    

 Tailored vertex ordering for faster triangle listing in large graphs   
 Fabrice Lécuyer | , 
  Louis Jachiet | , 
  Clémence Magnien | , 
  Lionel Tabourier 
    
 pp.  77–85   
 Abstract 
  PDF 
  Abstract   Listing triangles is a fundamental graph problem with many applications, and large graphs require fast algorithms. Vertex ordering allows the orientation of edges from lower to higher vertex indices, and state-of-the-art triangle listing algorithms use this to accelerate their execution and to bound their time complexity. Yet, only basic orderings have been tested. In this paper, we show that studying the precise cost of algorithms instead of their bounded complexity leads to faster solutions. We introduce cost functions that link ordering properties with the running time of a given algorithm. We prove that their minimization is NP-hard and propose heuristics to obtain new orderings with different trade-offs between cost reduction and ordering time. Using datasets with up to two billion edges, we show that our heuristics accelerate the listing of triangles by an average of 38% when the ordering is already given as an input, and 16% when the ordering time is included.  

  Full Access    

 Efficiently Computing Directed Minimum Spanning Trees   
 Maximilian Böther | , 
  Otto Kißig | , 
  Christopher Weyand 
    
 pp.  86–95   
 Abstract 
  PDF 
  Abstract   Computing a directed minimum spanning tree, called arborescence, is a fundamental algorithmic problem, although not as common as its undirected counterpart. In 1967, Edmonds discussed an elegant solution. It was refined to run in O  (min( n  2  , m  log n  )) by Tarjan which is optimal for very dense and very sparse graphs. Gabow et al. gave a version of Edmonds' algorithm that runs in O  ( n  log n  + m  ), thus asymptotically beating the Tarjan variant in the regime between sparse and dense. Despite the attention the problem received theoretically, there exists, to the best of our knowledge, no empirical evaluation of either of these algorithms. In fact, the version by Gabow et al. has never been implemented and, aside from coding competitions, all readily available Tarjan implementations run in O  ( n  2  ). In this paper, we provide the first implementation of the version by Gabow et al. as well as five variants of Tarjan's version with different underlying data structures. We evaluate these algorithms and existing solvers on a large set of real-world and random graphs.  
 *  The full version of the paper can be accessed at https://arxiv.org/abs/2208.02590  

  Full Access    

 Local Motif Clustering via (Hyper)Graph Partitioning   
 Adil Chhabra | , 
  Marcelo Fonseca Faraj | , 
  Christian Schulz 
    
 pp.  96–109   
 Abstract 
  PDF 
  Abstract   A widely-used operation on graphs is local clustering, i.e., extracting a well-characterized community around a seed node without the need to process the whole graph. Recently local motif clustering has been proposed: it looks for a local cluster based on the distribution of motifs. Since this local clustering perspective is relatively new, most approaches proposed for it are extensions of statistical and numerical methods previously used for edge-based local clustering, while the available combinatorial approaches are still few and relatively simple. In this work, we build a hypergraph and a graph model which both represent the motif- distribution around the seed node. We solve these models using sophisticated combinatorial algorithms designed for (hyper)graph partitioning. In extensive experiments with the triangle motif, we observe that our algorithm computes communities with a motif conductance value being one third on average in comparison against the communities computed by the state-of-the-art tool MAPPR while being 6.3 times faster on average.  
 *  Code and experimental data can be found in the following repository https://github.com/LocalClustering/HeidelbergMotifClustering.git  

  Full Access    

 Applying Skeletons to Speed Up the Arc-Flags Routing Algorithm   
 Ivan Khomutovskiy | , 
  Rebekka Dunker | , 
  Jessica Dierking | , 
  Julian Egbert | , 
  Christian Helms | , 
  Finn Schöllkopf | , 
  Katrin Casel | , 
  Philipp Fischbeck | , 
  Tobias Friedrich | , 
  Davis Isaac | , 
  Simon Krogmann | , 
  Pascal Lenzner 
    
 pp.  110–122   
 Abstract 
  PDF 
  Abstract   The Single-Source Shortest Path problem is classically solved by applying Dijkstra's algorithm. However, the plain version of this algorithm is far too slow for real-world applications such as routing in large road networks. To amend this, many speed-up techniques have been developed that build on the idea of computing auxiliary data in a preprocessing phase, that is used to speed up the queries. One well-known example is the Arc-Flags algorithm that is based on the idea of precomputing edge flags to make the search more goal-directed. To explain the strong practical performance of such speed-up techniques, several graph parameters have been introduced. The skeleton dimension  is one such parameter that has already been used to derive runtime bounds for some speed-up techniques. Moreover, it was experimentally shown to be low in real-world road networks.  
 We introduce a method to incorporate skeletons  , the underlying structure behind the skeleton dimension, to improve routing speed-up techniques even further. As a proof of concept, we develop new algorithms called SKARF and SKARF +  that combine skeletons with Arc-Flags, and demonstrate via extensive experiments on large real-world road networks that SKARF +  yields a significant reduction of the search space and the query time of about 30% to 40% over Arc-Flags. We also prove theoretical bounds on the query time of SKARF, which is the first time an Arc-Flags variant has been analyzed in terms of skeleton dimension.  

  Full Access    

 LZ77 via Prefix-Free Parsing   
 Aaron Hong | , 
  Massimiliano Rossi | , 
  Christina Boucher 
    
 pp.  123–134   
 Abstract 
  PDF 
  Abstract   In this paper, we present an algorithm for constructing the Lempel-Ziv 77 (LZ77) factorization using prefix-free parsing, an algorithm that was first developed as preprocessing algorithm for constructing the Burrows-Wheeler transform and the suffix array for input text. It was then demonstrated that the output of prefix-free parsing can be an effective data structure that emulates a compressed suffix tree (CST). PFP-LZ77 marries this data structure with the algorithm proposed by Karkkäinen et al. [CPM 2013]. In particular, we implemented a modification of the primitives used to support CST operations to enable previous smaller value and next smaller value queries on the suffix array of the text. This allow PFP-LZ77 to exploit the repetitiveness of the text, while building the LZ77 parse. We show that PFP-LZ77, SE-KKP, and ReLZ were the only methods capable of scaling to large datasets (e.g., 1024 copies of chromosome 19). And although SE-KKP and ReLZ performed well, SE-KKP was between 2.5 and 5 times slower, and used between 3 and 11 times more memory than PFP-LZ77 for reasonably large datasets (i.e., more than 16 copies of chromosome 19), and ReLZ only generates an LZ77 approximation. Our implementation is available at https://github.com/AaronHong1024/PFP_LZ77.  

  Full Access    

 Modified Iterative Quantum Amplitude Estimation is Asymptotically Optimal   
 Shion Fukuzawa | , 
  Christopher Ho | , 
  Sandy Irani | , 
  Jasen Zion 
    
 pp.  135–147   
 Abstract 
  PDF 
  Abstract   In this work, we provide the first QFT-free algorithm for Quantum Amplitude Estimation (QAE) that is asymptotically optimal while maintaining the leading numerical performance. QAE algorithms appear as a subroutine in many applications for quantum computers. The optimal query complexity achievable by a quantum algorithm for QAE is  
     
 log queries, providing a speedup of a factor of 1/ε over any other classical algorithm for the same problem. The original algorithm for QAE utilizes the quantum Fourier transform (QFT) which is expected to be a challenge for near-term quantum hardware. To solve this problem, there has been interest in designing a QAE algorithm that avoids using QFT. Recently, the iterative QAE algorithm (IQAE) [1] was introduced with a near-optimal     
 query complexity and small constant factors. In this work, we combine ideas from the preceding line of work to introduce a QFT-free QAE algorithm that maintains the asymptotically optimal     
 query complexity while retaining small constant factors. We supplement our analysis with numerical experiments comparing our performance with IQAE where we find that our modifications retain the high performance, and in some cases even improve the numerical results.  

  Full Access    

 Optimizing Search Layouts in Packed Memory Arrays   
 Brian Wheatman | , 
  Randal Burns | , 
  Aydın Buluç | , 
  Helen Xu 
    
 pp.  148–161   
 Abstract 
  PDF 
  Abstract   This paper introduces Search-optimized Packed Memory Arrays  (SPMAs), a collection of data structures based on Packed Memory Arrays (PMAs) that address suboptimal search via cache-optimized search layouts. Traditionally, PMAs and B-trees have tradeoffs between searches/inserts and scans: B-trees were faster for searches and inserts, while PMAs were faster for scans.  
 Our empirical evaluation shows that SPMAs overcome this tradeoff for unsorted input distributions: on average, SPMAs are faster than B+-trees (a variant of B-trees optimized for scans) on all major operations. We generated datasets and search/insert workloads from the Yahoo! Cloud Serving Benchmark (YCSB) and found that SPMAs are about 2× faster than B+-trees regardless of the ratio of searches to inserts. On uniform random inputs, SPMAs are on average between 1.3× −2.3× faster than B+-trees on all operations. Finally, we vary the amount of sortedness in the inputs to stress the worst-case insert distribution in the PMA. We find that the worst-case B+-tree insertion throughput is about 1.5× faster than the worst-case PMA insertion throughput. However, the worst-case input for the PMA is sorted and highly unlikely to appear naturally in practice. The SPMAs maintain higher insertion throughput than the B+-tree when the input is up to 25% sorted.  

  Full Access    

 PaCHash: Packed and Compressed Hash Tables   
 Florian Kurpicz | , 
  Hans-Peter Lehmann | , 
  Peter Sanders 
    
 pp.  162–175   
 Abstract 
  PDF 
  Abstract   We introduce PaCHash, a hash table that stores its objects contiguously in an array without intervening space, even if the objects have variable size. In particular, each object can be compressed using standard compression techniques. A small search data structure allows locating the objects in constant expected time. PaCHash is most naturally described as a static external hash table where it needs a constant number of bits of internal memory per block of external memory. Here, in some sense, PaCHash beats a lower bound on the space consumption of k  -perfect hashing. An implementation for fast SSDs needs about 5 bits of internal memory per block of external memory, requires only one disk access (of variable length) per search operation, and has small internal search overhead compared to the disk access cost. Our experiments show that it has lower space consumption than all previous approaches even when considering objects of identical size.  

  Full Access    

 SicHash - Small Irregular Cuckoo Tables for Perfect Hashing   
 Hans-Peter Lehmann | , 
  Peter Sanders | , 
  Stefan Walzer 
    
 pp.  176–189   
 Abstract 
  PDF 
  Abstract   A Perfect Hash Function (PHF) is a hash function that has no collisions on a given input set. PHFs can be used for space efficient storage of data in an array, or for determining a compact representative of each object in the set. In this paper, we present the PHF construction algorithm SicHash - Small Irregular Cuckoo Tables for Perfect Hashing. At its core, SicHash uses a known technique: it places objects in a cuckoo hash table and then stores the final hash function choice of each object in a retrieval data structure. We combine the idea with irregular cuckoo hashing, where different objects can have a different number of hash functions. Additionally, we use many small tables that we overload beyond their asymptotic maximum load factor. The most space efficient competitors often use brute force methods to determine the PHFs. SicHash provides a more direct construction algorithm that only rarely needs to re-compute parts. Our implementation improves the state of the art in terms of space usage versus construction time for a wide range of configurations. For some configurations, SicHash is up to 4.3 times faster than the next best competitor. At the same time, it provides very fast queries.  

  Full Access    

 Multiway Powersort   
 William Cawley Gelling | , 
  Markus E. Nebel | , 
  Benjamin Smith | , 
  Sebastian Wild 
    
 pp.  190–200   
 Abstract 
  PDF 
  Abstract   We present a stable mergesort variant, Multiway Powersort  , that exploits existing runs and finds nearly-optimal merging orders for k-way  merges with negligible overhead. This builds on Powersort (Munro& Wild, ESA2018), which has recently replaced Timsort's suboptimal merge policy in the CPython reference implementation of Python, as well as in PyPy and further libraries. Multiway Powersort reduces the number of memory transfers, which increasingly determine the cost of internal sorting (as observed with Multiway Quicksort (Kushagra et al., ALENEX 2014; Aumüller&Dietzfelbinger, TALG 2016; Wild, PhD thesis 2016) and the inclusion of Dual-Pivot Quicksort in the Java runtime library). We demonstrate that our 4-way Powersort implementation can achieve substantial speedups over standard (2-way) Powersort and other stable sorting methods without compromising the optimally run-adaptive performance of Powersort.  

  Full Access    

 Lower Bounds for Sorting 16, 17, and 18 Elements   
 Florian Stober | , 
  Armin Weiß 
    
 pp.  201–213   
 Abstract 
  PDF 
  Abstract   It is a long-standing open question to determine the minimum number of comparisons S (n)  that suffice to sort an array of n elements. Indeed, before this work, S(n)  has been known only for n  ≤ 22 with the exception of n  = 16, 17, and 18.  
 In this work, we fill that gap by proving that sorting n  = 16, 17, and 18 elements requires 46, 50, and 54 comparisons respectively. This fully determines S(n)  for these values and disproves a conjecture by Knuth that S  (16) = 45. Moreover, we show that for sorting 28 elements at least 99 comparisons are needed.  
 We obtain our result via an exhaustive computer search which extends previous work by Wells (1965) and Peczarski (2002, 2004, 2007, 2012). Our progress is both based on advances in hardware and on novel algorithmic ideas such as applying a bidirectional search to this problem.  

 Book Details | Published:  2023   eISBN:  978-1-61197-756-1    https://doi.org/10.1137/1.9781611977561    Book Series Name:  Proceedings   Book Code:  PRAL23   Book Pages:  iii-213   BibTex 

 Recommended Content  

   Society for Industrial and  
  Applied Mathematics   

 Society for Industrial and Applied Mathematics  
 3600 Market Street, 6th Floor  
  Philadelphia, PA 19104  
  USA   

 © 2024 Society for Industrial and Applied Mathematics  

 Browse | Browse | Journals 
  E-books 
  Bookstore 
  Proceedings 

 Alerts | Alerts | Sign up/Manage Email Alerts 

 Information | Information | For Journal Authors 
  For Book Authors 
  For Librarians 
  Help 
  Terms of Use & Privacy Policy 

 About | About | SIAM 
  Join SIAM 
  Donate to SIAM 

   Request Username  
 Can't sign in? Forgot your username?  
 Enter your email address below and we will send you your username  
   
  Email    

  Close    
    
 If the address matches an existing account you will receive an email with instructions to retrieve your username  

   Register  
  Email*    

  Already have an account?    

   Change Password  
   
  Old Password    
     
 New Password    
   Too Short  Weak  Medium  Strong  Very Strong  Too Long    
 Your password must have 2 characters or more and contain 3 of the following:  
 a lower case character, 
  an upper case character, 
  a special character 
  or a digit 
  Too Short    

 Password Changed Successfully  
 Your password has been changed  

   Login  
     Email *     

 Password *     
   Forgot your password?  Create Account    
   
 Keep me logged in     

 Create Account    
 Log in via your institution    
   
 Can't sign in? Forgot your password?  
 Enter your email address below and we will send you the reset instructions  
   
  Email    

   Cancel    
   
 If the address matches an existing account you will receive an email with instructions to reset your password  
 Close    

 Verify Phone  
    
 Enter the verification code    
    
   Cancel    
   
 Congrats!  
 Your Phone has been verified  
 close