Home 
  Computer Science 
  Software Engineering 
    
 Article  PDF Available  Software engineering education: How far we’ve come and how far we have to go  
 January 2008 
  Journal of Systems and Software | 82(4):571-575 
    
 DOI: 10.1016/j.jss.2008.12.038    
 Source 
  DBLP 

 Authors:   
      
 Nancy R. Mead    
 Carnegie Mellon University 

   Download full-text PDF     Read full-text     

   Download full-text PDF     
   Read full-text     
   Download citation     
   Copy link  Link copied      
         
      Read full-text   
      Download citation   
     Copy link  Link copied    

 Citations (58)   
   
  References (27)   

 Abstract  
   
 In this paper I trace the history of software engineering education and focus on some of the key players. I highlight what has been accomplished in degree programs and curricula, conferences and working groups, professionalism, certification, and industry–university collaboration. I also look at the challenges that lie ahead—the global reach of education, new delivery mechanisms, new professional efforts, and the need to engage in leadership in software engineering education. What new approaches should be considered? How can we educators maintain our vitality? How can we best nurture new educators and encourage others to join our profession?   

    Discover the world's research   
 25+ million members 
  160+ million publication pages 
  2.3+ billion citations 
  Join for free     

     Public Full-text 1    

 Content uploaded by Nancy R. Mead    
   
 Author content    
   
 All content in this area was uploaded by Nancy R. Mead on Aug 17, 2017   

 Content may be subject to copyright.   

 Software Engin  eering Educ  ation: How Far W  e’ve Come    
 and How Far We H  ave To Go    
   
 Nancy R. Mead     
 Software Engineering Institute   
 nrm@sei.cmu.edu   
   
 Abstract    
 In this talk we’ll trace the his  tory of software engineering education and  focus on some of   
 the key pla yers. Although  the time has gone by quickly, i  t is more than 20 years since the f  irst      
 CSEE was held, and there have been many  changes. We’ll highlight the work that w  e have   
 accomplished in the a  reas of degree prog  rams and curricula, co  nferences and workin  g groups,     
 professionalism, certification, and industry- univers  ity collaboration.     
 We’ll also look at   the challenges that lie ahead — the g  lobal reach of education, n  ew delivery     
 mechanisms, new professional efforts, and the need for us to engag  e in leadership in softwar  e    
 engineering education. What new approaches should we be considering? How c  an we maintain   
 our vitality? How can we best nurture  new educators and encourage other  s to join our   
 profession?   
   
 1. Introduction   
   
 This paper is reminiscent of A Ch  ristmas Carol  .    I feel like I  am writing abo  ut the ghost of      
 Christmas past, present, a  nd future! In some regards it’s h  ard to believe what has been    
 accomplished in a relat  ively short time. On the othe  r hand  , it feels like we have barely scratche  d   
 the surface in terms of what can be done to further so  ftware engineering education.   
 We’ll start by taking a look  at our past accomplishm  ents. Then we’ll take a look  at the   
 exciting developments taking place right now. Fina  lly we’ll get out the crystal ball and try to   
 gue ss what lies in the future. As we a  re doing this, we’ll rem  ember the many contribution  s    
 made by leaders in the pas  t, take a look at what the cu  rrent leadership is accom  plishing, and   
 guess at the makeup of ou  r leaders in the future.  N  eedless to say, so much has happened that     
 this short paper is far  from complete. I am just sc  ratching the surface in this li  st of   
 accomplishments and hav  e mentioned only a few of  the people who have been so  influential in   
 the field. I hope to fill in some of these gaps in m  y tal k.    

 2. The pa  st   
   
 2.1. The early days   
   
 I was first exposed to software engineering education  when I was a practitioner at I  BM in the      
 1970s. (Of course a  t that time, th  e term software engineering was still not  in common use.)      
 Harlan Mills had conv  inced the then President of I  BM Federal Systems Div  ision, John Jackson,   
 to offer a series of cour  ses entitled Structured Prog  ramming Workshop , Structured D  esign     
 Workshop, and eventually A  dvanced Design Workshop , fond  ly known as SPW, SDW, and      
 ADW. Every programmer in the Divisio  n was to take SPW, lead prog  rammers were to take    
 SDW, and the elite would eventually take AD  W. Eventually these course offerings were   
 supplemented by university short courses. Althoug  h it doesn’t seem like much now, taking   
 programmers off the  j ob for two to three    weeks was a big commitm  ent at the time. Workshop   
 completions were track  ed at the highest levels of m  anagement. T he workshops  resulted in  the      
 Linger - Mills  - Witt book  on s   tructure d p ro  grammi  ng  [1], which  is still in use. Many  of the early      
 pioneers from that era are still wo  rking, such as Rick Ling  er, but others such as Mills  and    
 Dijkstra have passed on, having revolutionized the f  ield.   
   
 2.2. MSE p rograms  , c onferences  , and w  orkshops     
   
 In the late 1970s, Master’s d egree pro  grams in s oftware  en   gineering started to emerge . The        
 workshop series that w  as so successful in IBM’s Fed  eral Systems Division grew  into a   
 corporate- level commitm  ent, and IBM’s Software Engineer  ing Institute was founded.  The    
 corporate model was slightly different, but m  any of the same courses were offe  red across the    
 company, and at the corpo  rate level, in -  house in  structors were certified to  teach them via a   
 formal instruc  tor training prog  ram.    
 During the early 80s, these educational activitie  s continued, and a study was undertak en that    
 resulted in the current So  ftware Engineering Insti  tute at Carnegie Mellon Un  iversity. One of the   
 key elements of the orig  inal SEI charter was to adv  ance s oftware  engineering education. Norm     
 Gibbs was hired as Director of Education. Under h  is leadership, the first Conference on   
 Software Engineering Education (CSEE) took  place. Many of our current leaders were involved   
 in these early activities, both inside and outside the SE  I. Long before I thought of leaving IBM   
 and joining the SEI, I co-authored a paper on  s oftware  engineering education at IBM and   
 submitted it to one of th  ese early conferences , where it was published as part of the  Issues in    
 Software Engineering Education [2]  . Unfortunately, I did not have th  e opportunity to present    
 the paper, as the confer  ence was too close to my  wedding date!    
 As a consequence of thes  e early workshops, and work  at the SEI, the initial MSE  model   
 curriculum was develop  ed ,  and an MSE program  was started at Carnegie Mellon  University in   
 1990 that continues to this day. Needless to say, the program  has undergone changes in con  tent     
 and faculty since those ea  rly offerings. The initial  faculty included many ed  ucators who are still   
 teaching, some who have retired, and sadly, som  e who have passed on. The latter group   
 includes Norm Gibbs and Jim Tomayk  o.   
 The number of MSE programs grew rapidly, and du  ring these years the SEI developed and   
 distributed instructional materials in the form  of videotaped courses, curriculum modules, and   
 educational materials. M  any universities used  th  ese early materials as a springboard , whereas      
 others developed program s that were uniquely their own. Ov  er time, the various programs came    
 to reflect the specialti  es and emphases of their univ  ersities [4].    

 The number of conferences and  conference tracks also grew.   The ACM Spec  ial Interest    
 Group on Computer Science Education has long  sponso red a conference series (SI  GCSE) that     
 has contained software engineering content from  time to time. The series of Conferences on the   
 Teaching of Computing (CTC) in Irel and had a considerable amount of so  ftware engineering      
 content. More recently, the  ICSE conference has includ  ed a software engineering  education    
 track. The CSEE conference series also broadened  its focus to include train  ing and is now     
 known as the C onference  on  S oftware   Engineering E ducation and T raining (CSEET)  .      
 In the early 90s, the CSE  E became the catalyst for  a newsletter, the Forum for t  he   
 Advancement of Software Engineering Educa  tion (FASE). Over the years it provided informal   
 information to software engineering educators on a  periodic basis. It continues to provide   
 announcements and articles to its audience, whi  ch is worldwide. The editors included Keith   
 Pierce, Don Bagert, and the current editors, Barr  ie Thompson and Helen Edwards.     
   
 2.3. Industry/  u niv ersity    collaboration and the WGSEET    
   
 One of the hallmarks o  f the MSE program is that it wa  s aimed at software practi  tioners who   
 were already working  in the field. As a consequence, the SEI  started a continuing education    
 group to focus on the needs of practitioners. This g  roup initially worked on developing a set of   
 courses that were para  llel to the MSE courses [6] b  ut later branched out into  courses that were   
 unique to practitioners in the field but not necessa  rily part of a degree program. Some of these   
 co urses were also videotaped and distributed.  Train-the- trainer courses were of  fered so that in -      
 house trainers could deliver the courses to their practitioners.    
 Some years later, a working group for software eng  ineering education and training   
 (WGSEET) was f ormed under my leadership. This was an ad hoc group whose g  oal was to     
 advance software enginee  ring education. The WGSEE  T provided a forum for adv  ancing the   
 field and for tackling controversial issues in a friend  ly environment. It continued for a number   
 of years as a standalone group, publishing m  any useful papers and reports. Eventually it was   
 disbanded in favor of work under the umbrella of I  EEE CS.   
 It became clear that part of the agenda w  as to collaborate with industry  as well as influence it.     
 The early MSE   programs were among the roots of work in industry/university collabora  tion.   
 Many universities estab  lished i ndustry   a dvi  sory b oards  so t  hat their degree program  s could      
 remain relevant to their industry partners. These co  llaborations took many forms— join t     
 research, regular work sessions or meetings, and  the like. This provided an opportunity to study   
 these collaborations and try to figure out what m  ade them tick [3], [5]  , [7], [10], [1  4].   
 However, industry/university collaboration was nev  er a controversi al issue. It took  the    
 discussion of undergradu  ate degree programs in so  ftware engineering and the  idea of licensing   
 software professionals to  generate true controv  ersy! A joint committee wa  s formed by ACM   
 and IEEE Computer Society in 1993, to prom  ote softw are engineering as a profe  ssion. This    
 group was known as the Software Engineering C  oordinating Committee [8]  , which sponsored   
 development of the SWEBOK [9 ]. Once th  e SWEBOK was complete  d, some professionals saw    
 it as the basis for certif  ication programs, b ut others fea  red that it would become the basis for    
 licensing.   
 Licensing generated serious controversy am  ong thoughtful people that continues to this day.   
 Papers about licensing  generated a level of rhetor  ic that had not been seen befo  re [1 1], [12].    
 More scholarly article s  received fewe  r slings and arrows, but were  nevertheless controversia  l    
 [1 3]. Don Bagert was the s  ubject of much discussion  when he became the first li  censed     
 software engineer in the state of Texas. The discus  sion continues, and the future for licensing  is    
 unclear [ 20 ].      

 About the same time, undergraduate degree program  s in software engineering education   
 started to emerge, and a m  erger of the accrediting  bodies, CSAB and ABET, m  ade it possible   
 for them to be accredited. New curricula were de  veloped to suppo  rt a variety of computing    
 degree programs [1 8 ].    Un  iversities such as RI  T, under the leadership of M  ike Lutz, were   
 pioneers in offering the first undergraduate deg  rees in software engineering [21 ].    
 IEEE CS started to offer a c ertification  pr ogram that was initially based on  the SWEBOK       
 and has evolved to include  several levels of cert  ification [1  9].    
   
 2.4. Delivery mechanisms   
   
 Distance learning became a popular concept  [15 ], as well as the establishm  ent of branch    
 locations among universities. G loba  lization became a buzz  word as universities tried to outdo     
 each other in the number of farflung locations tha  t they supported.   
   
 3. The present    
   
 The CSEET has evolved to include the ASEET  , the Academy for Software Engineering    
 Educat ors & Trainer  s . This i  s a wonderful addition to the conference, and  supports the idea of      
 mentoring as a way of gro  wing the skills that are nee  ded for professional softw  are engineering   
 education. It is truly an exciting development.    
 The conference itself has  evolved from an SEI  offering to an IEEE-sponsored conference.    
 One bold move in the early days was to mov  e the conference out of Pittsburgh. After many     
 years in Pittsburgh, our first venture to another loca  tion was the conference in San Diego.   
 Another bold move was to start to hold the conference  in international locations. Many of the   
 early pioneers on the CSEE  T Steering Committee have been succeeded by dynam  ic young    
 educato rs. This is all to the good.     
 New degree program  s are springing up all the time. F  or example, at Carneg ie Mel  lon, there    
 are now a number of international locations that  are offering unique degree programs, including   
 Australia, Greece, Japan, Portugal, and Qatar [1  7] . We continue to define new  degree programs,      
 such as the new Master’s  degree program in Softwa  re Engineering Managem  ent, the MSIT -    
 SEM.    
 Distance delivery v  ia a variety of mechanisms is rou  tine. Creative program  s allow working   
 students almost anyw  here to complete many, and in  some cases all ,  of their d  egree requirements   
 at a distance.    
   
 4. The future    
   
 Although it’s interesting to reflect on the past, we d  on’t want to get stuck there. Nor do we   
 want to become complacent in the present. Chang  e is happening all around us and we need to   
 adjust to and motivate ch  ange. Here are some possib  le indicators of f uture trends:     
 • At our last conference, Dave Parnas  [1 6  ] said that he has come to think that may  be          
 there are three types of d  egree programs :  computer sc  ience for researchers, software    
 engineering for engineers developing m  ission- critical systems, and sof  tware    
 professional degrees for practitioners developing non-  critical systems.     
 • The trend toward globalization is here to stay. We will continue to see cre  ative      
 evolution of delivery mechanisms. We can  also expect to see multicultur  al teams and    
 offshoring. O f c  ourse the meaning of the term  offshoring depends on where you are   
 located.   

 • Offerings such as the A  SEET will help to develop a n  ew generation of software     
 engineering educators. Conferences, working g  roups, and committees will evolve.   
 Electronic publishing is becoming much more comm  on, as are video conferences and    
 webcasts.    
 • Professionalism continues to be a hot topic, an  d it’s still unpredictable whether     
 licensing or certificat  ion will become a major trend  in the future.    
 • New specializations w  ill emerge. For  example, s  oftware secu  rity and software     
 assurance have becom  e big concerns for many of us,  and these as well as other  new     
 directions will result in cha  nge .     
 Our challenge is to be cha  nge agents and to motiv  ate the next generation of so  ftware   
 engineers and software engineering educa  tors. It won’t be easy, but it will be fun!     
   
 5. References    
   
 [1] R. C. Linger,  H. D. Mills,    and B. I. Witt  , Structured  Pr  ogramming: Theory  and Practice . Reading, MA  :           
 Addison -  Wesley  , 1979.     
 [2] N. Hall and J. Miklos, “ Fo  rmal e ducati on within the   s oftware l ife c         ycle , ” in  Issues in Software Eng . Ed.  (Proc    .      
 1987 SEI Conf.  on Software Eng  . Ed.) , Monroeville, P A     , 1987 . New York:   Springe  r - Verlag, 198  9.      
 [3] N. R. Mead, “ Industry-u niversity p artnerships: The  w ave of the  f  uture? ” in Proc. 4th     Annu.  C  onf .  Teaching of            
 Computing , Dubli  n, 1996 .     
 [4] http://ieeexplor  e.ieee.org/iel  5/10731/33854/0  1612026.pdf      
 [5] N. R. Mead, K. Beckman, N.  Coulter, and S. Khajenoori,  “ Industry  /u niversity c  ollaboration: Closing the g ap          
 b etween i   ndustry and  a  cademia  ,” IE EE Software    ,  v  ol. 14,  n  o. 6,  pp. 49–  57,  Nov  .-  Dec  .  1997.     
 [6] N. R. Mead and P. Lawlis, “ So  ftware e ngineering: G  raduate -l evel  c  ourses for A  FIT p  rofessional  c ontinuin  g           
 e ducation , ” in    5 th SEI Conf  . Software Eng  . Ed  . New York: Springer -  Verlag,  1991.            
 [7] K. Beck  man, J. Lawrence, G. O’Mary, C. Parish, P. U  npingco, and H. Walker, “ Industry  /university      
 collaborations:  different pe  rspectives heig  hten mutual opport  unities , “ CrossTalk  ,    vol. 13, no. 3,  pp. 1  0 – 15,     
 Mar . 2000.      
 [8] http://computer.org/tab/swecc.htm      
 [9] http   ://www.swebo  k.org/overview  /    
 [10] N.R. Mead, H. J. C. Ellis, A. More  no, and P. MacNeil, “ Can i ndustry  and a cademia  c ollaborate to  m eet the          
 n eed for  s  oftware  e  ngineers  ?”   Cutter IT Journal  , vol. 14,  no. 6, pp. 32– 39, June 2  001.      
 [11] N. R. Mead, “ Issues in li censing and  c ertification of  s   oftware e  ngineers    ,”   in Proc. 10 th Conf  . Software Eng. Ed  .        
 and Training , Virginia Beach, VA , 1997  , pp. 150 –  160 .         
 [12] N. R. Mead, “ Are  w   e g oing to  f ish or  c ut b     ait? Licensing and c ertification of  s  oftware p rofessiona  ls ,” Cutter IT           
 J. ,  v ol. 11,  n o. 5, pp. 4  -8 , May  1998 .      
 [13] N. R. Mead and A. J. Turner, “ Current a ccreditation,  c ertification, and  l icensure  a ctivities  r elated to  s oftware        
 e ngineering ,”  Ann  als of Software Eng.  , v ol. 6,    pp. 167 – 180, 1998  .         
 [14]  “ Industrial Input to t  he Computing Curr  iculum, ” in Effective Learning and      Teaching in Computin  g , A . Irons         
 and S.  Alexander, Eds. New York, NY : Routledge Falmer, 200  4, pp. 123 –  135.          
 [15]  N. R. Mead,  “ Distance l earning: Lessons  l  earned    ,” in   5 th Annu  . Conf  .  Teaching of Comp  uting , Dubl in, 1997.          
 [16] http://csdl2.com  puter.org/persag  en/DLAbsToc.j  sp?resourcePath=/  dl/proceeding  s/&toc=comp/pr  oceedings      
 /cseet/2007/2  893/00/2893toc.  xml&DOI=10.1109/C  SEET.2007.43     
 [17] http://www.cmu.edu/global/flash/index.html      
 [18] Joint Taskforce  for Computing Curri  cula (2004), Sof  tware engineer  ing 2004, curricul  ar guidelines f  or      
 undergraduate  programs in softw  are engineering ,  New York, NY : ACM/IEEE, 2004.        
 [19] http://www2.com  puter.org/portal/  web/certifica  tion/about      
 [20] http://www.nspe.or  g/PEmagazine/  pe_1207_Sof tware_License.html       
 [21] http://tab.computer.org/fase/fase - archiv  e/v6/v6n14.txt         

 Citations (58)  

  References (27)  

 ... For the occupation of software engineering, skills and experience are more important than formal educational degrees. As a result, some software engineers have higher education, while others are autodidacts or learned through other means, for example, by attending boot camps (Burke et al., 2018;Marasco et al., 2022; Mead, 2009  ). This status inconsistency further underlines the unusual position of software engineers in modern societies. ...   

 How ChatGPT shapes the future labour market situation of software engineers: A Finnish Delphi study    
   
 Article    
 Full-text available    
 Apr 2024 
  FUTURES 

 Kathrin Komp-Leukkunen 

 View     

 ... SEE has a long and illustrious history [16,  17], and undergraduate and/or graduate software engineering programs continue to proliferate globally. However, the issues pertaining to gender have to date been discussed rarely and peripherally [18], which is one of the motivations for this paper. ...   

 Small Educational Steps Towards Improving the Status of Women in Software Engineering    
   
 Conference Paper    
 Full-text available    
 Jun 2023 

 Pankaj Kamthan 
  Nazlie Shahmir 
    
 The women in software engineering continue to face a culture of discord that manifests itself in the form of underrepresentation, unpleasantness, and/or inequitableness. This somewhat dire situation was only exacerbated during the COVID-19 pandemic when the women in software engineering education and profession had to deal with multiple 'crisis'. The status quo is clearly unacceptable, not least because of pervasiveness of software in society. In that regard, relying on a multipronged approach grounded in a body of knowledge, ethicality, and history, this paper proposes certain basic steps in software engineering courses and projects that could be put into practice for improving "gender literacy" among students. These educational steps are illustrated by anecdotes and examples.    

 View     
 Show abstract      

 ... The changes in the nature of software engineering, especially in the understanding and practice of software engineering, changes in the software implementation and communication technology, machine-orientation to human-orientation, rise of smalland-medium-sized enterprises (SMEs), and industrialization, commoditization, and consumerization of software in different countries, have also led to commensurate changes in SEE (Maguire et al., 2019; Mead, 2009;  Shaw, 2000). ...   

 Educational Design Fictions: Imagining Learning Futures    
   
 Chapter    
 Aug 2022 

 Samuel Mann 
  Richard Douglas Mitchell 
  Phoebe Eden-Mann 
  Phil Osborne 
    
 Amidst social and technological changes, the changing nature of work, and in the face of global disruptions, we must consider how to forge education for an unknown future. We need tools for considering education futures in ways that allow for collective imaginings, explorations and conversations about the future and present shape of education. In design theory and practice, the approach of design futures provides a means for critically envisioning possible futures, not as predictions but as creative provocations—as imaginative near-futures that raise questions about direction, challenge understandings and provide a lens on the present. In this chapter we explore the potential for adopting the practice of design fiction writing in education, as “Educational Design Fictions”. We present a series of six Educational Design Fictions that showcase a range of narrative approaches, contexts and styles. We then—by way of a multivocal reflection—critically examine these stories for their potential in shaping discussion about education. We show that Educational Design Fictions prompt a shift in thinking from current trajectories, highlight a disjunction between possible worlds and the legacy of existing practices, and provide a new lens on the challenges and assumptions of the present. The Educational Design Fictions presented are not strict design fictions in terms of diegetic prototypes and are not exclusively in the future but rather succeed by evocatively defining possible worlds which lead conversation to different perspectives. In this chapter the “conversation” is through discussion between authors—who also reflect on the process of writing itself. We expect this chapter to be of interest to those who would see value in a generative method for informing and promoting discussion about the future direction of education.KeywordsDesignNarrativeStoryProvocationFutures    

 View     
 Show abstract      

 ... The association between personality characteristics and task selection is identified, and it also establishes the association of personality types with both prize money and deadlines; some personality characteristics were more attracted in choosing prize money than time limit while some were more interested in choosing tasks related to the timeline [31]. The individual personality type, which is a combination of four dimensions, as shown in Table 1, is classified based on the MBTI (Myers-Briggs Type Indicator) test, so there are 16 possible personality combinations shown in Table 2. To evaluate the personality characteristic of a crowd-based outsourced software development worker MBTI test of personality characteristics is used as an instrument, as it identifies the similarities between tasks according to personality characteristics [32], [33], [34]  , [35], [36], [37]. ...   

 Personality Characteristic-based Enhanced Software Testing Levels for Crowd Outsourcing Environment    
   
 Article    
 Sep 2021 
  KSII T INTERNET INF 

 Zainab Umair Kamangar 
  Isma Farah Siddiqui 
  Qasim Ali 
  Nawab Muhammad Faseeh Qureshi 
    
 Crowd-based outsourcing is an emerging trend in testing, which integrates advantages of crowd-based outsourcing in software testing. Open call format is used to accomplish various network tasks involving different types of testing levels and techniques at various places by software testers. Crowd-sourced software testing can lead to an improper testing process as if it does not allocate the right task to the right crowd with required skills and not choose the right crowd; it can lead to huge results, which become time-consuming and challenging crowd-source manager for the identification of improper one. The primary purpose of this research is to make crowd-based outsourced software testing more effective and reliable by relating association between the software tester, personality characteristic, and different levels of software testing, i.e., unit, integration, and system, in order to find appropriate personality characteristic for required testing level. This research has shown an observed experiment to determine which software testing level suits which personality characteristic tester in a crowd-based software testing environment. A total of 1000 software testers from different software houses and firms in Pakistan were registered to perform tasks at different software testing levels. The Myers-Briggs Type Indicator (MBTI) test is used to identify each tester's personality characteristic involved in this research study.    

 View     
 Show abstract      

 Systematic review of software project success criteria from future software practitioners’ perspective    
   
 Article    
 Full-text available    
 Jan 2024 

 Robert T. Hans 

 View     

 Online Software Engineering Graduate Program Case Study: Significant Student Engagement and Career Impact    
   
 Conference Paper    
 Mar 2023 

 Marcela Mera Trujillo 
  Yasser Alshehri 
  Dale Dzielski 
  Katerina Goseva-Popstojanova 

 View     

 A Framework for Analyzing and Comparing Software Projects in Academia and Industry    
   
 Chapter    
 Aug 2022 

 Pankaj Kamthan 
    
 The increasingly significant and indispensable role of software in society calls for ever more attention on its education. It is common for students graduating from computer science, software engineering, or similar programs to seek employment in industry. To be adequately prepared for a normal onboarding and transition from academia to industry, it is important for students to not only have theoretical as well as practical knowledge of software engineering state-of-the-art, but also an appreciation of and the necessary skills to successfully manage the technical as well as non-technical realities of the respective industry’s continually evolving heterogeneous ecosystem. The software projects provide means, in space as well as time, for such a preparation. In that regard, this chapter presents a brief history and evolution of software projects in software engineering education; based on conceptual modeling, professional experience, and international standards, provides an understanding of software projects in academia; using a detailed criteria, compares software projects in academia to those in industry, highlighting essential similarities as well as differences; presents a survey of undergraduate and graduate students’ experience in software projects; and provides recommendations in the direction of positive as well as negative learning for teachers and trainers involved in software projects.KeywordsAgile methodologyConceptual modelDevOpsProject-based learningSkillSoftware engineering education    

 View     
 Show abstract      

 Student Perception of Software Engineering Factors Supported by Machine Learning    
   
 Conference Paper    
 Oct 2021 

 Moritz Marutschke 
  Jeremy White 
  Uwe Serdült 
    
 Software engineering education requires training in project management techniques in combination with intercultural communication skills to cooperate effectively in today’s software development landscape. This poses a challenge to teach software engineering effectively in undergraduate courses for industry needs. International engineering study programs provide a unique opportunity to experience a software development process with participants from different cultures. For most students, English is not their native language, which reflects many distributed software engineering projects. This study surveyed 28 students from an international undergraduate engineering course in Japan on their perceived importance of software engineering factors and freeform text comments on their success, struggle, and critique within this course. A language model is trained using Word2Vec on the textual data to support the results of the perceived importance of software engineering factors.    

 View     
 Show abstract      

 Project-Based Learning in IT Education: Definitions and Qualities    
   
 Article    
 Full-text available    
 Jun 2018 

 Guttorm Sindre 
  Michail Giannakos 
  Birgit Rognebakke Krogstie 
  Trond Aalberg 

 View     

 Why Educators Need to Team with Industry Professionals in Software Development Education    
   
 Conference Paper    
 Jun 2018 

 Gregory Kulczycki 
  Steven Atkinson 

 View     

 Show more     

 Software Engineering Code of Ethics and Professional Practice    
   
 Article    
 Full-text available    
 Apr 2001 

 Donald Gotterbarn 
  Keith Willam Miller 
  Simon Rogerson 
  LH Werth 
    
 The Software Engineering Code of Ethics and Professional Practice, intended as a standard for teaching and practicing software engineering, documents the ethical and professional obligations of software engineers. The code should instruct practitioners about the standards society expects them to meet, about what their peers strive for, and about what to expect of one another. In addition, the code should also inform the public about the responsibilities that are important Co the profession. Adopted in 2000 by the IEEE Computer Society and the ACM-two leading international computing societies-the code of ethics is intended as a guide for members of the evolving software engineering profession. The code war; developed by a multinational task force with additional input from other professionals from industry, government posts, military installations, and educational professions.    

 View     
 Show abstract      

 Are we going to fish or cut bait? Licensing and certification of software professionals    
   
 Article    
 May 1998 

 Nancy R. Mead 

 View     

 Can Industry and Academia Collaborate to Meet the Need for Software Engineers?    
   
 Article    
 Jun 2001 

 Heidi Ellis 
  Nancy R. Mead 
  Ana M. Moreno 
  P.E. MacNeil 

 View     

 Formal Education within the Software Life Cycle    
   
 Conference Paper    
 Nov 1988 

 Nancy Hall 
  John Miklos 
    
 Approximately ten years ago, the Federal Systems Division of IBM initiated a software engineering program to train all software professions in current topics being taught in the leading universities. Thus began an extensive program that is still in operation today. Initial results demonstrated that the quality and reliability of the FSD software product was greatly enhanced. This paper describes the education program and documents some of the initial results that indicate the success of the education program.    

 View     
 Show abstract      

 Report on a conference sponsored by the NATO Science Committee    
   
 Article    
 Jan 1969 

 P. Naur 
  Brian Randell 

 View     

 Industry/university collaborations: Different perspectives heighten mutual opportunities    
   
 Article    
 Dec 1999 
  J SYST SOFTWARE 

 Nancy R. Mead 
  Kathy Beckman 
  Jimmy Lawrence 
  Hope Walker 
    
 In this paper, we present the results of a survey of formal industry/university collaborations. The purpose of these collaborations is to meet the software engineering education and training needs of adult learners through joint ventures such as graduate programs (degree and certificate) and professional development activities (customized classes, seminars, forums, and conferences). Members of the Software Engineering Institute (SEI) working group on software engineering education and training conducted the survey in 1997–1998. The working group drew on the extensive experience of industry and university collaboration participants to help answer practical questions about the benefits of collaboration, the collaboration process itself, successful collaboration administration and programming, and lessons learned. Survey results are being published as a service to the software engineering education and training community to assist organizations interested in forming a new collaboration or improving an existing collaboration.    

 View     
 Show abstract      

 Software Engineering: Graduate-Level Courses for AFIT Professional Continuing Education.    
   
 Conference Paper    
 Jan 1991 

 Nancy R. Mead 
  Patricia K. Lawlis 
    
 The Air Force has witnessed a shortage of qualified software engineering personnel, a dramatic increase in the use of software across all application areas, and an increasing complexity of systems subsequently requiring personnel to have higher software engineering skill levels. In addressing these issues, several Air Force commands worked with the Air Force Institute of Technology (AFIT) in developing a non-command-specific continuing education program in software engineering. The Software Engineering Institute (SEI) assisted Air Force personnel and AFIT faculty and staff in defining the curriculum and course content, and developing five graduate-level courses in AFIT's Professional Continuing Education program. The overall effort extended over a period of several years, from initial definition to the delivery of the first course(s). This paper describes the background and results of this unique collaborative effort, which included AFIT, the SEI, and SEI resident affiliates.    

 View     
 Show abstract      

 Structured Programming: Theory and Practice    
   
 Book    
 Jan 1979 

 Richard Linger 
  Harlan D. Mills 
  Bernard I. Witt 
    
 One of the more controversial topics to appear within the field of Computer Science has been the theory of Structured Programming and the specific tools and techniques associated with this generic title. With respect to this topic, it is the intent of this paper to provide a documented history of the research, prototyping and deliberate implementation of the Structured Programming Technology within the United States Army Computer Systems Command. Structured Programming as used within the context of this paper involves the concepts of structured code, top down development, walkthrus, program design language, design and documentation tools, program support library and a programming team. The USACSC experience is viewed as not just another case study but rather an organizational change impacting a large number (500 COBOL programmers) of personnel, standards, and normal operating procedures. One of the more intriguing topics to appear within the field of Computer Science has been the theory of Structured Programming and the specific tools and techniques associated with this generic title. After several years of discussion, pilot projects, technical articles and more discussions, the basic questions remain: What does the technology buy you? What does it cost you? How does one implement the technology on a large scale in a software production shop? With respect to these questions, and many others that the Software community shares regarding Structured Programming, it is the intent of this paper to provide a documented history of the research, prototyping and deliberate implementation of the Structured Programming Technology within the United States Army Computer Systems Command (USACSC).    

 View     
 Show abstract      

 Software Engineering Concepts    
   
 Book    
 Jan 1985 

 R.E. Fairley 

 View     

 Go To Statement Considered Harmful    
   
 Article    
 Mar 1968 

 Edsger W. Dijkstra 
    
 For a number of years I have been familiar with the observation that the quality of programmers is a decreasing function of the density of go to statements in the programs they produce. More recently I discovered why the use of the go to statement has such disastrous effects, and I became convinced that the go to statement should be abolished from all “higher level” programming languages (i.e. everything except, perhaps, plain machine code). At that time I did not attach too much importance to this discovery; I now submit my considerations for publication because in very recent discussions in which the subject turned up, I have been urged to do so.    

 View     
 Show abstract      

 Show more     

 Recommended publications  
   
 Discover more about: Software Engineering    

 Conference Paper    
   
 Software Engineering Education: How Far We've Come and How Far We Have to Go   
 May 2008  · Software Engineering Education Conference, Proceedings    
 Nancy R. Mead 
  In this talk wepsilall trace the history of software engineering education and focus on some of the key players. Although the time has gone by quickly, it is more than 20 years since the first CSEE was held, and there have been many changes. Wepsilall highlight the work that we have accomplished in the areas of degree programs and curricula, conferences and working groups, professionalism, ... [Show full abstract]  certification, and industry-university collaboration. Wepsilall also look at the challenges that lie ahead-the global reach of education, new delivery mechanisms, new professional efforts, and the need for us to engage in leadership in software engineering education. What new approaches should we be considering? How can we maintain our vitality? How can we best nurture new educators and encourage others to join our profession?    
 Read more    

 Article    
   
 Half a Century of Software Engineering Education: The CMU Exemplar   
 July 2018  · IEEE Software    
 Nancy R. Mead 
  David Garlan 
  Mary Shaw 
  From the aspirational title of the 1968 NATO conference,1 software engineering has evolved to a well-defined engineering discipline with strong educational underpinnings. The supporting educational foundation has grown from a few courses in programming languages and data structures, evolving through structured programming, correctness formalisms, and state machine abstractions to full curricula ... [Show full abstract]  and degree programs. With this context in mind, we discuss the evolution of software engineering education and pedagogy, software engineering principles, and future needs, drawing specifically on our experience at Carnegie Mellon University. Reflecting on the software development profession today, we believe that formal software engineering education is needed at least as much as it was in earlier decades - but it must address the increasing diversity of the developer community, and it must be an education based on the enduring principles that will last a lifetime.    
 Read more    

 Article    
   
 An Incomplete History of Master of Software Engineering Programs in the United States   
 January 1970    
 Mark Ardis 
  This paper describes the major trends and events in the history of Master of Software Engineering programs. Productivity statistics are reported, and curricula are compared. Special attention is given to the pioneering role of some of the early programs, such as Wang Institute of Graduate Studies and Carnegie Mellon University.   
 Read more    

 Conference Paper    
   
 The Role Of Application Domain Tracks In Software Engineering Programs   
 June 2006    
 Donald J. Bagert 
  Read more    

 Last Updated: 22 Oct 2024    

 Interested in research on Software Engineering?   
 Join ResearchGate to discover and stay up-to-date with the latest research from leading experts in Software Engineering  and many other scientific topics.   

 Join for free     

 ResearchGate iOS App    
   
 Get it from the App Store now.   

 Install     

 Keep up with your stats and more   

 Access scientific knowledge from anywhere   

 or   
   
 Discover by subject area     

 Recruit researchers 
  Join for free 
  Login      Email   Tip:  Most researchers use their institutional email address as their ResearchGate login         Password  Forgot password?      Keep me logged in   Log in    or    Continue with Google                 
 Welcome back! Please log in.        Email · Hint  Tip:  Most researchers use their institutional email address as their ResearchGate login          Password   Forgot password?       Keep me logged in    Log in    or    Continue with Google       No account? Sign up 

 Company   
 About us    
 News    
 Careers    

 Support   
 Help Center    

 Business solutions   
 Advertising    
 Recruiting    

 © 2008-2024 ResearchGate GmbH. All rights reserved.   
   
 Terms 
  Privacy 
  Copyright 
  Imprint 
  Consent preferences