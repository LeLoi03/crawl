1  Introduction 
  2  Achievements in Automation | 2.1  Targeted Automation Activities | 2.1.1  Model Quality Management 
  2.1.2  Model-based execution 
  2.1.3  Model Transformations 
  2.1.4  Model Management 
  2.1.5  Modeling 
  2.2  Automation-Enabling Techniques | 2.2.1  Formal Methods 
  2.2.2  Search-based Techniques 
  2.2.3  Extensional and Intensional Knowledge 
  2.2.4  Artificial Intelligence 
  2.3  Mapping between Activities and Enabling Technologies 
  3  Perspectives and Challenges 
  4  Conclusion 

 The Past, Present, and Future of Automation  
  in Model-Driven Engineering  
 Lola Burgueño  0000-0002-7779-8810   ITIS Software, University of Malaga, Spain  Spain   lolaburgueno@uma.es     ,  Davide Di Ruscio  University of L’Aquila, Italy  Italy   davide.diruscio@univaq.it     ,  Houari Sahraoui  DIRO, Université de Montréal, Canada  Canada   sahraouh@iro.umontreal.ca     and  Manuel Wimmer  JKU Linz, Austria  Austria   manuel.wimmer@jku.at       
 Abstract.  
 Model-Driven Engineering (MDE) provides a huge body of knowledge of automation for many different engineering tasks, especially those involving transitioning from design to implementation. With the huge progress made on Artificial Intelligence (AI) techniques, questions arise for the future of MDE such as how existing MDE techniques and technologies can be improved or how other activities which currently lack dedicated support can also be automated. However, at the same time, it has to be revisited where and how models should be used to keep the engineers in the loop for creating, operating, and maintaining complex systems. To trigger dedicated research on these open points, we discuss the history of automation in MDE and present perspectives on how automation in MDE can be further improved and which obstacles have to be overcome in the medium and long term perspective.  
   
 †  †  conference:  International Workshop on Software Engineering in 2030; July 2024;    †  †  doi:     1.  Introduction  
 Bézivin coined the term Model-Driven Engineering (MDE) in 2005 as follows: “ MDE is a software engineering methodology which uses formal models, i.e., models which are machine-readable and processable, to semi-automatically produce executable software systems  ” (Bézivin, 2005  )  . The main idea behind formal models  is to provide abstractions of software systems to manage their complexity. Based on these abstractions, as they are machine-readable and even processable, automation techniques  are provided, e.g., to generate executable software (Schmidt, 2006  )  , which was the main focus 20 years ago in the pioneering phase of MDE. However, soon, other automation concerns emerged and have been studied, such as analysing models by transforming them into formal domains such as model checkers. Model-to-model transformations have been used for this purpose. For code generation, model-to-code transformations have been developed to automate the transition from design models to code-based implementations. To complete the picture, code-to-model transformations have been used for reverse engineering of existing software systems such as legacy systems. A comprehensive study on different transformation intents is provided in (Lúcio et al .  , 2016  )  .  
   
 For developing automation support in terms of transformations, major research efforts have been spent on developing model transformation languages as it has been soon realized that transformations are complex software systems themselves (Sendall and Kozaczynski, 2003  )  . In parallel, language engineering approaches based on metamodeling techniques have been emerging, which allow for the efficient and effective development of modeling languages and accompanying modeling tool support such as model editors, validators, and storage facilities (Atkinson and Kühne, 2003  )  . Having these infrastructures enabled the development of domain-specific modeling languages (DSMLs) (Chen et al .  , 2005  )  in addition to general-purpose modeling languages such as UML.  
   
 By having abstractions as models combined with automation support, the promise of MDE is to allow engineers to focus on the problem domain, i.e., which systems should be realized, rather than on the solution domain, i.e., how the system is realized. However, to realize this promise, several challenges have to be tackled as reported over the years in several papers. In (France and Rumpe, 2007  )  , the authors discuss challenges associated with modeling languages, e.g., how to engineer DSMLs, achieving separation of concerns to deal with complexity, and model manipulation/management mostly supported by transformations. In (Mussbacher et al .  , 2014  )  , the authors discuss how MDE may be used even beyond software, raising the need for interdisciplinary modeling support, e.g., for socio-technical systems. The latter requires model integration and consistency support as well as strong tool support. Finally, in a more recent work (Bucchiarone et al .  , 2020  )  , the authors discuss important aspects of MDE such as foundational, social, community, domain, and tool aspects. However, we are not aware of any report focusing explicitly on the automation aspect of MDE and how this aspect will develop towards 2030. It is important to close this gap as with the recent and expected advances of AI, the current automation techniques and technologies of MDE are highly impacted as well and new ones may be developed to support additional tasks in the software engineering process which are not targeted by existing technologies. Thus, a discussion on the role of models, MDE methodologies, and engineers in this new era is required to frame the potential future of MDE.  
   
 Important questions have to be answered, such as which phases can be additionally automated, e.g., should we directly go from natural language requirements to code, or is there still, especially because of the enhanced AI capabilities, a sweet spot for using models in such highly automated processes? Can we now ease and automate the modeling process itself and reach at the same time a higher automation degree in the synthesis process, such as code generation? These questions are important for the foundations of MDE, but at the same time, also for recent application areas such as low-code/no-code development (Ruscio et al .  , 2022  )  and digital twin engineering (Tao et al .  , 2018  )  .  
   
 In the following, we capture the achievements of automation in MDE by enumerating prominent engineering activities which have been in the focus of automation as well as the automation techniques which have been applied for achieving the automation. Based on this foundation, we lay out several challenges hindering further significant automation increases and conclude the paper with perspectives on tackling these challenges until 2030.  

 2.  Achievements in Automation  
 2.1.  Targeted Automation Activities  
 In this section, we categorize and discuss the activities that have been targeted for automation within the MDE field, organizing them according to the categories outlined in the contents for a Model-Based Software Engineering Body of Knowledge (Burgueño et al .  , 2019  )  .  
   
 2.1.1.  Model Quality Management  
 Significant efforts have been made to automate activities for finding defects, faults and failures in models and modeling processes. Numerous model validation and verification techniques exist that automate quality checks, such as correct syntax, semantics, structure, behaviour, etc., of models to ensure that any inconsistencies or errors are detected and rectified at the model level and as soon as possible. For instance, model checking has been automated through algorithms that check the temporal behaviour of a software or system model against certain properties or specifications, ensuring they meet specified requirements or constraints, and there are numerous languages and mature tools available (Holzmann, 2004  ; Bengtsson et al .  , 1995  ; Kwiatkowska et al .  , 2011  )  .  
   
 Automated testing techniques based on models (a.k.a. model-based testing) have been developed, too, where models are used to generate test cases automatically (e.g., (Pretschner et al .  , 2005  )  ). Traditionally, this method has helped identify potential problems early in the development process, significantly reducing cost and effort in the testing phase. Moreover, in recent years, model-based testing automation has gained relevance due to the rise of digital twins (Bickford et al .  , 2020  )  , which impose the need for streamlining testing, and the adoption of new development methodologies such as agile, continuous development, integration and delivery (Jongeling et al .  , 2019  )  where the process of executing test cases and analyzing the results, often in a continuous integration / continuous deployment (CI/CD) pipeline that needs to be automated.  

 2.1.2.  Model-based execution  
 For testing, debugging or analysis, executable models and simulation facilities are necessary. Regarding executable models (Kleppe et al .  , 2003  )  , executable UML models are popular, which usually use an action language to define the behaviour of the system (e.g., the Alf Action Language (alf, 2017  )  , SOIL (Schäfer and Gogolla, 2020  )  , or FUML 1  1  1  https://www.omg.org/spec/FUML     ).  
   
 Over the years, the automation of model-based execution, simulation, and co-simulation has seen numerous advancements, moving from manual processes that required human intervention—e.g., to set up simulations and adjust parameters based on expert knowledge and observations—to highly automated processes and tools. For instance, there has been the standardization of an Action Language as part of the OMG UML Specification for the execution of UML models (alf, 2017  )  and tools for simulation such as Modelica 2  2  2  https://modelica.org     , which are widely used by system engineers. There is also available a series of interpreters for modeling languages, both graphical and textual, many of them fully integrated into modeling environments, e.g., see (Gogolla et al .  , 2007  )  .  
   
 Furthermore, there have been efforts to come up with model execution support by developing dedicated interpreters for domain-specific modeling languages, e.g., see initiatives such as GeMOC (Globalization of Modeling Languages) 3  3  3  https://gemoc.org     focusing on the development of technologies and methodologies to generate dedicated execution \hyp  oriented tools for models such as model testing and debugging capabilities based on the defined operational semantics of the modeling languages.  

 2.1.3.  Model Transformations  
 Model transformations constitute a fundamental aspect of MDE and serve as the backbone for automating the transition from high-level abstractions to executable code, simulations, or other models. They can be classified into Model-to-model transformations (M2M), Model-to-text (M2T) transformations, and Text-to-model (T2M) transformations (Kleppe et al .  , 2003  )  . M2M transformations are perhaps the most exploited automation and automated activity in MDE, where, among other uses, models are automatically transformed into executable code in various programming languages. M2T transformations provide the ability to autogenerate code from models, contributing significantly to software development automation. The models serve as the primary artifact; from them, code, documentation or other textual artifacts (such as JSON files) are generated automatically (Klein, 2015  )  . T2M transformations are used for reverse-engineering code into models as well as other purposes such as documentation generation (Wang et al .  , 2010  )  .  
   
 At the same time that model transformations have enabled and pushed forward automation in software engineering, they have also been the target of automation. This automation leverages specific languages, execution engines, tools, and frameworks, as described below. One of the primary means of automating model transformations is through dedicated transformation languages. These languages provide constructs tailored to describe how model elements must be mapped to their equivalent elements. Examples of such languages include ATL (Jouault et al .  , 2008  )  , QVT (OMG, 2005  )  , ETL (Kolovos et al .  , 2008  )  , and Henshin (Arendt et al .  , 2010  )  to name just a few—for a survey see (Kahani et al .  , 2019  )  .  
   
 Transformation engines 4  4  4  https://projects.eclipse.org/projects/modeling.mmt.qvt-oml     5  5  5  https://wiki.eclipse.org/ATL/EMFTVM     (Burgueño et al .  , 2016  ; Cuadrado et al .  , 2022  ; Tisi et al .  , 2013  )  are specialized software components that execute the transformation rules defined in a transformation language against source models to generate target models. These engines manage the complexities of navigating model structures, applying transformation rules, resolving dependencies, and ensuring the integrity of the generated models. Transformation engines can be standalone tools or integrated into broader MDE platforms, providing a seamless experience from model editing through to transformation.  
   
 For automation to be truly effective, model transformations must be well-integrated with the software development environment. This includes providing user-friendly interfaces for defining and managing transformations. Such integration enables developers to incorporate model transformations seamlessly into their workflows, automating repetitive tasks, and facilitating more agile and iterative development processes. Some efforts include the Epsilon Playground (Kolovos and García-Domínguez, 2022  )  and AToMPM (Syriani et al .  , 2013  )  among others.  

 2.1.4.  Model Management  
 Model management involves different activities, which we discuss in the following. Automated model evolution  involves strategies for evolving models to reflect changes in requirements or design. Automation can be achieved through predefined transformation rules or templates that apply changes across models, ensuring consistency and reducing manual effort. Languages such as those that conform to Epsilon (Kolovos and García-Domínguez, 2022  )  or ATL (Jouault et al .  , 2008  )  support automated transformations that facilitate model evolution.  
   
 When metamodels evolve, models that conform to those metamodels may become invalid and need to be adapted to remain consistent with the new version of the metamodel (Herrmannsdoerfer and Ratiu, 2009  )  . Automated model migration  is needed to update models. So far, this has been achieved in numerous ways, for instance, by means of model transformations (Sprinkle and Karsai, 2004  ; Ruscio et al .  , 2012  )  or with dedicated languages such as Epsilon Flock (Rose et al .  , 2014  )  .  
   
 Maintaining models  to ensure their accuracy and relevance over time can be automated through continuous integration tools that integrate model changes, run automated validations, and report inconsistencies or errors. Automated testing frameworks for models also contribute to maintenance by ensuring that model updates do not break existing functionalities.  
   
 Since models are software artifacts, version control systems are beneficial to keep up with current development needs. Given the different nature of models w.r.t. code, approaches to deal with models are needed. For instance, EMFStore (Koegel and Helming, 2010  )  or Connected Data Objects (CDO) 6  6  6  https://www.eclipse.org/cdo     provide automated support for model versioning  .  
   
 Automated model diffing tools  compare and identify differences between model versions. EMF Compare 7  7  7  https://eclipse.dev/emf/compare     is an example of a tool that provides automated support for model comparison, highlighting differences and conflicts within models developed using EMF (Eclipse Modeling Framework) 8  8  8  https://eclipse.dev/modeling/emf     .  
   
 Merging model  changes, especially in collaborative environments or when reconciling parallel development efforts, require sophisticated automation to handle conflicts and ensure model integrity. Tools like EMF Compare 9  9  9  https://eclipse.dev/emf/compare     also support automated model merging by providing strategies and user interfaces to resolve conflicts and integrate changes from different model versions seamlessly.  
   
 Refactoring models  is the process of restructuring the model while not modifying its original functionality or behaviour. This process can be automated using model transformation languages and refactoring libraries. Tools and frameworks, such as Epsilon (Kolovos and García-Domínguez, 2022  )  or EMF Refactor (Arendt and Taentzer, 2012  )  ,provide automated support for model refactoring.  

 2.1.5.  Modeling  
 Last but not least, the task of modeling itself, i.e., creating models as abstractions of software and systems, has also been the target of automation. In particular, specific efforts have been put into approaches for model generation (Saini et al .  , 2022  )  , model search (López and Cuadrado, 2020  )  , model completion (Chaaben et al .  , 2023  )  and model classification (Nguyen et al .  , 2019  )  . Among other efforts, a long-lasting line of work to automate the execution of models has been heavily addressed by researchers working on models@runtime (Bencomo et al .  , 2019  )  , where the models of a system need to be up-to-date while the system is running at the same time that is used to adapt the runtime behaviour.  

 2.2.  Automation-Enabling Techniques  
 From the very beginnings of MDE, automation emerged as a fundamental pillar. Numerous works have employed direct approaches based on heuristics to automate or semi-automate certain activities directly on the models’ representations. Other works have relied on established automation technologies to achieve this automation. In the remainder of this section, we discuss four families of these technologies: formal methods  , search-based techniques  , extensional and intensional knowledge engineering approaches  , and artificial intelligence  .  
   
 2.2.1.  Formal Methods  
 Due to their rigor and precision, formal methods have been utilized for specifying, analyzing, and verifying various artifacts in MDE. The literature is abundant with contributions on the application of formal methods for automating various MDE tasks. However, we limit ourselves to a few examples of their most common uses.  
   
 The first family of applications targets the analysis and verification of UML models. This involves techniques such as model checking (Hilken et al .  , 2018  )  , constraint satisfaction problem solving (Ehrig et al .  , 2009  )  , Boolean satisfiability (Soeken et al .  , 2010  )  , and rewriting logic (Durán, 2022  )  . Another family of application of formal methods concerns the generation of models for metamodel or transformation testing. Here again, a variety of techniques have been explored, including typed graph transformation (Anastasakis et al .  , 2010  )  , equivalence partitioning (Cabot et al .  , 2007  )  , and satisfiability modulo theories (Semeráth et al .  , 2020  )  , to name a few. A third noteworthy family, although few works have covered it, is model completion. Its automation is achieved, for example, through first-order logic using Alloy (Sen et al .  , 2010  )  . Formal methods have also been applied to define the operational semantics of modeling languages, e.g., by using Maude and graph transformations (Rivera et al .  , 2009a  ; Engels et al .  , 2000  )  . Formal methods have also been employed for model versioning (Westfechtel, 2014  ; Taentzer et al .  , 2014  )  , including diffing and merging, which have been managed in terms of graph modifications and graph transformations.  

 2.2.2.  Search-based Techniques  
 These techniques have emerged as valuable tools for automating various activities of MDE. This line of research views the automation of many MDE tasks as optimization problems, which can be effectively tackled using search-based methods (Boussaïd et al .  , 2017  )  . One of the earliest applications of this concept was in the domain of model transformations, particularly using examples of input-output models. Researchers utilized search-based techniques for model diffing based on refactoring detection (Kessentini et al .  , 2017  )  , model merging (Mansoor et al .  , 2015  )  , and to perform model transformations (Kessentini et al .  , 2008  )  and even to learn transformation rules (Faunes et al .  , 2013  ; Baki and Sahraoui, 2016  )  .  
   
 Moreover, search-based techniques have been instrumental in generating test suites to validate these transformations. Test cases, often in the form of input-output models, are generated to ensure the correctness of the transformations (Jilani et al .  , 2014  )  . Additionally, model samples play a crucial role in testing metamodels. Search-based techniques have been employed to either generate those model samples (Gómez et al .  , 2012  )  or to perform model selection (Batot and Sahraoui, 2016  )  to ensure the robustness and effectiveness of metamodels. In cases where metamodel descriptions lack well-formedness rules, these rules can be recovered from examples of both valid and invalid models. Genetic programming techniques have been utilized for this purpose, aiding in the refinement of metamodels (Batot and Sahraoui, 2022  )  .  
   
 Another significant application of search-based techniques in MDE is the repair of modeling artifacts. The evolution of metamodels can invalidate many associated artifacts due to their dependency on the type systems defined within the metamodels. Evolutionary algorithms have been employed to repair models (Kessentini and Alizadeh, 2022  )  , OCL constraints (Batot et al .  , 2017  )  , and model transformations (Kessentini et al .  , 2018a  )  . Similarly and independently from the evolution, search-based approaches have been used to repair errors in MDE artifacts such as transformations (VaraminyBahnemiry et al .  , 2021  )  .  
   
 In the realm of design space exploration (DSE), where finding the best design instance for a given problem is challenging, search-based techniques have proven invaluable. DSE, framed as an optimization problem, involves exploring alternative models to identify those that meet specific criteria (Abdeen et al .  , 2014  )  .  
   
 The relation between MDE and search-based techniques is also a tale of cross-fertilization. Indeed, MDE contributed to enriching search techniques through improved encoding of optimization problems and their subsequent resolution, e.g., (Denil et al .  , 2014  ; Burdusel et al .  , 2018  ; John et al .  , 2023  ; Bill et al .  , 2019  )  .  

 2.2.3.  Extensional and Intensional Knowledge  
 The automation or semi-automation of a task requires knowledge that can be operationalized through software tools. This knowledge may include elements that enable the direct execution of the task. It can also be exploited within a complex automation process. In the context of MDE, knowledge often appears extensionally in some kind of repositories, particularly in the form of sets of artifacts such as models (Robles et al .  , 2017  )  or transformations 10  10  10  https://eclipse.dev/atl/atlTransformations     . It can also be intentionally represented, typically through ontologies.  
   
 Among the artifacts within MDE, model sets have been extensively leveraged to provide support in modeling tasks. These collections of models are employed via search engines to propose models or model fragments aligning with specific criteria articulated by modelers, either in textual or pre-defined partial model forms (Bislimovska et al .  , 2014  ; López and Cuadrado, 2022  ; Basciani et al .  , 2018a  )  .  
   
 The alternative category of knowledge, termed intensional, integrated into MDE task automation, encompasses ontologies. These structures provide organized descriptions of real-world objects, which can be utilized for crafting domain-specific languages or models (Staab et al .  , 2010  )  . Due to their inherent semantics, ontologies also serve in model verification and debugging processes (Mokos et al .  , 2010  ; Walter et al .  , 2014  )  , or for model matching (Kappel et al .  , 2006  )  . Additionally, ontologies can be harnessed through design patterns to automate the creation of meta-models or models (Atkinson and Kühne, 2003  ; Pescador and de Lara, 2016  )  .  
   
 Lastly, the integration of extensional and intensional knowledge can enhance automation efforts. For instance, ontologies can streamline search requests and responses within model repositories (Robles et al .  , 2012  )  .  

 2.2.4.  Artificial Intelligence  
 Like many other disciplines, AI has been extensively used as an automation technology for MDE. From the early days of MDE until now, rule-based systems have been employed to automate model transformations, utilizing either general-purpose rule languages such as NéOpus (Revault et al .  , 1995  )  or specifically dedicated ones like ATL (Jouault et al .  , 2008  )  . Soon after, the notion of supporting modelers in writing transformation rules emerged. In this regard, machine learning techniques were applied to derive transformation rules from examples using supervised learning (Varró and Balogh, 2007  )  or unsupervised learning (Dolques et al .  , 2009  )  .  
   
 More recently, with advancements in machine learning research, considerable effort has been dedicated to assisting in metamodeling and modeling activities. This includes the utilization of techniques such as GNNs (Di Rocco et al .  , 2021  )  and LSTM (Weyssow et al .  , 2022  )  . Furthermore, research has been focused on model transformations using reinforcement learning (Eisenberg et al .  , 2021  )  and LSTM architectures (Burgueño et al .  , 2022  )  . Various machine learning algorithms have also been applied for metamodel classification (Nguyen et al .  , 2019  )  and model classification (López et al .  , 2022  )  , as well as for model repair (Barriga et al .  , 2022  )  and model generation (López et al .  , 2022  )  . However, these initiatives often face challenges due to the difficulty of training machine learning models, particularly given the scarcity of data.  
   
 The remarkable power of LLMs has partially alleviated this problem. Thus, it became possible to automate several modeling tasks with little or no training data. However, the effectiveness of using LLMs for this purpose varies, as Camara et al. (Cámara et al .  , 2023  )  highlight. Ben Chaaben et al. explored the application of LLMs for static and dynamic domain-model completion (Chaaben et al .  , 2023  )  . Model generation with LLMs has also garnered significant interest among researchers, encompassing diverse model types such as goal models (Chen et al .  , 2023a  )  and static domain models (Chen et al .  , 2023b  )  .  

 2.3.  Mapping between Activities and Enabling Technologies  
 The aim of this subsection is to present a mapping between the previously presented modeling activities and the enabling technologies. This mapping does not intend to be exhaustive by any means but wants to present illustrative examples. Table 1   11  11  11  Since a metamodel is a model (in particular, a model of a model), some of these activities apply to both models and metamodels. For the sake of brevity, we only refer to models.    shows activities in its rows and technologies in its columns (the column “Direct” contains examples of approaches providing automation support directly for the model representations without moving to an already existing automation space). Each cell contains a maximum of two exemplary works, appended with a ‘+’ if the state of the art is more extensive and includes further works. Cells with only one work mean that we could not find more examples for that activity and technology. Empty cells mean that we could not find any example.  

 Activities | Enabling Technologies 
 Direct | Formal Methods | Know. Eng. | Traditional AI * | Search Techniques | Deep Learning ** | LLMs 
 Model quality management | Analysis / Verification | (Basciani et al .  , 2019  ; Ma et al .  , 2013  )  + | (Gogolla et al .  , 2018  ; Rivera et al .  , 2009a  )  + | (Mokos et al .  , 2010  ) | (Barriga et al .  , 2022  ; Wenz et al .  , 2021  )  + |  
 Testing / Debugging | (Popoola et al .  , 2016  ; Bagherzadeh et al .  , 2017  )  + | (Hilken et al .  , 2018  ; Babikian et al .  , 2022  )  + | (Walter et al .  , 2014  ) | (Batot and Sahraoui, 2016  ; Gómez et al .  , 2012  )  + | (Rahimi et al .  , 2023  ; López and Cuadrado, 2023  )  + |  
 Model transformations | (Cuadrado et al .  , 2022  ; Biermann et al .  , 2006  )  + | (Biermann et al .  , 2008  ; Gammaitoni and Kelsen, 2019  )  + | (Roser and Bauer, 2005  ; Kappel et al .  , 2006  )  + | (Eisenberg et al .  , 2021  ) | (Kessentini et al .  , 2008  ; Baki and Sahraoui, 2016  )  + | (Burgueño et al .  , 2022  ; Lano and Xue, 2023  ) |  
 Model based execution | (Muller et al .  , 2005  ; Combemale et al .  , 2017  )  + | (Rivera et al .  , 2009a  ; Engels et al .  , 2000  )  + |  
 Model management | Model (co-)evolution | Model (co-)evolution | (Ruscio et al .  , 2012  ; Herrmannsdoerfer, 2011  )  + | (Taentzer et al .  , 2012  ; Levendovszky et al .  , 2014  )  + | (Kessentini et al .  , 2018b  ; Kessentini and Alizadeh, 2022  )  + |  
 Model (co-)evolution 
 Model migration and maintenance | Model migration and maintenance | (Rose et al .  , 2014  ; Herrmannsdoerfer and Ratiu, 2009  )  + | (Giese and Wagner, 2006  ) | (Barriga et al .  , 2020  ) |  
 Model migration and maintenance 
 Model versioning / diff / merge | Model versioning / diff / merge | (Koegel et al .  , 2010  ; Brun and Pierantonio, 2008  )  + | (Westfechtel, 2014  ; Taentzer et al .  , 2014  )  + | (Kappel et al .  , 2006  ) | (Kessentini et al .  , 2017  ; Mansoor et al .  , 2015  )  + |  
 Model versioning / diff / merge 
 Model refactoring | Model refactoring | (Sunyé et al .  , 2001  ; Porres, 2003  )  + | (Mens, 2005  ; Biermann et al .  , 2006  )  + | (Mokaddem et al .  , 2018  ; Ghannem et al .  , 2018  )  + |  
 Model refactoring 
 Modeling | Model generation | Model generation | (Gómez-Abajo et al .  , 2016  ; Brottier et al .  , 2006  )  + | (Babikian et al .  , 2020  ; Schneider et al .  , 2017  )  + | (López et al .  , 2022  ) | (Jilani et al .  , 2014  ; Abdeen et al .  , 2014  )  + | (Chen et al .  , 2023b  , a  ) 
 Model generation 
 Model search | Model search | (Lucrédio et al .  , 2008  ; Basciani et al .  , 2018b  )  + |  
 Model search 
 Model completion | Model completion | (Kuschke et al .  , 2013  ; Born et al .  , 2008  )  + | (Sen et al .  , 2010  ; Steimann and Ulke, 2013  )  + | (Bislimovska et al .  , 2014  ; López and Cuadrado, 2022  )  + | (Nechypurenko et al .  , 2007  ) | (Di Rocco et al .  , 2021  ) | (Chaaben et al .  , 2023  ) 
 Model completion 
 Models at runtime | Models at runtime | (Bencomo et al .  , 2008  ; Fouquet et al .  , 2012  )  + | (Búr et al .  , 2018  ; Sakizloglou et al .  , 2022  )  + | (Bencomo et al .  , 2013  ; Hartmann et al .  , 2019  )  + | (Kinneer et al .  , 2021  ; Eisenberg et al .  , 2022  ) |  
 Models at runtime 
 Model classification | Model classification | (Rubei et al .  , 2021  ; Basciani et al .  , 2016  )  + | (Nguyen et al .  , 2019  ) | (Nguyen et al .  , 2021  ) |  
 Model classification 

 * | Excluding Search-based Techniques 
  ** | Excluding LLMs 

 Table 1.  Overview of MDE activities and enabling technologies.   Table 1   12  12  12  The table is inevitably nonexhaustive and merely intended to reflect the kinds of activities and supporting approaches available.    gives a partial summary of how automation-enabling technologies have been used for various MDE tasks. As we can see, a range of techniques, including direct programming, formal methods, and search methodologies have been extensively employed to automate various MDE tasks. To a lesser extent, the MDE community have leveraged, on the one hand, model sets and ontologies and, on the other hand, other AI techniques to automate some distinct activities. On another note, in recent years, there has been a surge in interest and adoption of deep learning-based approaches for MDE, albeit their widespread use has been hindered by the scarcity of large-scale datasets for model training or refinement.  
   
 The utilization of Language Model-based systems and other cutting \hyp  edge technologies in this realm is still in its nascent stages. To date, the primary focus has been on model generation and completion tasks within MDE workflows. Nonetheless, this landscape presents numerous untapped research avenues for further exploration and refinement of deep learning approaches in MDE.  
   
 To capitalize on these opportunities, there is a pressing need to prioritize the creation of expansive datasets tailored specifically for MDE tasks, as highlighted in Section 3   . By doing so, researchers and practitioners can unlock the full potential of deep learning methodologies in automating and enhancing various tasks of MDE.  
   
 Looking ahead, LLMs are poised to become a pivotal research domain in automating MDE tasks. However, their application extends beyond mere model generation or completion tasks. There exists a vast scope for creative exploration and utilization of LLMs in diverse MDE activities, heralding a new era of innovation and efficiency in software engineering practices.  

 3.  Perspectives and Challenges  
 Building upon the introductory concepts discussed earlier, this section provides an overview of perspective topics that hold significance in the medium to long term for automation in MDE. We foresee a vast potential for automation within MDE, driven by advancements in AI, particularly in generative AI and LLMs. In exploring the future prospects of MDE and its automation possibilities, it is crucial to acknowledge the challenges ahead. Challenges include integrating automation tools, ensuring compatibility, and maintaining interoperability among diverse modeling languages and environments. Additionally, developing intuitive modeling tools and addressing ethical considerations in interdisciplinary domains pose significant problems to be investigated, as discussed below. The distinction between perspectives and challenges may not always be clear-cut and may overlap. While discussing envisioned advancements, we see some of them as potential obstacles for automation that must be overcome.  
   
 Management of ever-increasing diversity of languages and tools:  MDE has seen a proliferation of domain-specific modeling languages and tools, which has led to a diverse range of technologies. However, this diversity has posed challenges for generic  automation as each modeling language has its own syntax, semantics, and transformation rules. Despite efforts to standardize syntax, the MDE field still needs comprehensive standards, especially concerning semantics, transformation rules, and model interchange formats. Moreover, the rise of low-code/no-code platforms makes this issue even more difficult as adherence to existing standards becomes increasingly sporadic. Thus, it is imperative to develop standardized interfaces, transformation mechanisms, and model interchange formats to ensure interoperability and tooling support across different formalisms, languages, and paradigms.  
   
 Combination of symbolic and non-symbolic AI  : Integrating symbolic AI techniques, such as logic reasoning and rule-based systems, with non-symbolic approaches, such as neural networks and deep learning, offers opportunities for enhancing automation in MDE. By leveraging the complementary strengths of both paradigms, researchers can develop hybrid AI systems that excel in tasks requiring both symbolic reasoning and pattern recognition. For example, combining symbolic reasoning with neural networks enables MDE tools to interpret and manipulate models based on logical constraints while leveraging the scalability and flexibility of neural networks for data-driven tasks or even exploiting generative AI tools to synthesize models that are domain or context-aware.  
   
 Emancipation from formal languages with LLMs  : Creating domain-specific modeling languages is a crucial undertaking that involves collaboration between different roles, including language and domain experts. This collaborative effort encompasses various steps, including developing concrete syntaxes, the definition of formal semantics, and the construction of supportive modeling environments. However, the language development process can be challenging, often necessitating refinement of language definitions to refine user requirements or address unforeseen ones. LLMs offer a promising option for the early evaluation of languages by specifying their semantics in natural language and facilitating early analysis and stakeholder interactions to validate whether the language aligns with user requirements.  
   
 Template-based code generation vs. AI-based code generation  : While template-based methods provide transparency and control over the generated code, AI-based approaches offer adaptability and potential for optimizing code generation based on diverse requirements and contexts. Researchers can develop code-generation techniques by exploring hybrid approaches that combine the strengths of both paradigms.  
   
 Model management automation with AI approaches  : AI-driven techniques can enhance model management processes by improving semantic understanding and context-aware manipulation of models. By leveraging AI for tasks such as model differencing, merging, and versioning, MDE can achieve greater efficiency and reliability in managing evolving model artifacts. For example, AI algorithms can analyze the semantics of models to detect and resolve (or propose how to resolve) conflicts during model merging, thereby reducing manual effort and potential errors in model integration.  
   
 Moving from general LLMs to task-specific AI agents:  In the traditional context of MDE, a platform typically denotes a particular technology stack or execution environment. However, with the increasing adoption of LLMs, the platform concept expands to encompass a collaborative ecosystem of multiple language models operating together within a multi-agent system. Specifically, we foresee a paradigm shift towards the widespread adoption of task-specific AI agents driven by LLMs. These specialized agents are designed to execute various model management tasks, such as model evolution, comparison, domain modeling, training and test data generation, and model completion (Hong et al .  , 2023  )  .  
   
 Orchestration of automated MDE tasks  : The application of modeling concepts and tools involves executing different tasks, including model transformations, validation, and code generation. To this end, despite the availability of domain-specific languages like Wires (Rivera et al .  , 2009b  )  , there is still the need for higher-level automation strategies that, starting from user requirements, can coordinate low-level automated tasks and that are flexible to accommodate different modeling languages, tools, and environments. Additionally, achieving a seamless integration of automated processes requires addressing compatibility issues and ensuring interoperability between different automation tools and frameworks.  
   
 Democratizing the usage of task-specific AI agents:  To enable the usage of task-specific AI agents, it is necessary to devise low-code platforms that empower users to leverage task-specific AI agents seamlessly. Such platforms can facilitate broader participation in MDE activities across domains and expertise levels by providing intuitive interfaces for coordinating diverse AI models. Moreover, low-code platforms can serve as orchestrators for deploying and managing AI agents, allowing users to customize and extend automation capabilities according to their specific requirements and preferences.  
   
 Combination of physical/biological/social/software aspects in complex systems:  Integrating physical, biological, social, and software aspects into the same system presents a multifaceted challenge that requires a comprehensive approach to modeling and abstraction. MDE stands as an ideal integration vehicle for managing these heterogeneous aspects by providing a unified framework for representing and analyzing complex systems. Digital twins, which are virtual replicas of physical entities or systems, offer a powerful abstraction mechanism for simulating and analyzing the behavior of interconnected systems. By leveraging digital twins, MDE can facilitate the design and optimization of integrated systems across diverse domains, ranging from healthcare to sustainable smart cities.  
   
 Emergence of non-traditional interface devices  : Integrating speech interfaces, gesture recognition, and other non-traditional input modalities in MDE tools can democratize software development by enabling a broader range of stakeholders to participate in modeling activities. By providing intuitive and accessible interfaces, such as voice commands or touch-based interactions, MDE tools can lower the barriers to entry for users with diverse backgrounds and abilities. Moreover, non-traditional interface devices facilitate collaboration and communication among distributed teams, allowing users to interact with models in real time and co-create solutions collaboratively. To this end, interdisciplinary work at the intersection of human-machine interaction and software engineering research fields will be needed (Kashfi et al .  , 2019  )  .  
   
 Feedback-driven MDE:  MDE tools and processes will need built-in feedback mechanisms. This feedback could come from engineers, stakeholders or the system itself (i.e., in the form of real-time data) and could be sporadic or continuous. Tools, processes and teams should not disregard feedback. New methodologies to work in a new environment where automated feedback integration are needed, too. A straightforward scenario is Digital Twins. For instance, Digital Twins can be used for product development, where design and engineering teams can investigate a broader range of design possibilities early in the development, saving money, resources and time. In such a scenario, the engineering processes must be adapted to collect and react to the outputs/feedback received by the Digital Twin, and engineering teams must have methodologies put in place.  
   
 Automated and semi-automated decision-making in MDE:  As software and systems grow in complexity and the demands for faster delivery increase, automating decision-making processes becomes needed to improve efficiency and quality. On a purely technical level, automated decision-making will help choose the best transformation languages, model checkers, AI algorithms, execution models, etc. Furthermore, it would ensure that decisions are made consistently throughout the life of a project and by different teams. It would also prevent human error in repetitive decision-making processes (e.g., tools enhanced with automated support could exploit data and human-defined objectives to make or suggest optimal decisions).  
   
 Scarcity of datasets and benchmarks for AI models:  The advancement of AI-driven automation in MDE is hindered by the scarcity of high-quality datasets and benchmarks for training and evaluating AI models. Unlike domains like natural language processing or computer vision, where large-scale datasets are readily available, MDE lacks comprehensive datasets that capture a diverse range of modeling tasks and application domains (López et al .  , 2024  )  . Moreover, concerns regarding data privacy and the ethical use of data further complicate the acquisition and sharing of modeling datasets. Addressing these challenges requires collaboration between researchers, practitioners, and stakeholders to curate datasets, define evaluation metrics, and establish best practices for data collection and sharing in MDE contexts (Rocco et al .  , 2015  )  .  
   
 The advent of LLMs presents new opportunities for dataset creation in various domains. With the ability to generate human-like text and simulate expert knowledge, LLMs offer a cost-effective alternative to traditional human labeling methods. For instance, LLMs can automatically generate labeled datasets for MDE tasks such as model classification or sentiment analysis. Additionally, LLMs can serve as judges to evaluate the quality and accuracy of tasks performed by other LLMs, thereby facilitating continuous improvement and refinement of AI-driven systems.  
   
 Better modeling tools:  Despite significant advancements in modeling tools, many existing tools in MDE are tailored towards expert users and lack intuitive interfaces for non-specialists. This poses challenges for automation and democratizing the adoption of MDE methodologies across diverse domains and user communities (Ruscio et al .  , 2022  )  . Improving the accessibility and usability of modeling tools requires incorporating user-centered design principles, conducting usability studies, and providing comprehensive documentation and training materials. Additionally, ensuring compatibility and interoperability between different modeling tools and environments is essential for facilitating seamless collaboration and exchange of models among users with varying expertise levels.  
   
 Teaching people how to prompt:  Despite the advancements in AI and automation, human expertise remains indispensable in designing complex systems and formulating effective prompts for AI models. Teaching people how to prompt effectively involves imparting knowledge and skills in understanding system requirements, defining clear objectives, and structuring prompts to elicit desired responses from AI models. Thus, human expertise is essential for ensuring the accuracy, relevance, and ethical considerations of AI-generated outputs.  
   
 Teaching MDE:  Given the rapid evolution of technology and MDE, teaching MDE needs to be adapted to the fast-evolving needs. Educators must prepare students not just to be proficient modelers, but to be architects of highly complex software and systems that leverage automation and MDE techniques to meet the demands of industry and society. Incorporating new technologies in teaching MDE can significantly improve the learning experience. For instance, the use of simulation tools, multidimensional visualization software, and other interactive applications can provide a more immersive and engaging learning experience.  
   
 (Self-)Adaptation and coexistence with physical components:  Using abstractions to automate the generation and adaptation of software will narrow the gap between the digital and physical worlds. This will have an important application to domains such as IoT, CPS or Digital Twins. Technical, security, and standardization objectives need to be defined and pursued to make MDE up to the current needs.  

 4.  Conclusion  
 MDE has proven its utility over time, primarily due to its remarkable capabilities in abstraction and automation. These features have significantly streamlined the development process, from conceptualizing ideas to their implementation. This article delves into the various facets of MDE activities and the diverse technologies that have been deployed to automate these activities.  
   
 The evolution of MDE is closely intertwined with the emergence of cutting-edge technologies, such as deep learning and large language models. These advancements have revolutionized automation in MDE activities, paving the way for enhanced efficiency and effectiveness in software development. In addition to offering extraordinary automation capabilities for MDE, these emerging technologies create new opportunities for this paradigm to play new roles in development processes. One significant aspect to consider is the democratization of AI techniques. The power of abstraction and automation provided by MDE allows non-specialists to leverage AI capabilities seamlessly. This democratization can lead to more widespread adoption of advanced technologies and contribute to innovation across industries.  
   
 Moreover, MDE’s potential extends beyond traditional software development. It can be leveraged to build complex and hybrid systems that integrate physical, biological, social, and software components. Such systems are becoming increasingly crucial in modern societies, where interconnectedness and integration are paramount.  

 References  
 (1) 
  alf (2017) | 2017. | Action Language for Foundational UML (Alf)  . | Object Management Group (OMG). | https://www.omg.org/spec/ALF/1.1/PDF 
  Abdeen et al .  (2014) | Hani Abdeen, Dániel Varró, Houari Sahraoui, András Szabolcs Nagy, Csaba Debreceni, Ábel Hegedüs, and Ákos Horváth. 2014. | Multi-objective optimization in rule-based design space exploration. In Proc. of the 29th ACM/IEEE international conference on Automated software engineering (ASE’14)  . 289–300. 
  Anastasakis et al .  (2010) | Kyriakos Anastasakis, Behzad Bordbar, Geri Georg, and Indrakshi Ray. 2010. | On challenges of model transformation from UML to Alloy. | Softw. Syst. Model.  9, 1 (2010), 69–86. 
  Arendt et al .  (2010) | Thorsten Arendt, Enrico Biermann, Stefan Jurack, Christian Krause, and Gabriele Taentzer. 2010. | Henshin: Advanced Concepts and Tools for In-Place EMF Model Transformations. In Proc. of the 13th International Conference on Model Driven Engineering Languages and Systems (MODELS’10)  (LNCS, Vol. 6394)  . Springer, 121–135. 
  Arendt and Taentzer (2012) | Thorsten Arendt and Gabriele Taentzer. 2012. | Integration of smells and refactorings within the Eclipse modeling framework. In Proc. of the 5th Workshop on Refactoring Tools (WRT’12)  . ACM, 8–15. 
  Atkinson and Kühne (2003) | Colin Atkinson and Thomas Kühne. 2003. | Model-Driven Development: A Metamodeling Foundation. | IEEE Softw.  20, 5 (2003), 36–41. 
  Babikian et al .  (2022) | Aren A. Babikian, Oszkár Semeráth, Anqi Li, Kristóf Marussy, and Dániel Varró. 2022. | Automated generation of consistent models using qualitative abstractions and exploration strategies. | Softw. Syst. Model.  21, 5 (2022), 1763–1787. 
  Babikian et al .  (2020) | Aren A. Babikian, Oszkár Semeráth, and Dániel Varró. 2020. | Automated generation of consistent graph models with first-order logic theorem provers  . Vol. 12076. | Springer, 441–461. 
  Bagherzadeh et al .  (2017) | Mojtaba Bagherzadeh, Nicolas Hili, and Juergen Dingel. 2017. | Model-level, platform-independent debugging in the context of the model-driven development of real-time systems. In Proc. of the 11th Joint Meeting on Foundations of Software Engineering (ESEC/FSE’17)  . ACM, 419–430. 
  Baki and Sahraoui (2016) | Islem Baki and Houari Sahraoui. 2016. | Multi-step learning and adaptive search for learning complex model transformations from examples. | ACM Transactions on Software Engineering and Methodology (TOSEM)  25, 3 (2016), 1–37. 
  Barriga et al .  (2022) | Angela Barriga, Rogardt Heldal, Adrian Rutle, and Ludovico Iovino. 2022. | PARMOREL: a framework for customizable model repair. | Software and Systems Modeling  21, 5 (2022), 1739–1762. 
  Barriga et al .  (2020) | Angela Barriga, Lawrence Mandow, José-Luis Pérez-de-la-Cruz, Adrian Rutle, Rogardt Heldal, and Ludovico Iovino. 2020. | A comparative study of reinforcement learning techniques to repair models. In Proc. of the ACM/IEEE 23rd International Conference on Model Driven Engineering Languages and Systems (MODELS’20:) Companion Proceedings  . ACM, 47:1–47:9. 
  Basciani et al .  (2016) | Francesco Basciani, Juri Di Rocco, Davide Di Ruscio, Ludovico Iovino, and Alfonso Pierantonio. 2016. | Automated Clustering of Metamodel Repositories. In Advanced Information Systems Engineering  . Springer International Publishing, 342–358. 
  Basciani et al .  (2018a) | Francesco Basciani, Juri Di Rocco, Davide Di Ruscio, Ludovico Iovino, and Alfonso Pierantonio. 2018a. | Exploring model repositories by means of megamodel-aware search operators.. In Proc. of the MODELS Workshops  . 793–798. 
  Basciani et al .  (2018b) | Francesco Basciani, Juri Di Rocco, Davide Di Ruscio, Ludovico Iovino, and Alfonso Pierantonio. 2018b. | Exploring model repositories by means of megamodel-aware search operators. In Proc. of MODELS 2018 Workshops  (CEUR Workshop Proceedings, Vol. 2245)  . CEUR-WS.org, 793–798. 
  Basciani et al .  (2019) | Francesco Basciani, Juri Di Rocco, Davide Di Ruscio, Ludovico Iovino, and Alfonso Pierantonio. 2019. | A tool-supported approach for assessing the quality of modeling artifacts. | J. Comput. Lang.  51 (2019), 173–192. 
  Batot et al .  (2017) | Edouard Batot, Wael Kessentini, Houari Sahraoui, and Michalis Famelis. 2017. | Heuristic-based recommendation for metamodel—ocl coevolution. In Proc. of the ACM/IEEE 20th International Conference on Model Driven Engineering Languages and Systems (MODELS’17)  . IEEE, 210–220. 
  Batot and Sahraoui (2016) | Edouard Batot and Houari Sahraoui. 2016. | A generic framework for model-set selection for the unification of testing and learning MDE tasks. In Proceedings of the ACM/IEEE 19th international conference on model driven engineering languages and systems  . 374–384. 
  Batot and Sahraoui (2022) | Edouard R Batot and Houari Sahraoui. 2022. | Promoting social diversity for the automated learning of complex MDE artifacts. | Software and Systems Modeling  21, 3 (2022), 1159–1178. 
  Bencomo et al .  (2013) | Nelly Bencomo, Amel Belaggoun, and Valérie Issarny. 2013. | Dynamic decision networks for decision-making in self-adaptive systems: a case study. In Proc. of the 8th International Symposium on Software Engineering for Adaptive and Self-Managing Systems (SEAMS’13)  , Marin Litoiu and John Mylopoulos (Eds.). IEEE, 113–122. 
  Bencomo et al .  (2019) | Nelly Bencomo, Sebastian Götz, and Hui Song. 2019. | Models@run.time: a guided tour of the state of the art and research challenges. | Softw. Syst. Model.  18, 5 (2019), 3049–3082. 
  Bencomo et al .  (2008) | Nelly Bencomo, Paul Grace, Carlos A. Flores-Cortés, Danny Hughes, and Gordon S. Blair. 2008. | Genie: supporting the model driven development of reflective, component-based adaptive systems. In Proc. of the 30th International Conference on Software Engineering (ICSE’08)  . ACM, 811–814. 
  Bengtsson et al .  (1995) | Johan Bengtsson, Kim Guldstrand Larsen, Fredrik Larsson, Paul Pettersson, and Wang Yi. 1995. | UPPAAL - a Tool Suite for Automatic Verification of Real-Time Systems. In Proc. of the DIMACS/SYCON Workshop on Verification and Control of Hybrid Systems, Hybrid Systems III: Verification and Control  (LNCS, Vol. 1066)  . Springer, 232–243. 
  Bézivin (2005) | Jean Bézivin. 2005. | On the unification power of models. | Softw. Syst. Model.  4, 2 (2005), 171–188. 
  Bickford et al .  (2020) | Jason Bickford, Douglas L. Van Bossuyt, Paul T. Beery, and Anthony G. Pollman. 2020. | Operationalizing digital twins through model-based systems engineering methods. | Syst. Eng.  23, 6 (2020), 724–750. 
  Biermann et al .  (2006) | Enrico Biermann, Karsten Ehrig, Christian Köhler, Günter Kuhns, Gabriele Taentzer, and Eduard Weiss. 2006. | EMF Model Refactoring based on Graph Transformation Concepts. | Electron. Commun. Eur. Assoc. Softw. Sci. Technol.  3 (2006). 
  Biermann et al .  (2008) | Enrico Biermann, Claudia Ermel, and Gabriele Taentzer. 2008. | Precise semantics of EMF model transformations by graph transformation. In Proc. of the 11th International Conference on Model Driven Engineering Languages and Systems (MODELS’08)  . Springer, 53–67. 
  Bill et al .  (2019) | Robert Bill, Martin Fleck, Javier Troya, Tanja Mayerhofer, and Manuel Wimmer. 2019. | A local and global tour on MOMoT. | Softw. Syst. Model.  18, 2 (2019), 1017–1046. 
  Bislimovska et al .  (2014) | Bojana Bislimovska, Alessandro Bozzon, Marco Brambilla, and Piero Fraternali. 2014. | Textual and Content-Based Search in Repositories of Web Application Models. | ACM Trans. Web  8, 2, Article 11 (2014). 
  Born et al .  (2008) | Matthias Born, Christian Brelage, Ivan Markovic, Daniel Pfeiffer, and Ingo Weber. 2008. | Auto-completion for Executable Business Process Models. In Proc. of the Business Process Management Workshops  (Lecture Notes in Business Information Processing, Vol. 17)  , Danilo Ardagna, Massimo Mecella, and Jian Yang (Eds.). Springer, 510–515. | https://doi.org/10.1007/978-3-642-00328-8_51 
  Boussaïd et al .  (2017) | Ilhem Boussaïd, Patrick Siarry, and Mohamed Ahmed-Nacer. 2017. | A survey on search-based model-driven engineering. | Automated Software Engineering  24 (2017), 233–294. 
  Brottier et al .  (2006) | Erwan Brottier, Franck Fleurey, Jim Steel, Benoit Baudry, and Yves Le Traon. 2006. | Metamodel-based Test Generation for Model Transformations: an Algorithm and a Tool. In Proc. of the 17th International Symposium on Software Reliability Engineering (ISSRE’06)  . IEEE, 85–94. 
  Brun and Pierantonio (2008) | Cédric Brun and Alfonso Pierantonio. 2008. | Model differences in the eclipse modelling framework. | UPGRADE, the European Journal for the Informatics Professional  9 (2008), 29–34. 
  Bucchiarone et al .  (2020) | Antonio Bucchiarone, Jordi Cabot, Richard F. Paige, and Alfonso Pierantonio. 2020. | Grand challenges in model-driven engineering: an analysis of the state of the research. | Softw. Syst. Model.  19, 1 (2020), 5–13. 
  Búr et al .  (2018) | Márton Búr, Gábor S. Szilágyi, András Vörös, and Dániel Varró. 2018. | Distributed Graph Queries for Runtime Monitoring of Cyber-Physical Systems. In Proc. of the 21st International Conference on Fundamental Approaches to Software Engineering (FASE’18)  (LNCS, Vol. 10802)  . Springer, 111–128. 
  Burdusel et al .  (2018) | Alexandru Burdusel, Steffen Zschaler, and Daniel Strüber. 2018. | MDEoptimiser: A search based model engineering tool. In Proce. of the 21st ACM/IEEE International Conference on Model Driven Engineering Languages and Systems (MODELS’18) - Companion Proceedings  . ACM, 12–16. 
  Burgueño et al .  (2022) | Loli Burgueño, Jordi Cabot, Shuai Li, and Sébastien Gérard. 2022. | A generic LSTM neural network architecture to infer heterogeneous model transformations. | Softw. Syst. Model.  21, 1 (2022), 139–156. 
  Burgueño et al .  (2019) | Loli Burgueño, Federico Ciccozzi, Michalis Famelis, Gerti Kappel, Leen Lambers, Sébastien Mosser, Richard F. Paige, Alfonso Pierantonio, Arend Rensink, Rick Salay, Gabriele Taentzer, Antonio Vallecillo, and Manuel Wimmer. 2019. | Contents for a Model-Based Software Engineering Body of Knowledge. | Softw. Syst. Model.  18, 6 (2019), 3193–3205. 
  Burgueño et al .  (2016) | Loli Burgueño, Manuel Wimmer, and Antonio Vallecillo. 2016. | A Linda-based platform for the parallel execution of out-place model transformations. | Inf. Softw. Technol.  79 (2016), 17–35. 
  Cabot et al .  (2007) | Jordi Cabot, Robert Clarisó, and Daniel Riera. 2007. | UMLtoCSP: a tool for the formal verification of UML/OCL models using constraint programming. In 22nd IEEE/ACM International Conference on Automated Software Engineering (ASE)  , R. E. Kurt Stirewalt, Alexander Egyed, and Bernd Fischer (Eds.). ACM, 547–548. 
  Cámara et al .  (2023) | Javier Cámara, Javier Troya, Lola Burgueño, and Antonio Vallecillo. 2023. | On the assessment of generative AI in modeling tasks: an experience report with ChatGPT and UML. | Software and Systems Modeling  22, 3 (2023), 781–793. 
  Chaaben et al .  (2023) | Meriem Ben Chaaben, Lola Burgueño, and Houari Sahraoui. 2023. | Towards using few-shot prompt learning for automating model completion. In 2023 IEEE/ACM 45th International Conference on Software Engineering: New Ideas and Emerging Results (ICSE-NIER)  . 7–12. 
  Chen et al .  (2023a) | Boqi Chen, Kua Chen, Shabnam Hassani, Yujing Yang, Daniel Amyot, Lysanne Lessard, Gunter Mussbacher, Mehrdad Sabetzadeh, and Dániel Varró. 2023a. | On the Use of GPT-4 for Creating Goal Models: An Exploratory Study. In 2023 IEEE 31st International Requirements Engineering Conference Workshops (REW)  . 262–271. 
  Chen et al .  (2005) | Kai Chen, Janos Sztipanovits, and Sandeep Neema. 2005. | Toward a semantic anchoring infrastructure for domain-specific modeling languages. In Proc. of the 5th ACM International Conference On Embedded Software (EMSOFT’05)  , Wayne H. Wolf (Ed.). ACM, 35–43. 
  Chen et al .  (2023b) | Kua Chen, Yujing Yang, Boqi Chen, José Antonio Hernández López, Gunter Mussbacher, and Dániel Varró. 2023b. | Automated Domain Modeling with Large Language Models: A Comparative Study. In Proc. of the ACM/IEEE 26th International Conference on Model Driven Engineering Languages and Systems (MODELS’23)  . IEEE, 162–172. 
  Combemale et al .  (2017) | Benoît Combemale, Olivier Barais, and Andreas Wortmann. 2017. | Language Engineering with the GEMOC Studio. In Proc. of the IEEE International Conference on Software Architecture Workshops (ICSA’17)  . IEEE, 189–191. 
  Cuadrado et al .  (2022) | Jesús Sánchez Cuadrado, Loli Burgueño, Manuel Wimmer, and Antonio Vallecillo. 2022. | Efficient Execution of ATL Model Transformations Using Static Analysis and Parallelism. | IEEE Trans. Software Eng.  48, 4 (2022), 1097–1114. 
  Denil et al .  (2014) | Joachim Denil, Maris Jukss, Clark Verbrugge, and Hans Vangheluwe. 2014. | Search-Based Model Optimization Using Model Transformations. In Proc. of the 8th International Conference on System Analysis and Modeling: Models and Reusability (SAM’14)  (LNCS, Vol. 8769)  . Springer, 80–95. 
  Di Rocco et al .  (2021) | Juri Di Rocco, Claudio Di Sipio, Davide Di Ruscio, and Phuong T Nguyen. 2021. | A GNN-based recommender system to assist the specification of metamodels and models. In Proc. of the ACM/IEEE 24th International Conference on Model Driven Engineering Languages and Systems (MODELS’21)  . 70–81. 
  Dolques et al .  (2009) | Xavier Dolques, Marianne Huchard, and Clémentine Nebut. 2009. | From transformation traces to transformation rules: Assisting model driven engineering approach with formal concept analysis. | Supplementary Proceedings of ICCS  9 (2009), 15–29. 
  Durán (2022) | Francisco Durán. 2022. | Rewriting Logic and Maude for the Formalization and Analysis of DSMLs, and the Prototyping of MDSE Tools. | Journal of Object Technology  21, 4 (2022), 4:1–12. 
  Ehrig et al .  (2009) | Karsten Ehrig, Jochen Malte Küster, and Gabriele Taentzer. 2009. | Generating instance models from meta models. | Softw. Syst. Model.  8, 4 (2009), 479–500. 
  Eisenberg et al .  (2022) | Martin Eisenberg, Daniel Lehner, Radek Sindelár, and Manuel Wimmer. 2022. | Towards Reactive Planning with Digital Twins and Model-Driven Optimization. In Proc. of the 11th International Symposium on Leveraging Applications of Formal Methods, Verification and Validation (ISoLA’22). Part IV  (LNCS, Vol. 13704)  . Springer, 54–70. 
  Eisenberg et al .  (2021) | Martin Eisenberg, Hans-Peter Pichler, Antonio Garmendia, and Manuel Wimmer. 2021. | Towards Reinforcement Learning for In-Place Model Transformations. In Proc. of the 24th International Conference on Model Driven Engineering Languages and Systems (MODELS’21)  . IEEE, 82–88. 
  Engels et al .  (2000) | Gregor Engels, Jan Hendrik Hausmann, Reiko Heckel, and Stefan Sauer. 2000. | Dynamic Meta Modeling: A Graphical Approach to the Operational Semantics of Behavioral Diagrams in UML. In Proc. of the 3th International Conference on The Unified Modeling Language, Modeling Languages and Applications (UML’00)  (LNCS, Vol. 1939)  , Andy Evans, Stuart Kent, and Bran Selic (Eds.). Springer, 323–337. 
  Faunes et al .  (2013) | Martin Faunes, Houari Sahraoui, and Mounir Boukadoum. 2013. | Genetic-programming approach to learn model transformation rules from examples. In Theory and Practice of Model Transformations, ICMT  . 17–32. 
  Fouquet et al .  (2012) | François Fouquet, Grégory Nain, Brice Morin, Erwan Daubert, Olivier Barais, Noël Plouzeau, and Jean-Marc Jézéquel. 2012. | An Eclipse Modelling Framework Alternative to Meet the Models@Runtime Requirements. In Proc. of the 15th International Conference on Model Driven Engineering Languages and Systems (MODELS’12)  (LNCS, Vol. 7590)  . Springer, 87–101. 
  France and Rumpe (2007) | Robert B. France and Bernhard Rumpe. 2007. | Model-driven Development of Complex Software: A Research Roadmap. In International Conference on Software Engineering, ISCE 2007, Workshop on the Future of Software Engineering, FOSE  . IEEE Computer Society, 37–54. 
  Gammaitoni and Kelsen (2019) | Loïc Gammaitoni and Pierre Kelsen. 2019. | F-Alloy: a relational model transformation language based on Alloy. | Softw. Syst. Model.  18, 1 (2019), 213–247. 
  Ghannem et al .  (2018) | Adnane Ghannem, Marouane Kessentini, Mohammad Salah Hamdi, and Ghizlane El-Boussaidi. 2018. | Model refactoring by example: A multi-objective search based software engineering approach. | J. Softw. Evol. Process.  30, 4 (2018). 
  Giese and Wagner (2006) | Holger Giese and Robert Wagner. 2006. | Incremental Model Synchronization with Triple Graph Grammars, Vol. 4199. 543–557. 
  Gogolla et al .  (2007) | Martin Gogolla, Fabian Büttner, and Mark Richters. 2007. | USE: A UML-based specification environment for validating UML and OCL. | Sci. Comput. Program.  69, 1-3 (2007), 27–34. 
  Gogolla et al .  (2018) | Martin Gogolla, Frank Hilken, and Khanh-Hoang Doan. 2018. | Achieving model quality through model validation, verification and exploration. | Comput. Lang. Syst. Struct.  54 (2018), 474–511. 
  Gómez et al .  (2012) | Juan José Cadavid Gómez, Benoit Baudry, and Houari Sahraoui. 2012. | Searching the boundaries of a modeling space to test metamodels. In 2012 IEEE Fifth International Conference on Software Testing, Verification and Validation  . 131–140. 
  Gómez-Abajo et al .  (2016) | Pablo Gómez-Abajo, Esther Guerra, and Juan de Lara. 2016. | Wodel: a domain-specific language for model mutation. In Proc. of the 31st Annual ACM Symposium on Applied Computing  . ACM, 1968–1973. 
  Hartmann et al .  (2019) | Thomas Hartmann, Assaad Moawad, François Fouquet, and Yves Le Traon. 2019. | The next evolution of MDE: a seamless integration of machine learning into domain modeling. | Softw. Syst. Model.  18, 2 (2019), 1285–1304. 
  Herrmannsdoerfer (2011) | Markus Herrmannsdoerfer. 2011. | COPE – A Workbench for the Coupled Evolution of Metamodels and Models  . LNCS, Vol. 6563. | Springer, 286–295. 
  Herrmannsdoerfer and Ratiu (2009) | Markus Herrmannsdoerfer and Daniel Ratiu. 2009. | Limitations of Automating Model Migration in Response to Metamodel Adaptation. In Proc. of the International Conference on Model Driven Engineering Languages and Systems (MODELS’09) Workshops and Symposia  (LNCS, Vol. 6002)  , Sudipto Ghosh (Ed.). Springer, 205–219. 
  Hilken et al .  (2018) | Frank Hilken, Martin Gogolla, Loli Burgueño, and Antonio Vallecillo. 2018. | Testing models and model transformations using classifying terms. | Softw. Syst. Model.  17, 3 (2018), 885–912. 
  Holzmann (2004) | Gerard J. Holzmann. 2004. | The SPIN Model Checker - primer and reference manual  . | Addison-Wesley. 
  Hong et al .  (2023) | Sirui Hong, Xiawu Zheng, Jonathan Chen, Yuheng Cheng, Jinlin Wang, Ceyao Zhang, Zili Wang, Steven Ka Shing Yau, Zijuan Lin, Liyang Zhou, et al .  2023. | Metagpt: Meta programming for multi-agent collaborative framework. | arXiv preprint arXiv:2308.00352  (2023). 
  Jilani et al .  (2014) | Atif Aftab Jilani, Muhammad Zohaib Iqbal, and Muhammad Uzair Khan. 2014. | A search based test data generation approach for model transformations. In Theory and Practice of Model Transformations: 7th International Conference, ICMT 2014, Held as Part of STAF 2014, York, UK, July 21-22, 2014. Proceedings 7  . Springer, 17–24. 
  John et al .  (2023) | Stefan John, Jens Kosiol, Leen Lambers, and Gabriele Taentzer. 2023. | A graph-based framework for model-driven optimization facilitating impact analysis of mutation operator properties. | Softw. Syst. Model.  22, 4 (2023), 1281–1318. 
  Jongeling et al .  (2019) | Robbert Jongeling, Jan Carlson, and Antonio Cicchetti. 2019. | Impediments to Introducing Continuous Integration for Model-Based Development in Industry. In Proc. of the 45th Euromicro Conference on Software Engineering and Advanced Applications (SEAA’19)  . IEEE, 434–441. 
  Jouault et al .  (2008) | Frédéric Jouault, Freddy Allilaire, Jean Bézivin, and Ivan Kurtev. 2008. | ATL: A model transformation tool. | Science of Computer Programming  72, 1-2 (2008), 31–39. 
  Kahani et al .  (2019) | Nafiseh Kahani, Mojtaba Bagherzadeh, James R. Cordy, Juergen Dingel, and Dániel Varró. 2019. | Survey and classification of model transformation tools. | Softw. Syst. Model.  18, 4 (2019), 2361–2397. 
  Kappel et al .  (2006) | Gerti Kappel, Elisabeth Kapsammer, Horst Kargl, Gerhard Kramler, Thomas Reiter, Werner Retschitzegger, Wieland Schwinger, and Manuel Wimmer. 2006. | Lifting Metamodels to Ontologies: A Step to the Semantic Integration of Modeling Languages. In Proc. of the 9th International Conference on Model Driven Engineering Languages and Systems (MODELS’06)  (LNCS, Vol. 4199)  . Springer, 528–542. 
  Kashfi et al .  (2019) | Pariya Kashfi, Robert Feldt, and Agneta Nilsson. 2019. | Integrating UX principles and practices into software development organizations: a case study of influencing events. | Journal of Systems and Software  154 (2019), 37–58. 
  Kessentini et al .  (2017) | Marouane Kessentini, Usman Mansoor, Manuel Wimmer, Ali Ouni, and Kalyanmoy Deb. 2017. | Search-based detection of model level changes. | Empir. Softw. Eng.  22, 2 (2017), 670–715. 
  Kessentini et al .  (2008) | Marouane Kessentini, Houari Sahraoui, and Mounir Boukadoum. 2008. | Model transformation as an optimization problem. In International Conference on Model Driven Engineering Languages and Systems  . Springer, 159–173. 
  Kessentini and Alizadeh (2022) | Wael Kessentini and Vahid Alizadeh. 2022. | Semi-automated metamodel/model co-evolution: a multi-level interactive approach. | Software and Systems Modeling  21, 5 (2022), 1853–1876. 
  Kessentini et al .  (2018a) | Wael Kessentini, Houari Sahraoui, and Manuel Wimmer. 2018a. | Automated co-evolution of metamodels and transformation rules: A search-based approach. In Search-Based Software Engineering: 10th International Symposium, SSBSE, Proceedings  . Springer, 229–245. 
  Kessentini et al .  (2018b) | Wael Kessentini, Manuel Wimmer, and Houari Sahraoui. 2018b. | Integrating the Designer in-the-loop for Metamodel/Model Co-Evolution via Interactive Computational Search. In Proc. of the 21th ACM/IEEE International Conference on Model Driven Engineering Languages and Systems (MODELS’18)  (MODELS ’18)  . ACM, 101–111. 
  Kinneer et al .  (2021) | Cody Kinneer, David Garlan, and Claire Le Goues. 2021. | Information Reuse and Stochastic Search: Managing Uncertainty in Self-  *   *     {}^{\mbox{*}}  start_FLOATSUPERSCRIPT * end_FLOATSUPERSCRIPT    Systems. | ACM Trans. Auton. Adapt. Syst.  15, 1 (2021), 3:1–3:36. 
  Klein (2015) | John Klein. 2015. | Model Driven Engineering: Automatic Code Generation and Beyond. | Carnegie Mellon University, Software Engineering Institute’s Insights (blog). | https://insights.sei.cmu.edu/blog/model-driven-engineering-automatic-code-generation-and-beyond/ | Accessed: 2024-Mar-5. 
  Kleppe et al .  (2003) | A.G. Kleppe, J.B. Warmer, and W. Bast. 2003. | MDA Explained: The Model Driven Architecture : Practice and Promise  . | Addison-Wesley. 
  Koegel and Helming (2010) | Maximilian Koegel and Jonas Helming. 2010. | EMFStore: a model repository for EMF models. In Proc. of the 32nd ACM/IEEE International Conference on Software Engineering - Volume 2 (ICSE’10)  . ACM, 307–308. 
  Koegel et al .  (2010) | Maximilian Koegel, Markus Herrmannsdoerfer, Yang Li, Jonas Helming, and Jörn David. 2010. | Comparing State- and Operation-Based Change Tracking on Models. In Proc. of the 14th IEEE International Enterprise Distributed Object Computing Conference (EDOC’10)  . IEEE, 163–172. 
  Kolovos and García-Domínguez (2022) | Dimitris S. Kolovos and Antonio García-Domínguez. 2022. | The Epsilon Playground. In Proc. of the 25th International Conference on Model Driven Engineering Languages and Systems (MODELS’22) Companion Proceedings  . ACM, 131–137. 
  Kolovos et al .  (2008) | Dimitrios S. Kolovos, Richard F. Paige, and Fiona A. C. Polack. 2008. | The Epsilon Transformation Language. In Proc. of the Int. Conference on Model Transformations (ICMT’08)  (LNCS, Vol. 5063)  . Springer, 46–60. 
  Kuschke et al .  (2013) | Tobias Kuschke, Patrick Mäder, and Patrick Rempel. 2013. | Recommending Auto-completions for Software Modeling Activities. In Proc. of the 16th International Conference on Model-Driven Engineering Languages and Systems (MODELS’13)  . Springer, 170–186. 
  Kwiatkowska et al .  (2011) | Marta Z. Kwiatkowska, Gethin Norman, and David Parker. 2011. | PRISM 4.0: Verification of Probabilistic Real-Time Systems. In Proc. of the 23rd International Conference on Computer Aided Verification (CAV’11)  , Vol. 6806. Springer, 585–591. 
  Lano and Xue (2023) | Kevin Lano and Qiaomu Xue. 2023. | Code Generation by Example Using Symbolic Machine Learning. | SN Comput. Sci.  4, 2 (2023), 170. 
  Levendovszky et al .  (2014) | Tihamer Levendovszky, Daniel Balasubramanian, Anantha Narayanan, Feng Shi, Christopher P. van Buskirk, and Gabor Karsai. 2014. | A semi-formal description of migrating domain-specific models with evolving domains. | Softw. Syst. Model.  13, 2 (2014), 807–823. | https://doi.org/10.1007/S10270-012-0313-5 
  López and Cuadrado (2020) | José Antonio Hernández López and Jesús Sánchez Cuadrado. 2020. | MAR: a structure-based search engine for models. In Proc. of the ACM/IEEE 23rd International Conference on Model Driven Engineering Languages and Systems (MODELS’20)  , Eugene Syriani, Houari A. Sahraoui, Juan de Lara, and Silvia Abrahão (Eds.). ACM, 57–67. 
  López and Cuadrado (2022) | José Antonio Hernández López and Jesús Sánchez Cuadrado. 2022. | An efficient and scalable search engine for models. | Software and Systems Modeling  21, 5 (2022), 1715–1737. 
  López and Cuadrado (2023) | José Antonio Hernández López and Jesús Sánchez Cuadrado. 2023. | Generating Structurally Realistic Models With Deep Autoregressive Networks. | IEEE Trans. Software Eng.  49, 4 (2023), 2661–2676. 
  López et al .  (2022) | José Antonio Hernández López, Riccardo Rubei, Jesús Sánchez Cuadrado, and Davide Di Ruscio. 2022. | Machine learning methods for model classification: a comparative study. In Proceedings of the 25th International Conference on Model Driven Engineering Languages and Systems  . 165–175. 
  Lúcio et al .  (2016) | Levi Lúcio, Moussa Amrani, Juergen Dingel, Leen Lambers, Rick Salay, Gehan M. K. Selim, Eugene Syriani, and Manuel Wimmer. 2016. | Model transformation intents and their properties. | Softw. Syst. Model.  15, 3 (2016), 647–684. 
  Lucrédio et al .  (2008) | Daniel Lucrédio, Renata P. de M. Fortes, and Jon Whittle. 2008. | MOOGLE: A model search engine. In Proc. of the International Conference on Model driven engineering languages and systems (MODELS’08)  . Springer, 296–310. 
  López et al .  (2024) | José Antonio Hernández López, Javier Luis Cánovas Izquierdo, and Jesús Sánchez Cuadrado. 2024. | ModelSet: A labelled dataset of software models for machine learning. | Science of Computer Programming  231 (2024), 103009. 
  Ma et al .  (2013) | Zhiyi Ma, Xiao He, and Chao Liu. 2013. | Assessing the quality of metamodels. | Frontiers of Computer Science  7, 4 (2013), 558–570. 
  Mansoor et al .  (2015) | Usman Mansoor, Marouane Kessentini, Philip Langer, Manuel Wimmer, Slim Bechikh, and Kalyanmoy Deb. 2015. | MOMM: Multi-objective model merging. | J. Syst. Softw.  103 (2015), 423–439. 
  Mens (2005) | Tom Mens. 2005. | On the Use of Graph Transformations for Model Refactoring. In Proc. of the International Summer School on Generative and Transformational Techniques in Software Engineering (GTTSE’05)  (LNCS, Vol. 4143)  , Ralf Lämmel, João Saraiva, and Joost Visser (Eds.). Springer, 219–257. 
  Mokaddem et al .  (2018) | Chihab eddine Mokaddem, Houari Sahraoui, and Eugene Syriani. 2018. | Recommending model refactoring rules from refactoring examples. In Proc. of the 21th ACM/IEEE International Conference on Model Driven Engineering Languages and Systems (MODELS’18)  . 257–266. 
  Mokos et al .  (2010) | Konstantinos Mokos, George Meditskos, Panagiotis Katsaros, Nick Bassiliades, and Vangelis Vasiliades. 2010. | Ontology-based model driven engineering for safety verification. In 2010 36th EUROMICRO Conference on Software Engineering and Advanced Applications  . 47–54. 
  Muller et al .  (2005) | Pierre-Alain Muller, Franck Fleurey, and Jean-Marc Jézéquel. 2005. | Weaving Executability into Object-Oriented Meta-languages. In Proc. of the 8th International Conference on Model Driven Engineering Languages and Systems (MODELS’13)  (LNCS, Vol. 3713)  . Springer, 264–278. 
  Mussbacher et al .  (2014) | Gunter Mussbacher, Daniel Amyot, Ruth Breu, Jean-Michel Bruel, Betty H. C. Cheng, Philippe Collet, Benoît Combemale, Robert B. France, Rogardt Heldal, James H. Hill, Jörg Kienzle, Matthias Schöttle, Friedrich Steimann, Dave R. Stikkolorum, and Jon Whittle. 2014. | The Relevance of Model-Driven Engineering Thirty Years from Now. In Proc. of the 17th International Conference on Model-Driven Engineering Languages and Systems (MODELS’14)  (LNCS, Vol. 8767)  . Springer, 183–200. 
  Nechypurenko et al .  (2007) | Andrey Nechypurenko, Egon Wuchner, Jules White, and Douglas C. Schmidt. 2007. | Applying Model Intelligence Frameworks for Deployment Problem in Real-Time and Embedded Systems. In Proc. of the International Conference on Model Driven Engineering Languages and Systems (MODELS’07)  . Springer, 143–151. 
  Nguyen et al .  (2019) | Phuong T Nguyen, Juri Di Rocco, Davide Di Ruscio, Alfonso Pierantonio, and Ludovico Iovino. 2019. | Automated classification of metamodel repositories: a machine learning approach. In Proc. of the ACM/IEEE 22nd International Conference on Model Driven Engineering Languages and Systems (MODELS’19)  . 272–282. 
  Nguyen et al .  (2021) | Phuong Thanh Nguyen, Davide Di Ruscio, Alfonso Pierantonio, Juri Di Rocco, and Ludovico Iovino. 2021. | Convolutional neural networks for enhanced classification mechanisms of metamodels. | J. Syst. Softw.  172 (2021). 
  OMG (2005) | OMG. 2005. | MOF QVT Final Adopted Specification  . | Object Management Group. | OMG doc. ptc/05-11-01. 
  Pescador and de Lara (2016) | Ana Pescador and Juan de Lara. 2016. | DSL-maps: from requirements to design of domain-specific languages. In Proceedings of the 31st IEEE/ACM International Conference on Automated Software Engineering  . 438–443. 
  Popoola et al .  (2016) | Saheed Popoola, Dimitrios S. Kolovos, and Horacio Hoyos Rodriguez. 2016. | EMG: A Domain-Specific Transformation Language for Synthetic Model Generation. In Proc. of the 9th International Conference on Theory and Practice of Model Transformations ( ICMT’16@STAF)  (LNCS, Vol. 9765)  . Springer, 36–51. 
  Porres (2003) | Ivan Porres. 2003. | Model Refactorings as Rule-Based Update Transformations. In Proc. of the 6th International Conference on The Unified Modeling Language, Modeling Languages and Applications (UML’03)  (LNCS, Vol. 2863)  , Perdita Stevens, Jon Whittle, and Grady Booch (Eds.). Springer, 159–174. 
  Pretschner et al .  (2005) | A. Pretschner, W. Prenninger, S. Wagner, C. Kühnel, M. Baumgartner, B. Sostawa, R. Zölch, and T. Stauner. 2005. | One evaluation of model-based testing and its automation. In Proc. of the 27th International Conference on Software Engineering (ICSE’05)  . ACM, 392–401. 
  Rahimi et al .  (2023) | Abbas Rahimi, Massimo Tisi, Shekoufeh Kolahdouz Rahimi, and Luca Berardinelli. 2023. | Towards Generating Structurally Realistic Models by Generative Adversarial Networks. In Proc. of the ACM/IEEE International Conference on Model Driven Engineering Languages and Systems (MODELS’23’)  . IEEE, 597–604. 
  Revault et al .  (1995) | Nicolas Revault, Houari A Sahraoui, Gilles Blain, and Jean-François Perrot. 1995. | A Metamodeling technique: The METAGEN system. In Proceedings of TOOLS  , Vol. 16. 127–139. 
  Rivera et al .  (2009a) | José Eduardo Rivera, Francisco Durán, and Antonio Vallecillo. 2009a. | Formal Specification and Analysis of Domain Specific Models Using Maude. | Simul.  85, 11-12 (2009), 778–792. 
  Rivera et al .  (2009b) | José Eduardo Rivera, Daniel Ruiz-González, Fernando López-Romero, and José María Bautista. 2009b. | Wires* : A Tool for Orchestrating Model Transformations. In Proc. of the XIV Jornadas de Ingeniería del Software y Bases de Datos (JISBD’09)  , Antonio Vallecillo and Goiuria Sagardui (Eds.). 158–161. 
  Robles et al .  (2017) | Gregorio Robles, Truong Ho-Quang, Regina Hebig, Michel RV Chaudron, and Miguel Angel Fernandez. 2017. | An extensive dataset of UML models in GitHub. In Proc. of the IEEE/ACM 14th International Conference on Mining Software Repositories (MSR’17)  . 519–522. 
  Robles et al .  (2012) | Karina Robles, Anabel Fraga, Jorge Morato, and Juan Llorens. 2012. | Towards an ontology-based retrieval of UML Class Diagrams. | Information and Software Technology  54, 1 (2012), 72–86. 
  Rocco et al .  (2015) | Juri Di Rocco, Davide Di Ruscio, Ludovico Iovino, and Alfonso Pierantonio. 2015. | Collaborative Repositories in Model-Driven Engineering. | IEEE Softw.  32, 3 (2015), 28–34. 
  Rose et al .  (2014) | Louis M. Rose, Dimitrios S. Kolovos, Richard F. Paige, Fiona A. C. Polack, and Simon M. Poulding. 2014. | Epsilon Flock: a model migration language. | Softw. Syst. Model.  13, 2 (2014), 735–755. 
  Roser and Bauer (2005) | Stephan Roser and Bernhard Bauer. 2005. | Ontology-Based Model Transformation. In Proc. of the Satellite Events at the MODELS 2005  (LNCS, Vol. 3844)  . Springer, 355–356. 
  Rubei et al .  (2021) | Riccardo Rubei, Juri Di Rocco, Davide Di Ruscio, Phuong T. Nguyen, and Alfonso Pierantonio. 2021. | A Lightweight Approach for the Automated Classification and Clustering of Metamodels. In Proc. of the ACM/IEEE International Conference on Model Driven Engineering Languages and Systems Companion (MODELS’21) Companion  . IEEE, 477–482. 
  Ruscio et al .  (2012) | Davide Di Ruscio, Ludovico Iovino, and Alfonso Pierantonio. 2012. | Coupled Evolution in Model-Driven Engineering. | IEEE Softw.  29, 6 (2012), 78–84. 
  Ruscio et al .  (2022) | Davide Di Ruscio, Dimitrios S. Kolovos, Juan de Lara, Alfonso Pierantonio, Massimo Tisi, and Manuel Wimmer. 2022. | Low-code development and model-driven engineering: Two sides of the same coin? | Softw. Syst. Model.  21, 2 (2022), 437–446. 
  Saini et al .  (2022) | Rijul Saini, Gunter Mussbacher, Jin L. C. Guo, and Jörg Kienzle. 2022. | Automated, interactive, and traceable domain modelling empowered by artificial intelligence. | Softw. Syst. Model.  21, 3 (2022), 1015–1045. 
  Sakizloglou et al .  (2022) | Lucas Sakizloglou, Sona Ghahremani, Matthias Barkowsky, and Holger Giese. 2022. | Incremental execution of temporal graph queries over runtime models with history and its applications. | Softw. Syst. Model.  21, 5 (2022), 1789–1829. 
  Schäfer and Gogolla (2020) | Marcel Schäfer and Martin Gogolla. 2020. | Enhancing development and consistency of UML models and model executions with USE studio. In Proc. of the ACM/IEEE 23rd International Conference on Model Driven Engineering Languages and Systems (MODELS’20) Companion  , Esther Guerra and Ludovico Iovino (Eds.). ACM, 14:1–14:5. 
  Schmidt (2006) | Douglas C. Schmidt. 2006. | Guest Editor’s Introduction: Model-Driven Engineering. | Computer  39, 2 (2006), 25–31. 
  Schneider et al .  (2017) | Sven Schneider, Leen Lambers, and Fernando Orejas. 2017. | Symbolic model generation for graph properties  . LNCS, Vol. 10202. | Springer, 226–243. 
  Semeráth et al .  (2020) | Oszkár Semeráth, Aren A. Babikian, Anqi Li, Kristóf Marussy, and Dániel Varró. 2020. | Automated generation of consistent models with structural and attribute constraints. In Proc. of the ACM/IEEE 23rd International Conference on Model Driven Engineering Languages and Systems (MODELS’20)  . ACM, 187–199. 
  Sen et al .  (2010) | Sagar Sen, Benoit Baudry, and Hans Vangheluwe. 2010. | Towards Domain-specific Model Editors with Automatic Model Completion. | Simul.  86, 2 (2010), 109–126. 
  Sendall and Kozaczynski (2003) | Shane Sendall and Wojtek Kozaczynski. 2003. | Model Transformation: The Heart and Soul of Model-Driven Software Development. | IEEE Softw.  20, 5 (2003), 42–45. 
  Soeken et al .  (2010) | Mathias Soeken, Robert Wille, Mirco Kuhlmann, Martin Gogolla, and Rolf Drechsler. 2010. | Verifying UML/OCL models using Boolean satisfiability. In 2010 Design, Automation & Test in Europe Conference & Exhibition (DATE 2010)  . IEEE, 1341–1344. 
  Sprinkle and Karsai (2004) | Jonathan Sprinkle and Gabor Karsai. 2004. | A domain-specific visual language for domain model evolution. | J. Vis. Lang. Comput.  15, 3-4 (2004), 291–307. 
  Staab et al .  (2010) | Steffen Staab, Tobias Walter, Gerd Gröner, and Fernando Silva Parreiras. 2010. | Model driven engineering with ontology technologies. | In Reasoning Web International Summer School  . 62–98. 
  Steimann and Ulke (2013) | Friedrich Steimann and Bastian Ulke. 2013. | Generic Model Assist. In Proc. of the 16th International Conference on Model-Driven Engineering Languages and Systems (MODELS’13)  (LNCS, Vol. 8107)  . Springer, 18–34. 
  Sunyé et al .  (2001) | Gerson Sunyé, Damien Pollet, Yves Le Traon, and Jean-Marc Jézéquel. 2001. | Refactoring UML Models. In Proc. of the 4th International Conference on The Unified Modeling Language, Modeling Languages and Applications (UML’01)  (LNCS, Vol. 2185)  , Martin Gogolla and Cris Kobryn (Eds.). Springer, 134–148. 
  Syriani et al .  (2013) | Eugene Syriani, Hans Vangheluwe, Raphael Mannadiar, Conner Hansen, Simon Van Mierlo, and Hüseyin Ergin. 2013. | AToMPM: A Web-based Modeling Environment. In Proc. of the 16th International Conference on Model Driven Engineering Languages and Systems (MODELS’13) Companion  (CEUR Workshop Proceedings, Vol. 1115)  . CEUR-WS.org, 21–25. 
  Taentzer et al .  (2014) | Gabriele Taentzer, Claudia Ermel, Philip Langer, and Manuel Wimmer. 2014. | A fundamental approach to model versioning based on graph modifications: from theory to implementation. | Softw. Syst. Model.  13, 1 (2014), 239–272. 
  Taentzer et al .  (2012) | Gabriele Taentzer, Florian Mantz, and Yngve Lamo. 2012. | Co-transformation of Graphs and Type Graphs with Application to Model Co-evolution  . LNCS, Vol. 7562. | Springer, 326–340. 
  Tao et al .  (2018) | Fei Tao, He Zhang, Ang Liu, and Andrew YC Nee. 2018. | Digital twin in industry: State-of-the-art. | IEEE Transactions on Industrial Informatics  15, 4 (2018), 2405–2415. 
  Tisi et al .  (2013) | Massimo Tisi, Salvador Martínez Perez, and Hassene Choura. 2013. | Parallel Execution of ATL Transformation Rules. In Proc. of the 16th International Conference on Model-Driven Engineering Languages and Systems ( MODELS’13)  (LNCS, Vol. 8107)  . Springer, 656–672. 
  VaraminyBahnemiry et al .  (2021) | Zahra VaraminyBahnemiry, Jessie Galasso, Khalid Belharbi, and Houari Sahraoui. 2021. | Automated Patch Generation for Fixing Semantic Errors in ATL Transformation Rules. In Proc. of the ACM/IEEE 24th International Conference on Model Driven Engineering Languages and Systems (MODELS’21)  . 13–23. 
  Varró and Balogh (2007) | Dániel Varró and Zoltán Balogh. 2007. | Automating model transformation by example using inductive logic programming. In Proceedings of the 2007 ACM symposium on Applied computing  . 978–984. 
  Walter et al .  (2014) | Tobias Walter, Fernando Silva Parreiras, and Steffen Staab. 2014. | An ontology-based framework for domain-specific modeling. | Software & Systems Modeling  13, 1 (2014), 83–108. 
  Wang et al .  (2010) | Chao Wang, Hong Li, Zhigang Gao, Min Yao, and Yuhao Yang. 2010. | An automatic documentation generator based on model-driven techniques. | International Conference on Computer Engineering and Technology, Proceedings (ICCET)  4 (2010). 
  Wenz et al .  (2021) | Viola Wenz, Arno Kesper, and Gabriele Taentzer. 2021. | Detecting Quality Problems in Data Models by Clustering Heterogeneous Data Values. In Proc. of the ACM/IEEE International Conference on Model Driven Engineering Languages and Systems (MODELS’23) - Companion  . IEEE, 150–159. 
  Westfechtel (2014) | Bernhard Westfechtel. 2014. | Merging of EMF models - Formal foundations. | Softw. Syst. Model.  13, 2 (2014), 757–788. 
  Weyssow et al .  (2022) | Martin Weyssow, Houari Sahraoui, and Eugene Syriani. 2022. | Recommending metamodel concepts during modeling activities with pre-trained language models. | Software and Systems Modeling  21, 3 (2022), 1071–1089. 

 Generated on Tue May 28 19:05:33 2024 by L a  T e   XML