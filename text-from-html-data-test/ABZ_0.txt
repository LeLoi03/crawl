Book  Abstract State Machines, Alloy, B, TLA, VDM, and Z: 5th International Conference, ABZ 2016, Linz, Austria, May 23-27, 2016, Proceedings  
 January 2016 
  Lecture Notes in Computer Science 
    
 DOI: 10.1007/978-3-319-33600-8    
 ISBN: 978-3-319-33599-5 

 Authors:   
      
 Michael Butler    

 Michael Butler    
   
 This person is not on ResearchGate, or hasn't claimed this research yet. 

 Klaus-dieter Schewe    
 Zhejiang University 

 Atif Mashkoor    
 Johannes Kepler University Linz 

 Miklos Biro    
 Software Competence Center Hagenberg 

   Download citation     
   Copy link  Link copied      
         
      Copy link  Link copied    

 Citations (3)   

 Abstract  
   
 This book constitutes the refereed proceedings of the 5th International Conference on Abstract State Machines, Alloy, B, TLA, VDM, and Z, ABZ 2016, held in Linz, Austria, in May 2016. The 17 full and 15 short papers presented in this volume were carefully reviewed and selected from 61 submissions. They record the latest research developments in state-based formal methods Abstract State Machines, Alloy, B, Circus, Event-B, TLS+, VDM and Z.   

    Discover the world's research   
 25+ million members 
  160+ million publication pages 
  2.3+ billion citations 
  Join for free     

 Chapters (34)  

 Modeling Distributed Algorithms by Abstract State Machines Compared to Petri Nets    
   
 Conference Paper    

 May 2016 
  International Conference on Abstract State Machines, Alloy, B, TLA, VDM, and Z 
  pp.3-34 

 We show how to model distributed algorithms by Abstract State Machines (ASMs). Comparing these models with Petri nets (PNs) reveals a certain number of idiosyncrasies of PNs which complicate both model design and analysis. The ASMs we define illustrate how one can avoid such framework related technicalities.   

 A Universal Control Construct for Abstract State Machines    
   
 Conference Paper    

 May 2016 
  International Conference on Abstract State Machines, Alloy, B, TLA, VDM, and Z 
  pp.37-53 

 Abstract State Machines can be used to specify arbitrary system behaviour. However, when writing executable specifications one often has to write additional statements which organise how, e.g., in which order, the rules are executed. This reduces the readability and comprehensibility of specifications and can introduce additional defects to them. We propose a new syntax construct for the specification of control flow for the ASM language which improves the compactness and readability of specifications by providing syntactic elements for often manually realised behaviour. This construct enables to parametrise which rules shall be selected for execution and how the selected rules are executed. We illustrate how the control construct can improve the code’s readability on some examples. The proposed control construct is also released as a plugin for CoreASM.   

 Encoding TLA $$^{+}$$ + into Many-Sorted First-Order Logic    
   
 Conference Paper    

 May 2016 
  International Conference on Abstract State Machines, Alloy, B, TLA, VDM, and Z 
  pp.54-69 

 This paper presents an encoding of a non-temporal fragment of the \({\textsc {TLA}} ^{{+}}\) language, which includes untyped set theory, functions, arithmetic expressions, and Hilbert’s \(\varepsilon \) operator, into many-sorted first-order logic, the input language of state-of-the-art smt solvers. This translation, based on encoding techniques such as boolification, injection of unsorted expressions into sorted languages, term rewriting, and abstraction, is the core component of a back-end prover based on smt solvers for the \({\textsc {TLA}} ^{{+}}\) Proof System.   

 Proving Determinacy of the PharOS Real-Time Operating System    
   
 Full-text available    
 Conference Paper    

 May 2016 
  International Conference on Abstract State Machines, Alloy, B, TLA, VDM, and Z 
  pp.70-85 

 Executions in the PharOS real-time system are deterministic in the sense that the sequence of local states for every process is independent of the order in which processes are scheduled. The essential ingredient for achieving this property is that a temporal window of execution is associated with every instruction. Messages become visible to receiving processes only after the time window of the sending message has elapsed. We present a high-level model of PharOS in TLA+ and formally state and prove determinacy using the TLA+ Proof System.   

 A Rigorous Correctness Proof for Pastry    
   
 Conference Paper    

 May 2016 
  International Conference on Abstract State Machines, Alloy, B, TLA, VDM, and Z 
  pp.86-101 

 Peer-to-peer protocols for maintaining distributed hash tables, such as Pastry or Chord, have become popular for a class of Internet applications. While such protocols promise certain properties concerning correctness and performance, verification attempts using formal methods invariably discover border cases that violate some of those guarantees. Tianxiang Lu reported correctness problems in published versions of Pastry and also developed a model, which he called LuPastry, for which he provided a partial proof of correct delivery assuming no node departures, mechanized in the TLA\(^+\) Proof System. Lu’s proof is based on certain assumptions that were left unproven. We found counter-examples to several of these assumptions. In this paper, we present a revised model and rigorous proof of correct delivery, which we call LuPastry\(^+\). Aside from being the first complete proof, LuPastry\(^+\) also improves upon Lu’s work by reformulating parts of the specification in such a way that the reasoning complexity is confined to a small part of the proof.   

 Enabling Analysis for Event-B    
   
 Full-text available    
 Conference Paper    

 May 2016 
  International Conference on Abstract State Machines, Alloy, B, TLA, VDM, and Z 
  pp.102-118 

 In this paper we present a static analysis to determine how events influence each other in Event-B models. The analysis, called an enabling analysis, uses syntactic and constraint-based techniques to compute the effect of executing one event on the guards of another event. We describe the foundations of the approach along with the realisation in ProB. The output of the analysis can help a user to understand the control flow of a formal model. Additionally, we discuss how the information of the enabling analysis can be used to obtain a new optimised model checking algorithm. We evaluate both the performance of the enabling analysis and the new model checking technique on a variety of models. The technique is also applicable to B, TLA + , and Z models.   

 A Compact Encoding of Sequential ASMs in Event-B    
   
 Conference Paper    

 May 2016 
  International Conference on Abstract State Machines, Alloy, B, TLA, VDM, and Z 
  pp.119-134 

 We present a translation of sequential ASMs to Event-B specifications. The translation also addresses the partial update problem, and allows a variable to be updated (consistently) in parallel. On the theoretical side, the translation highlights the intricacies of ASM rule execution in terms of Event-B semantics. On the practical side, we show on a series of examples that the Event-B encoding remains compact and is amenable to proof within Rodin as well as animation and model checking using ProB.   

 Proof Assisted Symbolic Model Checking for B and Event-B    
   
 Conference Paper    

 May 2016 
  International Conference on Abstract State Machines, Alloy, B, TLA, VDM, and Z 
  pp.135-150 

 We have implemented various symbolic model checking algorithms, like BMC, k-Induction and IC3 for B and Event-B. The high-level nature of B and Event-B accounts for complicated constraints arising in these symbolic analysis techniques. In this paper we suggest using static information stemming from proof obligations to simplify occurring constraints. We show how to include proof information in the aforementioned algorithms. Using different benchmarks we compare explicit state to symbolic model checking as well as techniques with and without proof assistance. In particular for models with large branching factor, e.g., due to complicated data values being manipulated, the symbolic techniques fare much better than explicit state model checking. The inclusion of proof information results in further clear performance improvements.   

 On Component-Based Reuse for Event-B    
   
 Conference Paper    

 May 2016 
  International Conference on Abstract State Machines, Alloy, B, TLA, VDM, and Z 
  pp.151-166 

 Efficient reuse is a goal of many software engineering strategies and is useful in the safety-critical domain where formal development is required. Event-B can be used to develop safety-critical systems, but could be improved by a component-based reuse strategy. In this paper, we outline a component-based reuse methodology for Event-B. It provides a means for bottom-up scalability, and can also be used with the existing top-down approach. We describe the process of creating library components , their composition, and specification of new properties (involving the composed elements). We introduce Event-B component interfaces and propose to use a diagrammatic representation of component instances (based on iUML-B) which can be used to describe the relationships between the composed elements. We also discuss the specification of communication flow across component boundaries and describe the additional proof obligations that are required.   

 Using B and ProB for Data Validation Projects    
   
 Conference Paper    

 May 2016 
  International Conference on Abstract State Machines, Alloy, B, TLA, VDM, and Z 
  pp.167-182 

 Constraint satisfaction and data validation problems can be expressed very elegantly in state-based formal methods such as B. However, is B suited for developing larger applications and are there existing tools that scale for these projects? In this paper, we present our experiences on two real-world data validation projects from different domains which are based on the B language and use ProB as the central validation tool. The first project is the validation of university timetables, and the second project is the validation of railway topologies. Based on these two projects, we present a general structure of a data validation project in B and outline common challenges along with various solutions. We also discuss possible evolutions of the B language to make it (even) more suitable for such projects.   

 1  Recommendation 

 Generating Event-B Specifications from Algorithm Descriptions    
   
 Conference Paper    

 May 2016 
  International Conference on Abstract State Machines, Alloy, B, TLA, VDM, and Z 
  pp.183-197 

 We present a high-level algorithm description language which is translated to Event-B specifications for simulation, model checking and proof. Rather than trying to recover the program structure from a lower-level Event-B specification, we start with a high-level description of the algorithm. Our goals are more tractable code generation and more convenient modelling, while keeping the power of the Event-B method in terms of proof and refinement. We present various examples of algorithm descriptions and show that our translation ensures that they can be completely proven within Rodin while achieving a high-level of automatic proof.   

 Formal Proofs of Termination Detection for Local Computations by Refinement-Based Compositions    
   
 Conference Paper    

 May 2016 
  International Conference on Abstract State Machines, Alloy, B, TLA, VDM, and Z 
  pp.198-212 

 In this paper, we propose a formal framework enhancing the termination detection property of distributed algorithms and reusing their specifications as well as their proofs. By relying on refinement and composition, we show that an algorithm specified with local termination detection, can be reused in order to compute the same algorithm with global termination detection. The main idea relies upon the development of distributed algorithms following a top/down approach and the integration of additional computation steps developed in a pre-defined module. This module is specified in a generic and scalable way in order to be composed with particular developments. Once the composition link is proven, the global termination emerges automatically.   

 How to Select the Suitable Formal Method for an Industrial Application: A Survey    
   
 Conference Paper    

 May 2016 
  International Conference on Abstract State Machines, Alloy, B, TLA, VDM, and Z 
  pp.213-228 

 The share of formal methods is still marginal in contemporary systems and software engineering. One of the reasons is the absence of systematic guidelines and evaluation criteria that help software practitioners choose the right formal method for the problem at hand. In this paper, we present a comprehensive set of criteria, based on a systematic literature review and decade-long personal experience in industrial projects, for evaluating and comparing different formal methods. We argue that besides technical grounds (e.g., modeling capabilities and supported development phases), formal methods should also be evaluated from social and industrial perspectives. At the end of the paper, we present an evaluation of “ABZ” methods based on the stipulated criteria.   

 Unified Syntax for Abstract State Machines    
   
 Conference Paper    

 May 2016 
  International Conference on Abstract State Machines, Alloy, B, TLA, VDM, and Z 
  pp.231-236 

 The paper presents our efforts in defining UASM, a unified syntax for Abstract State Machines (ASMs), based on the syntaxes of two of the main ASM frameworks, CoreASM and ASMETA, which have been adapted to accept UASM as input syntax of all their validation and verification tools.   

 A Relational Encoding for a Clash-Free Subset of ASMs    
   
 Conference Paper    

 May 2016 
  International Conference on Abstract State Machines, Alloy, B, TLA, VDM, and Z 
  pp.237-243 

 This paper defines a static check for clash-freedom of ASM rules, including sequential and parallel composition, nondeterministic choice, and recursion. The check computes a formula that, if provable, makes a relational encoding of ASM rules possible, which is an important prerequisite for efficient deduction. The check is general enough to cover all sequential rules as well as many typical uses of parallel composition.   

 Towards an ASM Thesis for Reflective Sequential Algorithms    
   
 Full-text available    
 Conference Paper    

 May 2016 
  International Conference on Abstract State Machines, Alloy, B, TLA, VDM, and Z 
  pp.244-249 

 Starting from Gurevich’s thesis for sequential algorithms (the so-called “sequential ASM thesis”), we propose a characterization of the behaviour of sequential algorithms enriched with reflection. That is, we present a set of postulates which we conjecture capture the fundamental properties of reflective sequential algorithms (RSAs). Then we look at the plausibility of an ASM thesis for the class of RSAs, defining a model of abstract state machine (which we call reflective ASM) that we conjecture captures the class of RSAs as defined by our postulates.   

 A Model-Based Transformation Approach to Reuse and Retarget CASM Specifications    
   
 Conference Paper    

 May 2016 
  Abstract State Machines, Alloy, B, TLA, VDM, and Z - 5th International Conference, ABZ 2016 
  pp.250-255 

 The Abstract State Machine (ASM) theory is a way to specify algorithms, applications and systems in a formal model. Recent ASM languages and tools address either the translation of ASM specifications to a specific target programming language or aim at the execution in a specific environment. In this work-in-progress paper we outline a model-based transformation approach supporting (1) the specification of applications or systems using the Corinthian Abstract State Machine (CASM) modeling language and (2) retargeting those applications to different programming language and hardware target domains. An intermediate model is introduced, which not only captures software-based implementations, but also the generation of hardware-related code in the same model. This approach offers a new formal modeling perspective onto modular, reusable and retargetable software and hardware designs for the development of embedded systems. We provide a short overview of our CASM compiler design as well as the retargetable model-based approach to generate code for different target domains.   

 Modeling a Discrete Wet-Dry Algorithm for Hurricane Storm Surge in Alloy    
   
 Conference Paper    

 May 2016 
  International Conference on Abstract State Machines, Alloy, B, TLA, VDM, and Z 
  pp.256-261 

 We describe an Alloy model that helps check the correctness of a discrete wet-dry algorithm used in a system for hurricane storm surge prediction. Derived from simplified physics and encoded with empirical rules, the algorithm operates on a finite element mesh to allow the propagation of overland flows. Our study is motivated by complex interactions between the algorithm and a recent performance enhancement to the system that involves mesh partitioning. We briefly outline our approach and describe safety properties of the extension, as well as directions for future work.   

 ‘The Tinker’ for Rodin    
   
 Conference Paper    

 May 2016 
  International Conference on Abstract State Machines, Alloy, B, TLA, VDM, and Z 
  pp.262-268 

 PSGraph [3] is a graphical proof strategy language, which uses the formalisation of labelled hierarchical graphs to provide support for the development and maintenance of large and complex proof tactics. PSGraph has been implemented as the Tinker system, which previously supported the Isabelle and ProofPower theorem provers [4]. In this paper we present a Rodin version of Tinker, which allows Rodin users to encode, analyse and debug their proof strategies in Tinker.   

 A Graphical Tool for Event Refinement Structures in Event-B    
   
 Full-text available    
 Conference Paper    

 May 2016 
  Abstract State Machines, Alloy, B, TLA, VDM, and Z: Proceedings of the 5th International Conference, ABZ 2016, Linz, Austria, May 23-27, 2016 

 The Event Refinement Structures (ERS) approach provides a graphical extension of the Event-B formal method to represent event decomposition and control-flow explicitly. In this paper we present an improved version of the ERS plug-in, which provides a graphical environment for the ERS approach within the Event-B tool, Rodin. The improved ERS plug-in is based on the available frameworks that are developed to support Event-B with an EMF framework, language extensions and generic diagram extensions.   

 Rodin Platform Why3 Plug-In    
   
 Conference Paper    

 May 2016 
  International Conference on Abstract State Machines, Alloy, B, TLA, VDM, and Z 
  pp.275-281 

 We briefly present the motivation, architecture and usage experience as well as proof statistics for a new Rodin Platform proof back-end based on the Why3 umbrella prover. Why3 offers a simple and versatile notation as a common interface to a large number of automated provers including all the leading SMT-LIB and TPTP compliant tools. The plug-in can function either in a local mode when all the provers are installed locally, or remotely as a cloud service. We discuss the experience of building the tool, the current status and the potential advantages of a cloud-hosted proof infrastructure.   

 Semi-Automated Design Space Exploration for Formal Modelling    
   
 Conference Paper    

 Mar 2016 
  International Conference on Abstract State Machines, Alloy, B, TLA, VDM, and Z 

 Refinement based formal methods allow the modelling of systems through incremental steps via abstraction. Discovering the right levels of abstraction, formulating correct and meaningful invariants, and analysing faulty models are some of the challenges faced when using this technique. Here, we propose Design Space Exploration, an approach that aims to assist a designer by automatically providing high-level modelling guidance in real-time. More specifically, through the combination of common patterns of modelling with techniques from automated theory formation and automated reasoning, different design alternatives are explored and suitable models that deal with faults are proposed.   

 Handling Continuous Functions in Hybrid Systems Reconfigurations: A Formal Event-B Development    
   
 Conference Paper    

 May 2016 
  International Conference on Abstract State Machines, Alloy, B, TLA, VDM, and Z 
  pp.290-296 

 This paper presents a substitution mechanism for systems having a continuous behavior. It shall preserve the safety property stating that the output of both systems remain in a safety envelope. The whole approach is formalized using Event-B, and relies on the Rodin tools and a theory of Reals provided by the Rodin Theory Plug-in to check the internal consistency with respect to safety properties, invariants and events.   

 UC-B: Use Case Modelling with Event-B    
   
 Conference Paper    

 May 2016 
  International Conference on Abstract State Machines, Alloy, B, TLA, VDM, and Z 
  pp.297-302 

 Use cases are a popular but informal technique used to define and analyse system behaviour. We introduce UC-B a plug-in for the Rodin platform (Event-B tool) that supports the authoring and management of use case specifications with both informal and formal components. The formal component is based on Event-B’s mathematical language. Once the behaviour of the use case is specified, UC-B automatically generates a corresponding Event-B model. The resulting model is then amenable to the Rodin verification tools that enable system level properties to be verified. By underpinning informal use case modelling with Event-B we are able to provide greater precision and formal assurance during the early stages of design.   

 Interactive Model Repair by Synthesis    
   
 Conference Paper    

 May 2016 
  International Conference on Abstract State Machines, Alloy, B, TLA, VDM, and Z 
  pp.303-307 

 When using B or Event-B for formal specifications, model checking is often used to detect errors such as invariant violations, deadlocks or refinement errors. Errors are presented as counter-example states and traces and should help fixing the underlying bugs. We suggest automating parts of this process: Using a synthesis technique, we try to generate more permissive or restrictive guards or invariants. Furthermore, synthesized actions allow to modify the behaviour of the model. All this could be done with constant user feedback, yielding an interactive debugging aid.   

 SysML2B: Automatic Tool for B Project Graphical Architecture Design Using SysML    
   
 Conference Paper    

 May 2016 
  International Conference on Abstract State Machines, Alloy, B, TLA, VDM, and Z 
  pp.308-311 

 We present an approach to transform SysML structural diagrams, BDD and IBD with constraints, into a B Method project skeleton. This project can then be directly used for implementation development through usual B refinement mechanism. We prototyped this approach.   

 1  Recommendation 

 Mechanized Refinement of Communication Models with TLA $$^+$$ +    
   
 Conference Paper    

 May 2016 
  International Conference on Abstract State Machines, Alloy, B, TLA, VDM, and Z 
  pp.312-318 

 In distributed systems, asynchronous communication is often viewed as a whole whereas there are actually many different interaction protocols whose properties are involved in the compatibility of peer compositions. A hierarchy of asynchronous communication models, based on refinements, is established and proven with the TLA\(^+\) Proof System. The work serves as a first step in the study of the substituability of the communication models when it comes to compatibility checking.   

 A Super Industrial Application of PSGraph    
   
 Conference Paper    

 May 2016 
  International Conference on Abstract State Machines, Alloy, B, TLA, VDM, and Z 
  pp.319-325 

 The ClawZ toolset has been successful in verifying that Ada code is correctly generated from Simulink models in an industrial setting, using the Z notation. D-RisQ is now extending this technique to new domains of the C programming language, which requires changes to their highly complex proof technique. In this paper, we present initial results in the technology transfer of the graphical PSGraph language to support this extension, and show feasibility of PSGraph for industrial use with strong maintainability requirements.   

 The Hemodialysis Machine Case Study    
   
 Full-text available    
 Conference Paper    

 May 2016 
  International Conference on Abstract State Machines, Alloy, B, TLA, VDM, and Z 
  pp.329-343 

 This documents presents a description of a case study concerning the control of a hemodialysis (HD) machine. It provides an overview of the requirements and the design of an HD machine including a sketch of the machine’s functionality, related safety conditions, and a top-level system architectural description.   

 How to Assure Correctness and Safety of Medical Software: The Hemodialysis Machine Case Study    
   
 Conference Paper    

 May 2016 
  International Conference on Abstract State Machines, Alloy, B, TLA, VDM, and Z 
  pp.344-359 

 Medical devices are nowadays more and more software dependent, and software malfunctioning can lead to injuries or death for patients. Several standards have been proposed for the development and the validation of medical devices, but they establish general guidelines on the use of common software engineering activities without any indication regarding methods and techniques to assure safety and reliability. This paper takes advantage of the Hemodialysis machine case study to present a formal development process supporting most of the engineering activities required by the standards, and provides rigorous approaches for system validation and verification. The process is based on the Abstract State Machine formal method and its model refinement principle.   

 Validating the Requirements and Design of a Hemodialysis Machine Using iUML-B, BMotion Studio, and Co-Simulation    
   
 Conference Paper    

 May 2016 
  ABZ 2016 
  pp.360-375 

 We present a formal specification of a hemodialysis machine (HD machine) using Event-B. We model the HD machine using iUML-B state-machines and class diagrams and build a corresponding BMotion Studio visualisation. We focus on validation using (i) diagrams to aid the modelling of the sequential properties of the requirements, and (ii) ProB-based animation and visualisation tools to explore the system’s behaviour. Some of the safety properties involve dynamic behaviour which is difficult to verify in Event-B. For these properties we use co-simulation tools to validate against a continuous model of the physical behaviour.   

 Hemodialysis Machine in Hybrid Event-B    
   
 Conference Paper    

 May 2016 
  International Conference on Abstract State Machines, Alloy, B, TLA, VDM, and Z 
  pp.376-393 

 The hemodialysis machine case study is examined in Hybrid Event-B (an extension of Event-B that includes provision for continuously varying behaviour as well as the usual discrete changes of state). A broadly component based strategy is adopted, using the multi-machine and coordination facilities of Hybrid Event-B. Since, like most medical procedures, hemodialysis is under overall human control, it is largely a sequential process, with some branching to deal with exceptional circumstances. This makes for a relatively uncomplicated modelling framework, provided a model of the operator is included in order to capture the handling of exceptions.   

 Modelling a Hemodialysis Machine Using Algebraic State-Transition Diagrams and B-like Methods    
   
 Full-text available    
 Conference Paper    

 May 2016 
  International Conference on Abstract State Machines, Alloy, B, TLA, VDM, and Z 
  pp.394-408 

 This paper presents the specification of the hemodialysis case study, proposed by ABZ’16 conference. The specification was carried out by a coupling of Algebraic State-Transition Diagrams (astd) and B-like methods. astd are a graphical notation, based on automata and process algebra operators. They provide an easy-to-read specification of the dynamic behaviour of the system. The data model is specified using the Event-B language. The system is incrementally designed using extended refinement of both methods.   

 Modelling the Haemodialysis Machine with Circus    
   
 Full-text available    
 Conference Paper    

 May 2016 
  International Conference on Abstract State Machines, Alloy, B, TLA, VDM, and Z 
  pp.409-424 

 We present a formal model of aspects of the haemodialysis machine case study using the Circus specification notation. We focus on building a model in which each of the software requirements (R-1–36) are represented by a Circus action. All of these act in concert with actions that model the collection of sensor data and the progress through the various therapy phases and activities. We then present how we model check the system using FDR.   

 Citations (3)  

  References (0)  

 ... RISCAL is not the first attempt to apply model checking technology in formal modeling: various other modeling languages support checking respectively counterexample generation [6]  , differing from RISCAL mainly in the application domain of the language and/or the exhaustiveness of the analysis. The development of RISCAL has been very much inspired by the TLA Toolbox which incorporates a model checker for a subset of TLA+ [11]; also the use of unspecified constants as model bounds has been inspired by this toolkit. ...   

 Theorem and Algorithm Checking for Courses on Logic and Formal Methods    
   
 Article    
 Full-text available    
 Mar 2019 

 Wolfgang Schreiner 
    
 The RISC Algorithm Language (RISCAL) is a language for the formal modeling of theories and algorithms. A RISCAL specification describes an infinite class of models each of which has finite size; this allows to fully automatically check in such a model the validity of all theorems and the correctness of all algorithms. RISCAL thus enables us to quickly verify/falsify the specific truth of propositions in sample instances of a model class before attempting to prove their general truth in the whole class: the first can be achieved in a fully automatic way while the second typically requires our assistance. RISCAL has been mainly developed for educational purposes. To this end this paper reports on some new enhancements of the tool: the automatic generation of checkable verification conditions from algorithms, the visualization of the execution of procedures and the evaluation of formulas illustrating the computation of their results, and the generation of Web-based student exercises and assignments from RISCAL specifications. Furthermore, we report on our first experience with RISCAL in the teaching of courses on logic and formal methods and on further plans to use this tool to enhance formal education.    

 View     
 Show abstract      

 ... Regarding the activity applied to the case studies, we can draw the following observations. The hemodialysis machine case study is modeled by [24][25][26][27] [28]  [29][30][31][32][33]. Some of them perform validation [25,[30][31][32] and verification [24, 25, 27-29, 32, 33]. ...   

 A systematic literature review of the use of formal methods in medical software systems: SLR of the use of Formal Methods in Medical Software Systems    
   
 Article    
 Full-text available    
 Feb 2018 

 Silvia Bonfanti 
  Angelo Gargantini 
  Atif Mashkoor 
    
 The use of formal methods is often recommended to guarantee the provision of necessary services and to assess the correctness of critical properties, such as functional safety, cybersecurity, and reliability, in medical and health care devices. In the past, several formal and rigorous methods have been proposed and consequently applied for trustworthy development of medical software and systems. In this paper, we perform a systematic literature review on the available state of the art in this domain. We collect the relevant literature on the use of formal methods for modeling, design, development, verification, and validation of software-intensive medical systems. We apply standard systematic literature review techniques and run several queries in well-known repositories to obtain information that can be useful for people who are either already working in this field or planning to start. Our study covers both quantitative and qualitative aspects of the subject.    

 View     
 Show abstract      

 Validating Mathematical Theorems and Algorithms with RISCAL: 11th International Conference, CICM 2018, Hagenberg, Austria, August 13-17, 2018, Proceedings    
   
 Chapter    
 Jul 2018 
  Lect Notes Comput Sci 

 Wolfgang Schreiner 
    
 RISCAL is a language for describing mathematical algorithms and formally specifying their behavior with respect to user-defined theories in first-order logic. This language is based on a type system that constrains the size of all types by formal parameters; thus a RISCAL specification denotes an infinite class of models of which every instance has finite size. This allows the RISCAL software to fully automatically check in small instances the validity of theorems and the correctness of algorithms. Our goal is to quickly detect errors respectively inadequacies in the formalization by falsification in small model instances before attempting actual correctness proofs for the whole model class.    

 View     
 Show abstract      

 ResearchGate has not been able to resolve any references for this publication.   

 Recommended publications  
   
 Discover more    

 Book    
   
 Automated Technology for Verification and Analysis: 15th International Symposium, ATVA 2017, Pune, I...   
 January 2017  · Lecture Notes in Computer Science    
 Deepak D'Souza 
  K. Narayan Kumar 
  This book constitutes the refereed proceedings of the 15th International Symposium on Automated Technology for Verification and Analysis, ATVA 2017, held in Pune, India, in October 2017. The 22 full and 7 short papers presented in this volume were carefully reviewed and selected from 78 submissions. The book also contains one invited talk in full-paper length. The contributions are organized in ... [Show full abstract]  topical sections named: program analysis; model checking and temporal logics; neural networks; learning and invariant synthesis; and hybrid systems and control.    
 Read more    

 Article    
 Full-text available    
   
 Formally Modeling a Metal Processing Plant and its Closed Loop Specifications   
 February 1970    
 Enrico Tronci 
  We present a case study on automatic synthesis of control software from formal specifications for an industrial automation control system. Our aim is to compare the effectiveness (i.e. design effort and controller quality) of automatic controller synthesis from closed loop formal specifications with that of manual controller design followed by automatic verification. The system to be controlled ... [Show full abstract]  (plant) models a metal processing facility near Karlsruhe. We succeeded in automatically generating C code implementing a (correct by construction) embedded controller for such a plant from closed loop formal specifications. Our experimental results show that for industrial automation control systems automatic synthesis is a viable and profitable (especially as far as design effort is concerned) alternative to manual design followed by automatic verification. Key Words Formal Methods, Model Checking, Control Systems, Finite State Systems, Reactive Systems, Hybrid Systems, Discrete Event Systems...    
 View full-text    

 Article    
   
 Formal verification of hybrid systems   
 October 2006    
 M. Fang 
  Y.-S. Zhang 
  H. Li 
  The conception of formal verification of hybrid systems was introduced. The current formal verification methods of hybrid systems and the verification tools were compared according to representations and computational techniques of the reachable sets. The emphasis was put on the convergent approximation methods and the over approximation methods in the model checking. The algorithm adopted in the ... [Show full abstract]  verification tool CheckMate and its application on a chemical process system was introduced in details. Finally, the open problems and the future research directions were analyzed.    
 Read more    

 Conference Paper    
   
 The Symbolic Approach to Hybrid Systems   
 July 2002  · Lecture Notes in Computer Science    
 Thomas A. Henzinger 
  A hybrid system is a dynamical system whose state has both a discrete component, which is updated in a sequence of steps, and a continuous component, which evolves over time. Hybrid systems are a useful modeling tool in a variety of situations, including the embedded (digital) control of physical (analog) plants, robotics, circuits, biology, and finance. We survey a computational approach to the ... [Show full abstract]  verification and control of hybrid systems which is based on the symbolic discretization of continuous state changes. On the theoretical side, we classify infinite, hybrid state spaces as to which finite, discrete abstractions they admit. This classification enables us to apply concepts and results from concurrency theory, model checking, and game theory to hybrid systems. On the practical side, we discuss several options for implementing the symbolic approach to hybrid systems, and point to existing tool support.    
 Read more    

 Conference Paper    
 Full-text available    
   
 Automatic Verification of Hybrid Systems with Large Discrete State Space   
 October 2006  · Lecture Notes in Computer Science    
 Werner Damm 
  Stefan Disch 
  Hardi Hungar 
  [...] 
  Boris Wirtz 
  We address the problem of model checking hybrid systems which exhibit nontrivial discrete behavior and thus cannot be treated by considering the discrete states one by one, as most currently available verification tools do. Our procedure relies on a deep integration of several techniques and tools. An extension of AND-Inverter-Graphs (AIGs) with first-order constraints serves as a compact ... [Show full abstract]  representation format for sets of configurations which are composed of continuous regions and discrete states. Boolean reasoning on the AIGs is complemented by first-order reasoning in various forms and on various levels. These include implication checks for simple constraints, test vector generation for fast inequality checks of boolean combinations of constraints, and an exact subsumption check for representations of two configurations. These techniques are integrated within a model checker for universal CTL. Technically, it deals with discrete-time hybrid systems with linear differentials. The paper presents the approach, its prototype implementation, and first experimental data.    
 View full-text    

 Article    
 Full-text available    
   
 Hybrid System Verification Is not a Sinecure - the Electronic Throttle Control Case Study.   
 January 2006    
 Ansgar Fehnker 
  Bruce H. Krogh 
  Though model checking itself is a fully automated process, verifying correctness of a hybrid system design using model checking is not. This paper describes the necessary steps, and choices to be made, to go from an informal description of the problem to the final verification result for a formal model and requirement. It uses an automotive control system for illustration.   
 View full-text    

 Conference Paper    
 Full-text available    
   
 Hybrid System Verification Is Not a Sinecure: The Electronic Throttle Control Case Study.   
 January 2004  · International Journal of Foundations of Computer Science    
 Ansgar Fehnker 
  Bruce H. Krogh 
  Though model checking itself is a fully automated process, verifyingcorrectness of a hybrid system design using model checking is not. This paperdescribes the necessary steps, and choices to be made, to go from an informaldescription of the problem to the final verification result for a formal model andrequirement. It uses an automotive control system for illustration.   
 View full-text    

 Article    
   
 Formal Non-Fragile Stability Verification of Digital Control Systems with Uncertainty   
 January 2016  · IEEE Transactions on Computers    
 Iury Bessa 
  Hussama Ismail 
  Reinaldo Martínez Palhares 
  [...] 
  João Edgar Filho 
  A verification methodology is described and evaluated to formally determine uncertain linear systems stability in digital controllers with considerations to the implementation aspects. In particular, this methodology is combined with the digital-system verifier (DSVerifier), which is a verification tool that employs Bounded Model Checking based on Satisfiability Modulo Theories to check the ... [Show full abstract]  stability of digital control systems with uncertainty. DSVerifier determines the control system stability, considering all the plant interval variation set, together with the Finite Word-length (FWL) effects in the digital controller implementation; DSVerifier checks the robust non-fragile stability of a given closed-loop system. The proposed methodology and respective tool are evaluated considering non-fragile control examples from literature. Experimental results show that the approach used in this study is able to foresee fragility problems in robust controllers, which could be overlooked by other existing approaches due to underestimating of FWL effects.    
 Read more    

 Conference Paper    
   
 Statistical Model Checking for Safety Critical Hybrid Systems: An Empirical Evaluation   
 January 2013  · Lecture Notes in Computer Science    
 Youngjoo Kim 
  Moonzoo Kim 
  Tai-Hyo Kim 
  As more computing systems are utilized in various areas of our society, the reliability of computing systems becomes a significant issue. However, as the complexity of computing systems increases, conventional verification and validation techniques such as testing and model checking have limitations to assess reliability of complex safety critical systems. Such systems often control highly ... [Show full abstract]  complex continuous dynamics to interact with physical environments. To assure the reliability of safety critical hybrid systems, statistical model checking (SMC) techniques have been proposed. SMC techniques approximately compute probabilities for a target system to satisfy given requirements based on randomly sampled execution traces. In this paper, we empirically evaluated four state-ofthe- art SMC techniques on a fault-tolerant fuel control system in the automobile domain. Through the experiments, we could demonstrate that SMC is practically useful to assure the reliability of a safety critical hybrid system and we compared pros and cons of the four different SMC techniques.    
 Read more    

 Article    
   
 Verification of an active control system using temporal process Algebra   
 January 1996  · Engineering with Computers    
 Wael M. Elseaidy 
  John W. Baugh 
  Rance Cleaveland 
  In this paper we describe complementary approaches that can be used to ensure the reliability of real-time systems, such as those used in active structural control systems. These approaches include both model-checking and simulation, and are based on a temporal process algebra. We combine these formal methods with a high-level, graphical modeling technique, Modechart, to specify an active ... [Show full abstract]  structural control system consisting of several processors. Timing requirements on the system are specified and verified with a combination of process algebraic models and modal logic, and various simulation concepts are described for debugging models and for gaining insight into system behavior.    
 Read more    

 Article    
   
 Behavior Verification of Hybrid Real-time Requirements by Qualitative Formalism (An Extended Abstrac...   
 January 1970    
 Jang-Soo Lee 
  Although modern control theories have been successfully applied in solving a variety of problems, they are often mathematically and physically too specific to describe and analyze qualitative properties of hybrid real-time systems. In this paper, we propose to use qualitative formal methods, Compositional Modeling Language (CML) and Causal Functional Representation Language (CFRL) in particular, ... [Show full abstract]  to specify continuous plant dynamics and the required system behavior and to simulate system behavior using a qualitative simulator known as the Device Modeling Environment (DME). Using Electrical Power System (EPS) as an example, we demonstrate effectiveness of our approach by illustrating how a simple SCR-style specification can be transformed and analyzed.    
 Read more    

 Chapter    
 Full-text available    
   
 Compositional Verification of Continuous-Discrete Systems   
 January 1970  · Lecture Notes in Control and Information Sciences    
 Ralf Huuck 
  Ben Lukoschus 
  Goran Frehse 
  Sebastian Engell 
  Hybrid systems are well-suited as a design and modeling framework to describe the interaction of discrete controllers with a continuous environment. However, the systems described are often complex and so are the resulting models. Therefore, a formal framework and a formal verification to prove the correctness of system properties is highly desirable. Since complexity is inherent, standard formal ... [Show full abstract]  verification techniques like model checking soon reach their limits. In this work we present several options how to tackle the complexity arising in the formal verification of hybrid systems. In particular we combine the model checking approach with abstraction and decomposition techniques such as the assumption/commitment method as well as deductive methods.    
 View full-text    

 Last Updated: 22 Oct 2024    

 Looking for the full-text?  
 You can request the full-text of this book directly from the authors on ResearchGate.  
 Request full-text     
   
 Already a member? Log in    

 ResearchGate iOS App    
   
 Get it from the App Store now.   

 Install     

 Keep up with your stats and more   

 Access scientific knowledge from anywhere   

 or   
   
 Discover by subject area     

 Recruit researchers 
  Join for free 
  Login      Email   Tip:  Most researchers use their institutional email address as their ResearchGate login         Password  Forgot password?      Keep me logged in   Log in    or    Continue with Google                
 Welcome back! Please log in.        Email · Hint  Tip:  Most researchers use their institutional email address as their ResearchGate login          Password   Forgot password?       Keep me logged in    Log in    or    Continue with Google       No account? Sign up 

 Company   
 About us    
 News    
 Careers    

 Support   
 Help Center    

 Business solutions   
 Advertising    
 Recruiting    

 © 2008-2024 ResearchGate GmbH. All rights reserved.   
   
 Terms 
  Privacy 
  Copyright 
  Imprint 
  Consent preferences