Skip to content    
      CALCO 2023 & MFPS XXXIX    
 General Information    
 Home 
  CALCO 
  MFPS 
  Local Information 
  Programme 
  Registration 
   CALCO 2023 & MFPS XXXIX  Home 
  CALCO | CALCO  General Information 
  Submission Information 
  Awards 
  Accepted Papers 
  Full Call For Papers 
  MFPS | MFPS  General Information | General Information | Table of contents  Important Dates 
  PC Chairs 
  Programme Committee 
 MFPS conferences are dedicated to the areas of mathematics, logic, and computer science that are related to models of computation in general, and to semantics of programming languages in particular. This is a forum where researchers in mathematics and computer science can meet and exchange ideas. The participation of researchers in neighbouring areas is strongly encouraged.  
 Topics include, but are not limited to, the following: bio-computation; concurrent qualitative and quantitative distributed systems; process calculi; probabilistic systems; constructive mathematics; domain theory and categorical models; formal languages; formal methods; game semantics; lambda calculus; programming-language theory; quantum computation; security; topological models; logic; type systems; type theory.  
 MFPS 2023 will take place at Indiana University Bloomington, with an option for remote participation.  
 The proceedings of both CALCO 2023  and MFPS XXXIX  are published.  
 Important Dates  
 Abstract Submission: | April 1, 2023 | (extended) 
  Paper Submission: | April 8, 2023 | (extended) 
  Notification: | May 12, 2023 
  Pre-proceedings : | June 2, 2023 
  Conference dates : June 20 - June 23, 2023 
  Final (post-proceeding) versions : Autumn 2023 
  All dates are “Anywhere on Earth”.  
 PC Chairs  
 In this talk we discuss Calf, the Cost-Aware Logical Framework, which is an extension of dependent call-by-push-value type theory that provides an intrinsic account of both parallel and sequential resource usage for a variety of problem-specific measures of cost. Thus, for example, it is possible to prove that insertion sort and merge sort are equal as regards behavior, but differ in terms of the number of comparisons required to achieve the same results. But how can equal functions have different cost? To provide an intrinsic account of both intensional and extensional properties of programs, we make use of Sterling's notion of Synthetic Tait Computability, a generalization of Tait's method originally developed for the study of higher type theory.  
 In STC the concept of a ``phase'' plays a central role: originally as the distinction between the syntactic and semantic aspects of a computability structure, but more recently applied to the formulation of type theories for program modules and for information flow properties of programs. In Calf we distinguish two phases, the intensional and extensional, which differ as regards the significance of cost accounting---extensionally it is neglected, intensionally it is of paramount importance. Thus, in the extensional phase insertion sort and merge sort are equal, but in the intensional phase they are distinct, and indeed one is proved to have optimal behavior as regards comparisons, and the other not. Importantly, both phases are needed in a cost verification---the proof of the complexity of an algorithm usually relies on aspects of its correctness.  
 We will provide an overview of Calf itself, and of its application in the verification of the cost and behavior of a variety of programs. So far we have been able to verify cost bounds on Euclid's Algorithm, amortized bounds on batched queues, parallel cost bounds on a joinable form of red-black trees, and the equivalence and cost of the aforementioned sorting methods. In a companion paper at this meeting Grodin and I develop an account of amortization that relates the standard inductive view of instruction seequences with the coinductive view of data structures characterized by the same operations. In ongoing work we are extending the base of verified deterministic algorithms to those taught in the undergraduate parallel algorithms course at Carnegie Mellon, and are extending Calf itself to account for probabilistic methods, which are also used in that course.  
 Assia Mahboubi | , Inria (Joint with CALCO) 
  Machine-checked computational mathematics  
 Alex Simpson | , University of Ljubljana 
  Probabilistic Programming with Coinductive Data  
 Many stochastic processes can be represented as probabilistically generated coinductive data, produced by programs that utilise a principle of probabilistic corecursion. Mathematically this principle is justified because the categories of deterministic and probabilistic maps enjoy an unusual coincidence of final coalgebras. Based on these observations, I shall present a simple programming language combining recursion, corecursion and probability with a lazy operational semantics. I shall argue that the correctness proof for the operational semantics is most easily carried out in a set theory in which all sets are measurable.  
 Joint work with Danel Ahman and Léo Soudant  
 Special Sessions  
 Yannick Forster | , Inria 
  Synthetic Computability in Constructive Type Theory  
 Mathematical practice in most areas of mathematics is based on the assumption that proofs could be made fully formal in a chosen foundation in principle. This assumption is backed by decades of formalising various areas of mathematics in various proof assistants and various foundations. An area that has been largely neglected for computer-assisted and machine-checked proofs is computability theory. This is due to the fact that making computability theory (and its sibling complexity theory) formal is several orders of magnitude more involved than formalising other areas of mathematics, due to the -- citing Emil Post -- ``forbidding, diverse and alien formalisms in which this [...] work of Gödel, Church, Turing, Kleene, Rosser [...] is embodied.''. For instance, there have been various approaches of formalising Turing machines, all to the ultimate dissatisfaction of the respective authors, and none going further than constructing a universal machine and proving the halting problem undecidable. Professional computability theorist and teachers of computability theory thus rely on the informal Church Turing thesis to carry out their work and only argue the computability of described algorithms informally.  
 We observe that a slight foundational shift rectifies the situation: By basing synthetic computability theory in the Calculus of Inductive Constructions, the type theory underlying amongst others the Coq proof assistant, where countable choice is independent and thus not provable axioms for synthetic computability are compatible with the law of excluded middle.  
 Contact  
 For any further information about MFPS 2023, please contact the co-chairs: Marie Kerjean ( kerjean@lipn.fr  ) and Paul Levy ( P.B.Levy@bham.ac.uk  ).  
 Made with Material for MkDocs