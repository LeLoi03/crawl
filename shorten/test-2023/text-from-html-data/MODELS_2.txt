 Abstract.  
 Model-Driven Engineering (MDE) provides a huge body of knowledge of automation for many different engineering tasks, especially those involving transitioning from design to implementation. With the huge progress made on Artificial Intelligence (AI) techniques, questions arise for the future of MDE such as how existing MDE techniques and technologies can be improved or how other activities which currently lack dedicated support can also be automated. However, at the same time, it has to be revisited where and how models should be used to keep the engineers in the loop for creating, operating, and maintaining complex systems. To trigger dedicated research on these open points, we discuss the history of automation in MDE and present perspectives on how automation in MDE can be further improved and which obstacles have to be overcome in the medium and long term perspective.  
 Maintaining models  to ensure their accuracy and relevance over time can be automated through continuous integration tools that integrate model changes, run automated validations, and report inconsistencies or errors. Automated testing frameworks for models also contribute to maintenance by ensuring that model updates do not break existing functionalities.  
 2.2.  Automation-Enabling Techniques  
 From the very beginnings of MDE, automation emerged as a fundamental pillar. Numerous works have employed direct approaches based on heuristics to automate or semi-automate certain activities directly on the models’ representations. Other works have relied on established automation technologies to achieve this automation. In the remainder of this section, we discuss four families of these technologies: formal methods  , search-based techniques  , extensional and intensional knowledge engineering approaches  , and artificial intelligence  .  
 2.2.1.  Formal Methods  
 Due to their rigor and precision, formal methods have been utilized for specifying, analyzing, and verifying various artifacts in MDE. The literature is abundant with contributions on the application of formal methods for automating various MDE tasks. However, we limit ourselves to a few examples of their most common uses.  
 The remarkable power of LLMs has partially alleviated this problem. Thus, it became possible to automate several modeling tasks with little or no training data. However, the effectiveness of using LLMs for this purpose varies, as Camara et al. (Cámara et al .  , 2023  )  highlight. Ben Chaaben et al. explored the application of LLMs for static and dynamic domain-model completion (Chaaben et al .  , 2023  )  . Model generation with LLMs has also garnered significant interest among researchers, encompassing diverse model types such as goal models (Chen et al .  , 2023a  )  and static domain models (Chen et al .  , 2023b  )  .  
 2.3.  Mapping between Activities and Enabling Technologies  
 The aim of this subsection is to present a mapping between the previously presented modeling activities and the enabling technologies. This mapping does not intend to be exhaustive by any means but wants to present illustrative examples. Table 1   11  11  11  Since a metamodel is a model (in particular, a model of a model), some of these activities apply to both models and metamodels. For the sake of brevity, we only refer to models.    shows activities in its rows and technologies in its columns (the column “Direct” contains examples of approaches providing automation support directly for the model representations without moving to an already existing automation space). Each cell contains a maximum of two exemplary works, appended with a ‘+’ if the state of the art is more extensive and includes further works. Cells with only one work mean that we could not find more examples for that activity and technology. Empty cells mean that we could not find any example.  
 Activities | Enabling Technologies 
 Model completion 
 Models at runtime 
 Model classification 
 Management of ever-increasing diversity of languages and tools:  MDE has seen a proliferation of domain-specific modeling languages and tools, which has led to a diverse range of technologies. However, this diversity has posed challenges for generic  automation as each modeling language has its own syntax, semantics, and transformation rules. Despite efforts to standardize syntax, the MDE field still needs comprehensive standards, especially concerning semantics, transformation rules, and model interchange formats. Moreover, the rise of low-code/no-code platforms makes this issue even more difficult as adherence to existing standards becomes increasingly sporadic. Thus, it is imperative to develop standardized interfaces, transformation mechanisms, and model interchange formats to ensure interoperability and tooling support across different formalisms, languages, and paradigms.  
 Combination of symbolic and non-symbolic AI  : Integrating symbolic AI techniques, such as logic reasoning and rule-based systems, with non-symbolic approaches, such as neural networks and deep learning, offers opportunities for enhancing automation in MDE. By leveraging the complementary strengths of both paradigms, researchers can develop hybrid AI systems that excel in tasks requiring both symbolic reasoning and pattern recognition. For example, combining symbolic reasoning with neural networks enables MDE tools to interpret and manipulate models based on logical constraints while leveraging the scalability and flexibility of neural networks for data-driven tasks or even exploiting generative AI tools to synthesize models that are domain or context-aware.  
 Emancipation from formal languages with LLMs  : Creating domain-specific modeling languages is a crucial undertaking that involves collaboration between different roles, including language and domain experts. This collaborative effort encompasses various steps, including developing concrete syntaxes, the definition of formal semantics, and the construction of supportive modeling environments. However, the language development process can be challenging, often necessitating refinement of language definitions to refine user requirements or address unforeseen ones. LLMs offer a promising option for the early evaluation of languages by specifying their semantics in natural language and facilitating early analysis and stakeholder interactions to validate whether the language aligns with user requirements.  
 Template-based code generation vs. AI-based code generation  : While template-based methods provide transparency and control over the generated code, AI-based approaches offer adaptability and potential for optimizing code generation based on diverse requirements and contexts. Researchers can develop code-generation techniques by exploring hybrid approaches that combine the strengths of both paradigms.  
 Model management automation with AI approaches  : AI-driven techniques can enhance model management processes by improving semantic understanding and context-aware manipulation of models. By leveraging AI for tasks such as model differencing, merging, and versioning, MDE can achieve greater efficiency and reliability in managing evolving model artifacts. For example, AI algorithms can analyze the semantics of models to detect and resolve (or propose how to resolve) conflicts during model merging, thereby reducing manual effort and potential errors in model integration.  
 Moving from general LLMs to task-specific AI agents:  In the traditional context of MDE, a platform typically denotes a particular technology stack or execution environment. However, with the increasing adoption of LLMs, the platform concept expands to encompass a collaborative ecosystem of multiple language models operating together within a multi-agent system. Specifically, we foresee a paradigm shift towards the widespread adoption of task-specific AI agents driven by LLMs. These specialized agents are designed to execute various model management tasks, such as model evolution, comparison, domain modeling, training and test data generation, and model completion (Hong et al .  , 2023  )  .  
 Democratizing the usage of task-specific AI agents:  To enable the usage of task-specific AI agents, it is necessary to devise low-code platforms that empower users to leverage task-specific AI agents seamlessly. Such platforms can facilitate broader participation in MDE activities across domains and expertise levels by providing intuitive interfaces for coordinating diverse AI models. Moreover, low-code platforms can serve as orchestrators for deploying and managing AI agents, allowing users to customize and extend automation capabilities according to their specific requirements and preferences.  
 Combination of physical/biological/social/software aspects in complex systems:  Integrating physical, biological, social, and software aspects into the same system presents a multifaceted challenge that requires a comprehensive approach to modeling and abstraction. MDE stands as an ideal integration vehicle for managing these heterogeneous aspects by providing a unified framework for representing and analyzing complex systems. Digital twins, which are virtual replicas of physical entities or systems, offer a powerful abstraction mechanism for simulating and analyzing the behavior of interconnected systems. By leveraging digital twins, MDE can facilitate the design and optimization of integrated systems across diverse domains, ranging from healthcare to sustainable smart cities.  
 Feedback-driven MDE:  MDE tools and processes will need built-in feedback mechanisms. This feedback could come from engineers, stakeholders or the system itself (i.e., in the form of real-time data) and could be sporadic or continuous. Tools, processes and teams should not disregard feedback. New methodologies to work in a new environment where automated feedback integration are needed, too. A straightforward scenario is Digital Twins. For instance, Digital Twins can be used for product development, where design and engineering teams can investigate a broader range of design possibilities early in the development, saving money, resources and time. In such a scenario, the engineering processes must be adapted to collect and react to the outputs/feedback received by the Digital Twin, and engineering teams must have methodologies put in place.  
 Automated and semi-automated decision-making in MDE:  As software and systems grow in complexity and the demands for faster delivery increase, automating decision-making processes becomes needed to improve efficiency and quality. On a purely technical level, automated decision-making will help choose the best transformation languages, model checkers, AI algorithms, execution models, etc. Furthermore, it would ensure that decisions are made consistently throughout the life of a project and by different teams. It would also prevent human error in repetitive decision-making processes (e.g., tools enhanced with automated support could exploit data and human-defined objectives to make or suggest optimal decisions).  
 The advent of LLMs presents new opportunities for dataset creation in various domains. With the ability to generate human-like text and simulate expert knowledge, LLMs offer a cost-effective alternative to traditional human labeling methods. For instance, LLMs can automatically generate labeled datasets for MDE tasks such as model classification or sentiment analysis. Additionally, LLMs can serve as judges to evaluate the quality and accuracy of tasks performed by other LLMs, thereby facilitating continuous improvement and refinement of AI-driven systems.  
 Better modeling tools:  Despite significant advancements in modeling tools, many existing tools in MDE are tailored towards expert users and lack intuitive interfaces for non-specialists. This poses challenges for automation and democratizing the adoption of MDE methodologies across diverse domains and user communities (Ruscio et al .  , 2022  )  . Improving the accessibility and usability of modeling tools requires incorporating user-centered design principles, conducting usability studies, and providing comprehensive documentation and training materials. Additionally, ensuring compatibility and interoperability between different modeling tools and environments is essential for facilitating seamless collaboration and exchange of models among users with varying expertise levels.  
 Teaching people how to prompt:  Despite the advancements in AI and automation, human expertise remains indispensable in designing complex systems and formulating effective prompts for AI models. Teaching people how to prompt effectively involves imparting knowledge and skills in understanding system requirements, defining clear objectives, and structuring prompts to elicit desired responses from AI models. Thus, human expertise is essential for ensuring the accuracy, relevance, and ethical considerations of AI-generated outputs.  
 Teaching MDE:  Given the rapid evolution of technology and MDE, teaching MDE needs to be adapted to the fast-evolving needs. Educators must prepare students not just to be proficient modelers, but to be architects of highly complex software and systems that leverage automation and MDE techniques to meet the demands of industry and society. Incorporating new technologies in teaching MDE can significantly improve the learning experience. For instance, the use of simulation tools, multidimensional visualization software, and other interactive applications can provide a more immersive and engaging learning experience.  
 4.  Conclusion  
 MDE has proven its utility over time, primarily due to its remarkable capabilities in abstraction and automation. These features have significantly streamlined the development process, from conceptualizing ideas to their implementation. This article delves into the various facets of MDE activities and the diverse technologies that have been deployed to automate these activities.  
 The evolution of MDE is closely intertwined with the emergence of cutting-edge technologies, such as deep learning and large language models. These advancements have revolutionized automation in MDE activities, paving the way for enhanced efficiency and effectiveness in software development. In addition to offering extraordinary automation capabilities for MDE, these emerging technologies create new opportunities for this paradigm to play new roles in development processes. One significant aspect to consider is the democratization of AI techniques. The power of abstraction and automation provided by MDE allows non-specialists to leverage AI capabilities seamlessly. This democratization can lead to more widespread adoption of advanced technologies and contribute to innovation across industries.  
 Moreover, MDE’s potential extends beyond traditional software development. It can be leveraged to build complex and hybrid systems that integrate physical, biological, social, and software components. Such systems are becoming increasingly crucial in modern societies, where interconnectedness and integration are paramount.  
