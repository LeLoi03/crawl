 Product-Focused Software Process Improvement  
 24th International Conference, PROFES 2023, Dornbirn, Austria, December 10–13, 2023, Proceedings, Part I  
 herausgegeben von: Regine Kadgien, Andreas Jedlitschka, Andrea Janes, Valentina Lenarduzzi, Xiaozhou Li   
 Über dieses Buch  
 This book constitutes the refereed proceedings of the 24th International Conference on Product-Focused Software Process Improvement, PROFES 2023, which took place in Dornbirn, Austria, in December 2023.  
  The contributions were organized in topical sections as follows:  
  Part I: Software development and project management; machine learning and data science; software analysis and tools; software testing and quality assurance; security, vulnerabilities, and human factors;  
  Part II: Posters; Tutorials; 2nd Workshop on Computational Intelligence and Software Engineering (CISE 2023); 2nd Workshop on Engineering Processes and Practices for Quantum Software (PPQS’ 23); doctoral symposium.  
 MyTopic Alert   
 Virtual Reality Collaboration Platform for Agile Software Development  
  Nowadays, most software teams use Scrum as their software development process framework. Scrum highly values collaboration and communication inside the team and aims to make them more flexible to spontaneous changes. However, due to the rise of working from home, many developers experienced a significant decrease in communication, social interactions, and a general feeling of social connectedness with their colleagues, which might impede the effectiveness of Scrum teams. To overcome these issues, we present a VR collaboration platform for Scrum meetings, called Virtual Reality-based Agile Collaboration Platform (VRACP). VRACP provides the visualization of and interaction with Scrum artifacts inside a realistic virtual office, the integration and synchronization of external data sources, remote collaboration, and human-like user representations. To evaluate whether VR can increase social connectedness in agile software development teams, we conducted a user study where our solution was compared to common web/desktop applications for Scrum meetings. The results suggest that although efficiency and effectiveness were reduced, it could indeed increase the feeling of being together, collaborating more naturally, and having more fun and motivation.  
 Enes Yigitbas, Iwo Witalinski, Sebastian Gottschalk, Gregor Engels   
 Benefits and Challenges of an Internal Corporate Accelerator in a Software Company: An Action-Research Study  
  To maintain a competitive advantage and adapt to the rapid changes in both the market and technology, organizations need to continuously innovate. As a result, internal corporate accelerators have been implemented as a means to internalize external innovation and promote corporate innovation. However, research on internal corporate accelerators is still limited, and there is a need for a more detailed analysis of both the positive and negative consequences of their implementation. In this paper, we employ the action research methodology to define and implement an internal corporate accelerator within a Brazilian software development company. We describe the accelerator phases, selection criteria, and provided services. We also present the advantages and challenges of implementing this accelerator. The benefits encompass the stimulation of creativity and the evolution of knowledge, while the challenges are tied to participants’ time constraints and the limitation of virtual communication.  
 Vanessa Lopes Abreu, Anderson Jorge Serra Costa, André Coelho Pinheiro, Cleidson R. B. de Souza   
 The Journey to Serverless Migration: An Empirical Analysis of Intentions, Strategies, and Challenges  
  Serverless is an emerging cloud computing paradigm that facilitates developers to focus solely on the application logic rather than provisioning and managing the underlying infrastructure. The inherent characteristics such as scalability, flexibility, and cost efficiency of serverless computing, attracted many companies to migrate their legacy applications toward this paradigm. However, the stateless nature of serverless requires careful migration planning, consideration of its subsequent implications, and potential challenges. To this end, this study investigates the intentions, strategies, and technical and organizational challenges while migrating to a serverless architecture. We investigated the migration processes of 11 systems across diverse domains by conducting 15 in-depth interviews with professionals from 11 organizations. We also presented a detailed discussion of each migration case. Our findings reveal that large enterprises primarily migrate to enhance scalability and operational efficiency, while smaller organizations intend to reduce the cost. Furthermore, organizations use a domain-driven design approach to identify the use case and gradually migrate to serverless using a strangler pattern. However, migration encounters technical challenges i.e., testing event-driven architecture, integrating with the legacy system, lack of standardization, and organizational challenges i.e., mindset change and hiring skilled serverless developers as a prominent. The findings of this study provide a comprehensive understanding that can guide future implementations and advancements in the context of serverless migration.  
 Muhammad Hamza, Muhammad Azeem Akbar, Kari Smolander   
 CAIS-DMA: A Decision-Making Assistant for Collaborative AI Systems  
  A Collaborative Artificial Intelligence System (CAIS) is a cyber-physical system that learns actions in collaboration with humans in a shared environment to achieve a common goal. In particular, a CAIS is equipped with an AI model to support the decision-making process of this collaboration. When an event degrades the performance of CAIS (i.e., a disruptive event), this decision-making process may be hampered or even stopped. Thus, it is of paramount importance to monitor the learning of the AI model, and eventually support its decision-making process in such circumstances. This paper introduces a new methodology to automatically support the decision-making process in CAIS when the system experiences performance degradation after a disruptive event. To this aim, we develop a framework that consists of three components: one manages or simulates CAIS’s environment and disruptive events, the second automates the decision-making process, and the third provides a visual analysis of CAIS behavior. Overall, our framework automatically monitors the decision-making process, intervenes whenever a performance degradation occurs, and recommends the next action. We demonstrate our framework by implementing an example with a real-world collaborative robot, where the framework recommends the next action that balances between minimizing the recovery time (i.e., resilience), and minimizing the energy adverse effects (i.e., greenness).  
 Diaeddin Rimawi, Antonio Liotta, Marco Todescato, Barbara Russo   
 Comparing Machine Learning Algorithms for Medical Time-Series Data  
  Medical software becomes increasingly advanced and more mission-critical. Machine learning is one of the methods which is used in medical software to tackle a diversity of patient data, problems with data quality and providing the ability to process increasingly large amounts of data from medical procedures. However, one of the challenges is the lack of comparisons of algorithms in-situ, during medical procedures. This paper explores the potential of performing real-time comparisons of algorithms for early stroke detection during carotid endarterectomy. SimSAX, DTW (dynamic time warping), and Pearson correlation were compared based on the real-time data against medical specialists in clinical evaluations. The analysis confirmed the general feasibility of the approach, though the algorithms were inadequate in extracting significant information from specific signals. Interviews with physicians revealed a positive outlook toward the system’s potential, advocating for further investigation. Despite their limitations, the algorithms and the prototype application provides a promising foundation for future development of new methods for detecting stroke.  
 Alex Helmersson, Faton Hoti, Sebastian Levander, Aliasgar Shereef, Emil Svensson, Ali El-Merhi, Richard Vithal, Jaquette Liljencrantz, Linda Block, Helena Odenstedt Hergès, Miroslaw Staron   
 What Data Scientists (Care To) Recall  
  To maintain and evolve a software system, developers need to gain new or recover lost knowledge about that system. Thus, program comprehension is a crucial activity in software development and maintenance processes. We know from previous work that developers prioritize what information they want to remember about a system based on the perceived importance of that information. However, AI-based software systems as a special case are not developed by software developers alone, but also by data scientists who deal with other concepts and have a different educational background than most developers. In this paper, we study what information data scientists (aim to) recall about their systems. For this purpose, we replicated our previous work by interviewing 11 data scientists, investigating the knowledge they consider important to remember, and whether they can remember parts of their systems correctly. Our results suggest that data scientists consider knowledge about the AI-project settings to be the most important to remember and that they perform best when remembering knowledge they consider important. Contrary to software developers, data scientists’ self-assessments increase when reflecting on their systems. Our findings indicate similarities and differences between developers and data scientists that are important for managing the processes surrounding a system.  
 Samar Saeed, Shahrzad Sheikholeslami, Jacob Krüger, Regina Hebig   
 Leveraging Historical Data to Support User Story Estimation  
  Accurate and reliable effort and cost estimation are still challenging for agile teams in the industry. It is argued that leveraging historical data regarding the actual time spent on similar past projects could be very helpful to support such an activity before companies embark upon a new project. In this paper, we investigate to what extent user story information retrieved from past projects can help developers estimate the effort needed to develop new similar projects. In close collaboration with a software development company, we applied design science and action research principles to develop and evaluate a tool that employs Natural Language Processing (NLP) algorithms to find past similar user stories and retrieve the actual time spent on them. The tool was then used to estimate a real project that was about to start in the company. A focus group with a team of six developers was conducted to evaluate the tool’s efficacy in estimating similar projects. The results of the focus group with the developers revealed that the tool has the potential to complement the existing estimation process and help different interested parties in the company. Our results contribute both towards a new tool-supported approach to help user story estimation based on historical data and with our lessons learned on why, when, and where such a tool and the estimations provided may play a role in agile projects in the industry.  
 Aleksander G. Duszkiewicz, Jacob G. Sørensen, Niclas Johansen, Henry Edison, Thiago Rocha Silva   
 Design Patterns Understanding and Use in the Automotive Industry: An Interview Study  
  Automotive software is increasing in complexity, leading to new challenges for designers and developers. Design patterns, which offer reusable solutions to common design problems, are a potential way to deal with this complexity. Although design patterns have received much focus in academic publications, it is not clear how they are used in practice. This paper presents an interview-based study that explores the use of design patterns in the automotive industry. The study findings reveal how automotive practitioners view and use design patterns in their software designs. Our study revealed that industry experts have a view of design patterns which often differs from the academic views. They use design patterns in combination with architecture guidelines, principles, and frameworks. Instead of the academic focus on the design patterns, industry professionals focus on the design, architectural tactics, and standards. Such findings highlight the need for a more nuanced understanding of the concept and practical applications of design patterns within the context of industrial software engineering practices.  
 Sushant Kumar Pandey, Sivajeet Chand, Jennifer Horkoff, Miroslaw Staron   
 Is It the Best Solution? Testing an Optimisation Algorithm with Metamorphic Testing  
  Optimisation algorithms play a vital role in solving complex real-world problems by iteratively comparing various solutions to find the optimal or the best solution. However, testing them poses challenges due to their “non-testable” nature, where a reliable test oracle is lacking. Traditional testing techniques may not directly address whether these algorithms yield the best solution. In this context, Metamorphic Testing (MT) emerges as a promising approach. MT leverages Metamorphic Relations (MRs) to indirectly test the System Under Test (SUT) by examining input-output pairs and revealing inconsistencies based on MRs. In this paper, we apply the MT approach to a black-box industrial optimisation algorithm and present our observations and findings. We identify successful aspects, challenges, and opportunities for further research. The findings from our study are expected to shed light on the practical feasibility of MT for testing optimisation algorithms. The paper provides a formal definition of MT, an overview of related work in optimisation algorithms, and a description of the industrial context, methodology, and results.  
 Alejandra Duque-Torres, Claus Klammer, Stefan Fischer, Dietmar Pfahl   
 Anomaly Detection Through Container Testing: A Survey of Company Practices  
  Background: Containers are a commonly used solution for deploying software applications. Therefore, container functionality and security is a concern of practitioners and researchers. Testing is essential to ensure the quality of the container environment component and the software product and plays a crucial role in using containers.Objective: In light of the increasing role of software containers and the lack of research on testing them, we study container testing practices. In this paper, we investigate the current approaches for testing containers. Moreover, we aim to identify areas for improvement and emphasize the importance of testing in securing the container environment and the final software product.Method: We conducted a survey to collect primary data from companies implementing container testing practices and the commonly used tools in container testing. There were 14 respondents from a total of 10 different companies with experience using containers and varying work responsibilities.Findings: The survey findings illustrate the significance of testing, the growing interest in and utilization of containers, and the emerging security and vulnerability concerns. The research reveals variations in testing approaches between companies and the lack of consensus on how testing should be carried out, with advancements primarily driven by industry practices rather than academic research.Conclusion: In this study, we show the importance of testing software containers. It lays out the current testing approaches, challenges, and the need for standardized container testing practices. We also provide recommendations on how to develop these practices further.  
 Salla Timonen, Maha Sroor, Rahul Mohanani, Tommi Mikkonen   
 Characterizing Requirements Smells  
  Context: Software specifications are usually written in natural language and may suffer from imprecision, ambiguity, and other quality issues, called thereafter, requirement smells. Requirement smells can hinder the development of a project in many aspects, such as delays, reworks, and low customer satisfaction. From an industrial perspective, we want to focus our time and effort on identifying and preventing the requirement smells that are of high interest. Aim: This paper aims to characterise 12 requirements smells in terms of frequency, severity, and effects. Method: We interviewed ten experienced practitioners from different divisions of a large international company in the safety-critical domain called MBDA Italy Spa. Results: Our interview shows that the smell types perceived as most severe are Ambiguity and Verifiability, while as most frequent are Ambiguity and Complexity. We also provide a set of six lessons learnt about requirements smells, such as that effects of smells are expected to differ across smell types. Conclusions: Our results help to increase awareness about the importance of requirement smells. Our results pave the way for future empirical investigations, ranging from a survey confirming our findings to controlled experiments measuring the effect size of specific requirement smells.  
 Emanuele Gentili, Davide Falessi   
 On Deprecated API Usages: An Exploratory Study of Top-Starred Projects on GitHub  
  A deprecated Application Programming Interface (API) is one that is no longer recommended to use by its original developers. While deprecated APIs (i.e., deprecated fields, methods, and classes) are still implemented, they can be removed in future implementations. Therefore, developers should not use deprecated APIs in newly written code and should update existing code so that it does not use deprecated APIs anymore. In this paper, we present the results of an exploratory Mining-Software-Repository study to gather preliminary empirical evidence on deprecated API usages in open-source Java applications. To that end, we quantitatively analyzed the commit histories of 14 applications whose software projects were top-starred on GitHub. We found that deprecated APIs usages are pretty widespread in the studied software applications; and only in half of these applications, developers remove deprecated API usages after few commits and days. Also, half of the studied applications mostly use deprecated APIs declared in their own source code, rather than using deprecated APIs that lie in third-party software. Finally, we noted that the introductions and removals of deprecated API usages are mostly the result of changes made by senior developers, rather than newcomer ones.  
 Pietro Cassieri, Simone Romano, Giuseppe Scanniello   
 Evaluating Microservice Organizational Coupling Based on Cross-Service Contribution  
  For traditional modular software systems, “high cohesion, low coupling” is a recommended setting while it remains so for microservice architectures. However, coupling phenomena commonly exist therein which are caused by cross-service calls and dependencies. In addition, it is noticeable that teams for microservice projects can also suffer from high coupling issues in terms of their cross-service contribution, which can inevitably result in technical debt and high managerial costs. Such organizational coupling needs to be detected and mitigated in time to prevent future losses. Therefore, this paper proposes an automatable approach to evaluate the organizational coupling by investigating the microservice ownership and cross-service contribution. Furthermore, we validate the feasibility of the approach using a case study of a popular microservice project. The results show that, with sufficient software repository data, we can not only evaluate the organizational coupling in microservice system projects but also continuously monitor its evolution.  
 Xiaozhou Li, Dario Amoroso d’Aragona, Davide Taibi   
 Continuous Experimentation and Human Factors  
  An Exploratory Study   
 In today’s rapidly evolving technological landscape, the success of tools and systems relies heavily on their ability to meet the needs and expectations of users. User-centered design approaches, with a focus on human factors, have gained increasing attention as they prioritize the human element in the development process. With the increasing complexity of software-based systems, companies are adopting agile development methodologies and emphasizing continuous software experimentation. However, there is limited knowledge on how to effectively execute continuous experimentation with respect to human factors within this context. This research paper presents an exploratory qualitative study for integrating human factors in continuous experimentation, aiming to uncover distinctive characteristics of human factors and continuous software experiments, practical challenges for integrating human factors in continuous software experiments, and best practices associated with the management of continuous human factors experimentation.  
 Amna Pir Muhammad, Eric Knauss, Jonas Bärgman, Alessia Knauss   
